/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Path of a note or a folder",
  showWarning: true,
  maxMacroDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true,
  allowCrossNoteReference: false
};
var LIRPList = class {
  constructor(lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No list defined in note "${noteName}"`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      this.list.push(new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString));
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString));
    return true;
  }
  getListSuggestion() {
    let noteSuggestion;
    noteSuggestion = [];
    this.list.forEach((element) => {
      if (element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  execMacroSubstitution(item, macroRecursion) {
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], -1);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, macroRecursion) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: listTitle,
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < macroRecursion; repeat++) {
        returnOfExecMacro = this.execMacroSubstitution(randomItem, macroRecursion);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => element.title).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && macroRecursion !== -1) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    return randomItem;
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.noteSelected = void 0;
  }
  selectNote(noteName) {
    if (noteName === "" && this.multiNote.length > 1) {
      this.noteSelected = this.multiNote[0];
      return true;
    } else {
      this.noteSelected = this.multiNote.find((element) => element.noteName === noteName);
      return this.noteSelected !== void 0;
    }
  }
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString);
    const status = currentNote.loadFromNote(noteName, noteContent);
    this.multiNote.push(currentNote);
    return status;
  }
  getListSuggestion() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getListSuggestion();
    } else {
      let allListSuggestion = [];
      this.multiNote.map((element) => {
        allListSuggestion = allListSuggestion.concat(element.getListSuggestion());
      });
      return allListSuggestion;
    }
  }
  getNoteSuggestion() {
    let noteSuggestion = [];
    this.multiNote.map((element) => {
      if (element.getListSuggestion().length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  pickRandomItemFromList(listTitle, macroRecursion) {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.pickRandomItemFromList(listTitle, macroRecursion);
    } else {
      return "";
    }
  }
  pickRandomWithCrossNoteMacro(listTitle, macroRecursion) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    return superNote.pickRandomItemFromList(listTitle, macroRecursion);
  }
  getError() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getError();
    } else {
      let allError = [];
      this.multiNote.map((element) => {
        allError = allError.concat(element.getError());
      });
      return allError;
    }
  }
  getWarning() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getWarning();
    } else {
      let allWarning = [];
      this.multiNote.map((element) => {
        allWarning = allWarning.concat(element.getWarning());
      });
      return allWarning;
    }
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob();
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob();
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue);
    let loadWithoutError = true;
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        loadWithoutError = currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content) && loadWithoutError;
      }
      ;
    }
    ;
    if (!loadWithoutError) {
      currentLIRP.getError().map((element) => {
        new import_obsidian.Notice(element);
      });
      if (currentLIRP.length === 0) {
        return;
      }
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    if (currentLIRP.length === 0) {
      new import_obsidian.Notice('Error : check settings "Path " in plugin List Item Random Picker !');
      return;
    } else if (currentLIRP.length === 1) {
      currentLIRP.selectNote("");
      new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
        this.workWithTitle(currentLIRP, item.title);
      }).open();
    } else {
      if (this.settings.showNoteSelector) {
        new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (item) => {
          currentLIRP.selectNote(item.title);
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item2) => {
            this.workWithTitle(currentLIRP, item2.title);
          }).open();
        }).open();
      } else {
        new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
          currentLIRP.selectNote(item.noteName);
          this.workWithTitle(currentLIRP, item.title);
        }).open();
      }
      ;
    }
    ;
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getFiles();
    let filesInNotePath = [];
    const notePathRegex = new RegExp(`^${notePath}(/.+)?.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      }
      ;
    });
    return filesInNotePath;
  }
  workWithTitle(Note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      let PickMethod = "";
      if (this.settings.allowCrossNoteReference) {
        PickMethod = "pickRandomWithCrossNoteMacro";
      } else {
        PickMethod = "pickRandomItemFromList";
      }
      ;
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const editor = activeView.editor;
      const selection = editor.getSelection();
      if (noticeRegex.test(selection)) {
        new import_obsidian.Notice(Note[PickMethod](listTitle, this.settings.maxMacroDepth));
        if (this.settings.deleteSelectionForNotification) {
          editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note[PickMethod](listTitle, this.settings.maxMacroDepth));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note[PickMethod](listTitle, this.settings.maxMacroDepth);
        }
        editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
    ;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Note setting" });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Interface settings" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "List settings" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of an item has this value, the line is flush.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("If you want some headin one or first level list item in your item, you could escape them with these value").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Selection settings" });
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the text selected has this value, the item is not inserted, but notified !").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delete selection value for notification").setDesc("If set, the selected value for notification is deleted.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Technical settings" });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Allow cross note reference").setDesc("bla bla bla.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.allowCrossNoteReference);
      toggle.onChange(async (value) => {
        this.plugin.settings.allowCrossNoteReference = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgQXBwLCBTdWdnZXN0TW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSwgVEZvbGRlciwgTWFya2Rvd25WaWV3fSBmcm9tICdvYnNpZGlhbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleGVzPFQ+KGFuQXJyYXk6IFRbXSwgcHJlZGljYXRlOiAoZWxlbWVudDogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICBjb25zdCBpbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFuQXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCwgaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cmluZ1RvRXNjYXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdUb0VzY2FwZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuaW50ZXJmYWNlIExJUlBQbHVnaW5TZXR0aW5ncyB7XG4gICAgbm90ZVBhdGg6IHN0cmluZztcbiAgICBzaG93V2FybmluZzogYm9vbGVhbjtcbiAgICBtYXhNYWNyb0RlcHRoOiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBib29sZWFuO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVZhbHVlOiBzdHJpbmc7XG4gICAgc2hvd05vdGVTZWxlY3RvcjogYm9vbGVhbjtcbiAgICBhbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZTogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTElSUFBsdWdpblNldHRpbmdzID0ge1xuICAgIG5vdGVQYXRoOiAnUGF0aCBvZiBhIG5vdGUgb3IgYSBmb2xkZXInLFxuICAgIHNob3dXYXJuaW5nOiB0cnVlLFxuICAgIG1heE1hY3JvRGVwdGg6IDEsXG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiAnIScsXG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICBudWxsVmFsdWU6ICdudWxsJyxcbiAgICBlc2NhcGVWYWx1ZTogJy8vJyxcbiAgICBzaG93Tm90ZVNlbGVjdG9yOiB0cnVlLFxuICAgIGFsbG93Q3Jvc3NOb3RlUmVmZXJlbmNlOiBmYWxzZSxcbn07XG5cbmludGVyZmFjZSBMSVJQTGlzdEludGVyZmFjZSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICBnZXRTdWdnZXN0aW9uKG5vdGVOYW1lOiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZTtcbiAgICBub3RIaWRkZW4oKTogYm9vbGVhbjtcbiAgICBwaWNrUmFuZG9tSXRlbSgpOiBzdHJpbmc7XG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgTElSUExpc3QgaW1wbGVtZW50cyBMSVJQTGlzdEludGVyZmFjZSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbiAgICBpdGVtczogc3RyaW5nW107XG4gICAgd2FybmluZzogc3RyaW5nW107XG4gICAgbnVsbFZhbHVlOiBzdHJpbmc7XG4gICAgZXNjYXBlU3RyaW5nOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihsaW5lczogc3RyaW5nW10sIG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgICAgIHRoaXMubnVsbFZhbHVlID0gbnVsbFZhbHVlO1xuICAgICAgICB0aGlzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZztcblxuICAgICAgICBjb25zdCBoZWFkaW5nUmVnRXggPSAvXiMgKyguKykkLztcbiAgICAgICAgdGhpcy50aXRsZSA9IGxpbmVzWzBdLnJlcGxhY2UoaGVhZGluZ1JlZ0V4LCBcIiQxXCIpO1xuICAgICAgICBjb25zdCBpdGFsaWNIZWFkaW5nUmVnZXggPSAvXihffFxcKilcXFMvO1xuICAgICAgICBpZiAoaXRhbGljSGVhZGluZ1JlZ2V4LnRlc3QodGhpcy50aXRsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMuc2hpZnQoKTtcbiAgICAgICAgY29uc3QgbGlzdEJlZ2luSXRlbVJlZ2V4ID0gL14oLXxcXGQrXFwuKSArKC4rKSQvO1xuICAgICAgICBjb25zdCBsaXN0QmVnaW5JbmRleGVzID0gZmluZEluZGV4ZXMobGluZXMsIChlbGVtZW50KSA9PiBsaXN0QmVnaW5JdGVtUmVnZXgudGVzdChlbGVtZW50KSk7XG4gICAgICAgIGlmIChsaXN0QmVnaW5JbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy53YXJuaW5nLnB1c2goYE5vIGl0ZW1zIGluIGxpc3QgJHt0aGlzLnRpdGxlfWApO1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsZWFuTGluZXMgPSBsaW5lcy5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnJlcGxhY2UobGlzdEJlZ2luSXRlbVJlZ2V4LCBcIiQyXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGlzdEJlZ2luSW5kZXhlc1swXSAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IG1kRGVzY3JpcHRpb24gPSBjbGVhbkxpbmVzLnNsaWNlKDAsIGxpc3RCZWdpbkluZGV4ZXNbMF0pO1xuICAgICAgICAgICAgLy8gdGFraW5nIGNhcmUgb2YgTUQwMjJcbiAgICAgICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgICAgIGlmIChtZERlc2NyaXB0aW9uWzBdID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgbWREZXNjcmlwdGlvbi5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGFraW5nIGNhcmUgb2YgTUQwMzJcbiAgICAgICAgICAgIC8vICAgTUQwMzIvYmxhbmtzLWFyb3VuZC1saXN0czogTGlzdHMgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgICAgIC8vIER1ZSB0byBzcGxpdCBvbiAnXFxuJywgdGhlIHNsaWNlLCBhbmQgYXQgbGVhc3QgYSBqb2luIG9uICdcXG4nIHRoZSBsYXN0ICdcXG4nIGlzIGFsd2F5cyBsb3N0ICFcbiAgICAgICAgICAgIC8vIFNvIHRoZSBmb2xvd2luZyBjb2RlIGlzIHVzZWxlc3NcbiAgICAgICAgICAgIC8vIGlmIChtZERlc2NyaXB0aW9uLmF0KC0xKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgLy8gICAgIG1kRGVzY3JpcHRpb24ucG9wKCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gbWREZXNjcmlwdGlvbi5qb2luKCdcXG4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGlzdEJlZ2luQ291bnQgPSBsaXN0QmVnaW5JbmRleGVzLmxlbmd0aFxuICAgICAgICBsZXQgaXRlbTogc3RyaW5nW107XG4gICAgICAgIGZvciAobGV0IGN1cnJlbnRJbmRleCA9IDA7IGN1cnJlbnRJbmRleCA8IChsaXN0QmVnaW5Db3VudCAtIDEpOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgICAgICAgaXRlbSA9IChjbGVhbkxpbmVzLnNsaWNlKGxpc3RCZWdpbkluZGV4ZXNbY3VycmVudEluZGV4XSwgbGlzdEJlZ2luSW5kZXhlc1tjdXJyZW50SW5kZXggKyAxXSkpO1xuICAgICAgICAgICAgdGhpcy5wdXNoSXRlbUJhc2VkT25XZWlnaHQoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbSA9IChjbGVhbkxpbmVzLnNsaWNlKGxpc3RCZWdpbkluZGV4ZXNbbGlzdEJlZ2luQ291bnQgLSAxXSkpO1xuICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAvLyAgIE1EMDIyL2JsYW5rcy1hcm91bmQtaGVhZGluZ3M6IEhlYWRpbmdzIHNob3VsZCBiZSBzdXJyb3VuZGVkIGJ5IGJsYW5rIGxpbmVzXG4gICAgICAgIGlmIChpdGVtLmF0KC0xKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgaXRlbS5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtKTtcbiAgICB9XG5cbiAgICBwdXNoSXRlbUJhc2VkT25XZWlnaHQoaXRlbTogc3RyaW5nW10pIDogdm9pZCB7XG4gICAgICAgIGNvbnN0IEl0ZW1XaXRoV2VpZ2h0UmVnRXggPSAvXlxcKChcXGQrKVxcKVxccysoLispJC87XG4gICAgICAgIGxldCByZWdFeEV4ZWN1dGlvbjtcbiAgICAgICAgbGV0IHJlcGVhdDogbnVtYmVyO1xuICAgICAgICBpZiAoKHJlZ0V4RXhlY3V0aW9uID0gSXRlbVdpdGhXZWlnaHRSZWdFeC5leGVjKGl0ZW1bMF0pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVwZWF0ID0gTnVtYmVyKHJlZ0V4RXhlY3V0aW9uWzFdKTtcbiAgICAgICAgICAgIGl0ZW1bMF0gPSByZWdFeEV4ZWN1dGlvblsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGVhdCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1bMF0gPT09IHRoaXMubnVsbFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpdGVtWzBdID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zaGlmdCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdHJpbmdSZWdleCA9IGBeICoke3RoaXMuZXNjYXBlU3RyaW5nfSguKilgO1xuICAgICAgICBjb25zdCBlc2NhcGVTdHJpbmdSZWdFeCA9IG5ldyBSZWdFeHAoc3RyaW5nUmVnZXgsICdnbScpO1xuICAgICAgICBjb25zdCBlc2NhcGVJdGVtID0gaXRlbS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnJlcGxhY2UoZXNjYXBlU3RyaW5nUmVnRXgsICckMScpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3RyaW5nSXRlbSA9IGVzY2FwZUl0ZW0uam9pbignXFxuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChzdHJpbmdJdGVtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBnZXRTdWdnZXN0aW9uKG5vdGVOYW1lOiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSB7XG4gICAgICAgICAgICBub3RlTmFtZTogbm90ZU5hbWUsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAodGhpcy5kZXNjcmlwdGlvbi5zcGxpdCgnXFxuJylbMF0pLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWdnZXN0aW9uO1xuICAgIH07XG5cbiAgICBub3RIaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oaWRkZW47XG4gICAgfVxuXG4gICAgcGlja1JhbmRvbUl0ZW0oKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJhbmRvbUl0ZW06IHN0cmluZyA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJhbmRvbUl0ZW0gPSB0aGlzLml0ZW1zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuaXRlbXMubGVuZ3RoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmRvbUl0ZW07XG4gICAgfVxuXG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLndhcm5pbmc7XG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBMSVJQRXhlY01hY3JvSW50ZXJmYWNlIHtcbiAgICBsYXN0TGlzdFRpdGxlOiBzdHJpbmc7XG4gICAgbW9kaWZpZWRJdGVtOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbG9hZEZyb21Ob3RlKG5vdGVOYW1lOiBzdHJpbmcsIG5vdGVDb250ZW50OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgbWFjcm9SZWN1cnNpb246IG51bWJlcik6IHN0cmluZzsgXG4gICAgZ2V0RXJyb3IoKTogc3RyaW5nW107XG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXTtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmNsYXNzIExJUlBOb3RlIGltcGxlbWVudHMgTElSUE5vdGVJbnRlcmZhY2Uge1xuICAgIG5vdGVOYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBsaXN0OiBMSVJQTGlzdFtdO1xuICAgIGVycm9yOiBzdHJpbmdbXTtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcbiAgICBudWxsVmFsdWU6IHN0cmluZztcbiAgICBlc2NhcGVTdHJpbmc6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yIChudWxsVmFsdWU6IHN0cmluZywgZXNjYXBlU3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5ub3RlTmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIlwiO1xuICAgICAgICB0aGlzLmxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvciA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmcgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuICAgIH1cblxuICAgIGxvYWRGcm9tTm90ZShub3RlTmFtZTogc3RyaW5nLCBub3RlQ29udGVudDogc3RyaW5nLCApOiBib29sZWFuIHtcbiAgICAgICAgdGhpcy5ub3RlTmFtZSA9IG5vdGVOYW1lO1xuICAgICAgICBjb25zdCBsaW5lcyA9IG5vdGVDb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgY29uc3QgaGVhZGluZ1JlZ2V4ID0gL14jIC4rJC87XG4gICAgICAgIGxldCBoZWFkaW5nSW5kZXhlcyA9IGZpbmRJbmRleGVzKGxpbmVzLCAoZWxlbWVudCkgPT4gaGVhZGluZ1JlZ2V4LnRlc3QoZWxlbWVudCkpO1xuICAgICAgICBpZiAoaGVhZGluZ0luZGV4ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yLnB1c2goYE5vIGxpc3QgZGVmaW5lZCBpbiBub3RlIFwiJHtub3RlTmFtZX1cImApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkaW5nSW5kZXhlc1swXSAhPT0gMCkge1xuICAgICAgICAgICAgLy8gdGFraW5nIGNhcmUgb2YgTUQwMjJcbiAgICAgICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgICAgIC8vIER1ZSB0byBzcGxpdCBvbiAnXFxuJywgdGhlIHNsaWNlLCBhbmQgYXQgbGVhc3QgYSBqb2luIG9uICdcXG4nIHRoZSBsYXN0ICdcXG4nIGlzIGFsd2F5cyBsb3N0ICFcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBsaW5lcy5zbGljZSgwLCBoZWFkaW5nSW5kZXhlc1swXSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGVhZGluZ0NvdW50ID0gaGVhZGluZ0luZGV4ZXMubGVuZ3RoXG4gICAgICAgIGZvciAobGV0IGN1cnJlbnRJbmRleCA9IDA7IGN1cnJlbnRJbmRleCA8IChoZWFkaW5nQ291bnQgLSAxKTsgY3VycmVudEluZGV4KyspIHtcbiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXggKyAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdC5wdXNoKG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1toZWFkaW5nQ291bnQgLSAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZykpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBsZXQgbm90ZVN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgICAgIG5vdGVTdWdnZXN0aW9uID0gW107XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub3RIaWRkZW4oKSkge1xuICAgICAgICAgICAgICAgIG5vdGVTdWdnZXN0aW9uLnB1c2goZWxlbWVudC5nZXRTdWdnZXN0aW9uKHRoaXMubm90ZU5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3RlU3VnZ2VzdGlvbjtcbiAgICB9XG5cbiAgICBleGVjTWFjcm9TdWJzdGl0dXRpb24oaXRlbTogc3RyaW5nLCBtYWNyb1JlY3Vyc2lvbjogbnVtYmVyKTogTElSUEV4ZWNNYWNyb0ludGVyZmFjZSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ01hY3JvUmVmUmVnZXg6IHN0cmluZyA9IGBcXHsoJHt0aGlzLmxpc3QubWFwKChlbGVtZW50KSA9PiBlc2NhcGVSZWdleChlbGVtZW50LnRpdGxlKSkuam9pbignfCcpfSlcXH1gO1xuICAgICAgICBjb25zdCBtYWNyb1JlZlJlZ2V4ID0gbmV3IFJlZ0V4cCAoc3RyaW5nTWFjcm9SZWZSZWdleCwnbWcnKTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBsZXQgbW9kaWZpZWRJdGVtOnN0cmluZyA9IGl0ZW07XG4gICAgICAgIGxldCBsaXN0VGl0bGU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IG1hY3JvUmVmUmVnZXguZXhlYyhtb2RpZmllZEl0ZW0pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlOiBzdHJpbmcgPSB0aGlzLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobWF0Y2hbMV0sIC0xKTsgXG4gICAgICAgICAgICBsaXN0VGl0bGUgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIG1vZGlmaWVkSXRlbSA9IG1vZGlmaWVkSXRlbS5yZXBsYWNlKGxpc3RUaXRsZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgbWFjcm9SZWZSZWdleC5sYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG5ld1ZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFzdExpc3RUaXRsZTogbGlzdFRpdGxlLFxuICAgICAgICAgICAgbW9kaWZpZWRJdGVtOiBtb2RpZmllZEl0ZW0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgbWFjcm9SZWN1cnNpb246IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCByYW5kb21JdGVtOiBzdHJpbmcgPSBcIlwiO1xuICAgICAgICBsZXQgcmV0dXJuT2ZFeGVjTWFjcm86IExJUlBFeGVjTWFjcm9JbnRlcmZhY2UgPSB7XG4gICAgICAgICAgICBsYXN0TGlzdFRpdGxlOiBsaXN0VGl0bGUsXG4gICAgICAgICAgICBtb2RpZmllZEl0ZW06IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ID0gdGhpcy5saXN0LmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQudGl0bGUgPT09IGxpc3RUaXRsZSk7XG4gICAgICAgIGlmIChjdXJyZW50TGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByYW5kb21JdGVtID0gY3VycmVudExpc3QucGlja1JhbmRvbUl0ZW0oKTtcbiAgICAgICAgICAgIGZvciAobGV0IHJlcGVhdCA9IDA7IHJlcGVhdCA8IG1hY3JvUmVjdXJzaW9uOyByZXBlYXQrKykge1xuICAgICAgICAgICAgICAgIHJldHVybk9mRXhlY01hY3JvID0gdGhpcy5leGVjTWFjcm9TdWJzdGl0dXRpb24ocmFuZG9tSXRlbSwgbWFjcm9SZWN1cnNpb24pO1xuICAgICAgICAgICAgICAgIHJhbmRvbUl0ZW0gPSByZXR1cm5PZkV4ZWNNYWNyby5tb2RpZmllZEl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyaW5nTWFjcm9SZWZSZWdleDogc3RyaW5nID0gYFxceygke3RoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IGVsZW1lbnQudGl0bGUpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgpO1xuICAgICAgICBpZiAobWFjcm9SZWZSZWdleC50ZXN0KHJhbmRvbUl0ZW0pICYmIG1hY3JvUmVjdXJzaW9uICE9PSAtMSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgTWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBpbiBub3RlIFwiJHt0aGlzLm5vdGVOYW1lfVwiIGFmdGVyIGNhbGxpbmcgXCIke3JldHVybk9mRXhlY01hY3JvLmxhc3RMaXN0VGl0bGV9XCJgKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJhbmRvbUl0ZW07XG4gICAgfSBcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfTtcblxuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsV2FybmluZzogc3RyaW5nW107XG4gICAgICAgIGFsbFdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KHRoaXMud2FybmluZyk7XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhbGxXYXJuaW5nID0gYWxsV2FybmluZy5jb25jYXQoZWxlbWVudC5nZXRXYXJuaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IE5vdGVXYXJuaW5nOiBzdHJpbmdbXTtcbiAgICAgICAgTm90ZVdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZy5mb3JFYWNoKChlbGVtZW50KSA9PiBcbiAgICAgICAgICAgIE5vdGVXYXJuaW5nLnB1c2goYFdhcm5pbmcgaW4gbm90ZSBcIiR7dGhpcy5ub3RlTmFtZX1cIiA6ICR7ZWxlbWVudH1gKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gTm90ZVdhcm5pbmc7XG4gICAgfTtcblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGg7XG4gICAgfTtcblxuXG59XG5cbmNsYXNzIExJUlBNdWx0aU5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbXVsdGlOb3RlOiBMSVJQTm90ZVtdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIG5vdGVTZWxlY3RlZDogTElSUE5vdGV8dW5kZWZpbmVkO1xuXG4gICAgY29uc3RydWN0b3IgKG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZykge1xuICAgICAgICB0aGlzLm11bHRpTm90ZSA9IFtdO1xuICAgICAgICB0aGlzLm51bGxWYWx1ZSA9IG51bGxWYWx1ZTtcbiAgICAgICAgdGhpcy5lc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmc7XG4gICAgICAgIHRoaXMubm90ZVNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICBzZWxlY3ROb3RlKG5vdGVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKG5vdGVOYW1lID09PSAnJyAmJiB0aGlzLm11bHRpTm90ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGVTZWxlY3RlZCA9dGhpcy5tdWx0aU5vdGVbMF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm90ZVNlbGVjdGVkID0gdGhpcy5tdWx0aU5vdGUuZmluZCgoZWxlbWVudCkgPT4gZWxlbWVudC5ub3RlTmFtZSA9PT0gbm90ZU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5vdGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjdXJyZW50Tm90ZSA9IG5ldyBMSVJQTm90ZSh0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBjdXJyZW50Tm90ZS5sb2FkRnJvbU5vdGUobm90ZU5hbWUsIG5vdGVDb250ZW50KTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUucHVzaChjdXJyZW50Tm90ZSk7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfTtcblxuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLmdldExpc3RTdWdnZXN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsTGlzdFN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbExpc3RTdWdnZXN0aW9uID0gYWxsTGlzdFN1Z2dlc3Rpb24uY29uY2F0KGVsZW1lbnQuZ2V0TGlzdFN1Z2dlc3Rpb24oKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFsbExpc3RTdWdnZXN0aW9uO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldE5vdGVTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBsZXQgbm90ZVN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10gPSBbXTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5nZXRMaXN0U3VnZ2VzdGlvbigpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBub3RlU3VnZ2VzdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZU5hbWU6IGVsZW1lbnQubm90ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbGVtZW50Lm5vdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKGVsZW1lbnQuZGVzY3JpcHRpb24uc3BsaXQoJ1xcbicpWzBdKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm90ZVN1Z2dlc3Rpb247XG4gICAgfTtcbiAgICBcbiAgICBwaWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZTogc3RyaW5nLCBtYWNyb1JlY3Vyc2lvbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGVTZWxlY3RlZC5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSwgbWFjcm9SZWN1cnNpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9OyBcblxuICAgIHBpY2tSYW5kb21XaXRoQ3Jvc3NOb3RlTWFjcm8obGlzdFRpdGxlOiBzdHJpbmcsIG1hY3JvUmVjdXJzaW9uOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc3VwZXJOb3RlID0gbmV3IExJUlBOb3RlKHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZyk7XG4gICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgc3VwZXJOb3RlLmxpc3QgPSBzdXBlck5vdGUubGlzdC5jb25jYXQoZWxlbWVudC5saXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdXBlck5vdGUucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGUsIG1hY3JvUmVjdXJzaW9uKTtcbiAgICB9O1xuXG4gICAgZ2V0RXJyb3IoKTogc3RyaW5nW10ge1xuICAgICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLmdldEVycm9yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsRXJyb3I6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbEVycm9yID0gYWxsRXJyb3IuY29uY2F0KGVsZW1lbnQuZ2V0RXJyb3IoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhbGxFcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGVTZWxlY3RlZC5nZXRXYXJuaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsV2FybmluZzpzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KGVsZW1lbnQuZ2V0V2FybmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFsbFdhcm5pbmc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aU5vdGUubGVuZ3RoO1xuICAgIH07XG5cbn07XG5cbmludGVyZmFjZSBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBMSVJQU3VnZ2VzdE1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlPiB7XG4gICAgaXRlbXM6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgY2FsbGJhY2s6ICh2YWx1ZTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpID0+IHZvaWQ7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpdGVtczogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSwgY2FsbGJhY2s6ICh2YWx1ZTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpID0+IHZvaWQpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZ2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBcbiAgICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogaXRlbS50aXRsZSB9KTtcbiAgICAgICAgZWwuY3JlYXRlRWwoJ3NtYWxsJywge3RleHQ6IGl0ZW0uZGVzY3JpcHRpb259KTtcbiAgICAgIH1cbiAgXG4gICAgICBvbkNob29zZVN1Z2dlc3Rpb24oaXRlbTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhpdGVtKTtcbiAgICAgIH19XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RJdGVtUmFuZG9tUGlja2VyIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogTElSUFBsdWdpblNldHRpbmdzO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignbGlzdC10cmVlJywgJ1BpY2sgcmFuZG9tIGxpc3QgaXRlbScsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZG9UaGVKb2IoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LXJhbmRvbS1pdGVtJyxcbiAgICAgICAgICAgIG5hbWU6ICdJbnNlcnQgcmFuZG9tIGl0ZW0gZnJvbSBsaXN0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1RoZUpvYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IExJUlBTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG5cbiAgICB9XG5cbiAgICBhc3luYyBkb1RoZUpvYigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgYWxsTElSUEZpbGVzID0gdGhpcy5nZXRMSVJQRmlsZXModGhpcy5zZXR0aW5ncy5ub3RlUGF0aCk7XG4gICAgICAgIGxldCBjdXJyZW50TElSUCA9IG5ldyBMSVJQTXVsdGlOb3RlKHRoaXMuc2V0dGluZ3MubnVsbFZhbHVlLCB0aGlzLnNldHRpbmdzLmVzY2FwZVZhbHVlKTtcbiAgICAgICAgbGV0IGxvYWRXaXRob3V0RXJyb3I6Ym9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjdXJyZW50RmlsZSBvZiBhbGxMSVJQRmlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGU09iamVjdCA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdXJyZW50RmlsZSk7XG4gICAgICAgICAgICBsZXQgY29udGVudDpzdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGlmIChjdXJyZW50RlNPYmplY3QgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGN1cnJlbnRGU09iamVjdCk7XG4gICAgICAgICAgICAgICAgbG9hZFdpdGhvdXRFcnJvciA9ICBjdXJyZW50TElSUC5sb2FkRnJvbU5vdGUoY3VycmVudEZTT2JqZWN0LnBhdGguc2xpY2UoMCwgLTMpLCBjb250ZW50KSAmJiBsb2FkV2l0aG91dEVycm9yO1xuICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWxvYWRXaXRob3V0RXJyb3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRMSVJQLmdldEVycm9yKCkubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93V2FybmluZykge1xuICAgICAgICAgICAgY3VycmVudExJUlAuZ2V0V2FybmluZygpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoY3VycmVudExJUlAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdFcnJvciA6IGNoZWNrIHNldHRpbmdzIFwiUGF0aCBcIiBpbiBwbHVnaW4gTGlzdCBJdGVtIFJhbmRvbSBQaWNrZXIgIScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY3VycmVudExJUlAuc2VsZWN0Tm90ZSgnJyk7XG4gICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXROb3RlU3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29ya1dpdGhUaXRsZShjdXJyZW50TElSUCwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXRMaXN0U3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0ubm90ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0TElSUEZpbGVzIChub3RlUGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsVmF1bHRGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCk7XG4gICAgICAgIGxldCBmaWxlc0luTm90ZVBhdGg6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3Qgbm90ZVBhdGhSZWdleCA9IG5ldyBSZWdFeHAoYF4ke25vdGVQYXRofSgvLispP1xcLm1kJGApO1xuICAgICAgICBhbGxWYXVsdEZpbGVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vdGVQYXRoUmVnZXgudGVzdChlbGVtZW50LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgZmlsZXNJbk5vdGVQYXRoLnB1c2goZWxlbWVudC5wYXRoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXNJbk5vdGVQYXRoO1xuICAgIH07XG5cbiAgICB3b3JrV2l0aFRpdGxlKE5vdGU6IExJUlBOb3RlSW50ZXJmYWNlLCBsaXN0VGl0bGU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblxuICAgICAgICBpZiAoYWN0aXZlVmlldykge1xuICAgICAgICAgICAgbGV0IFBpY2tNZXRob2Q6c3RyaW5nID0gJyc7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgIFBpY2tNZXRob2QgPSBcInBpY2tSYW5kb21XaXRoQ3Jvc3NOb3RlTWFjcm9cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgUGlja01ldGhvZCA9IFwicGlja1JhbmRvbUl0ZW1Gcm9tTGlzdFwiO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uUmVnZXg6c3RyaW5nID0gYF4ke3RoaXMuc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9ufSRgO1xuICAgICAgICAgICAgY29uc3Qgbm90aWNlUmVnZXggPSBuZXcgUmVnRXhwKHNlbGVjdGlvbkZvck5vdGlmaWNhdGlvblJlZ2V4KTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAobm90aWNlUmVnZXgudGVzdChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShOb3RlW1BpY2tNZXRob2RdKGxpc3RUaXRsZSwgdGhpcy5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoKSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBzdHJpbmdUb0luc2VydDogc3RyaW5nID0gJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0SW5zZXJ0UmVnRXggPSAvXihcXGQrKSguKikvZ207XG4gICAgICAgICAgICAgICAgbGV0IHJlZ0V4RXhlY3V0aW9uO1xuICAgICAgICAgICAgICAgIGxldCByZXBlYXQ6IG51bWJlcjtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZ0V4RXhlY3V0aW9uID0gcmVwZWF0SW5zZXJ0UmVnRXguZXhlYyhzZWxlY3Rpb24pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBlYXQgPSBOdW1iZXIocmVnRXhFeGVjdXRpb25bMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWxpbWl0ZXIgPSBzZWxlY3Rpb24ucmVwbGFjZSgvXlxcZCsvLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5U3RyaW5nVG9pbnNlcnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5U3RyaW5nVG9pbnNlcnQucHVzaChOb3RlW1BpY2tNZXRob2RdKGxpc3RUaXRsZSwgdGhpcy5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nVG9JbnNlcnQgPSBhcnJheVN0cmluZ1RvaW5zZXJ0LmpvaW4oZGVsaW1pdGVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdUb0luc2VydCA9IE5vdGVbUGlja01ldGhvZF0obGlzdFRpdGxlLCB0aGlzLnNldHRpbmdzLm1heE1hY3JvRGVwdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihzdHJpbmdUb0luc2VydCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIGFjdGl2ZSBNYXJrZG93biBlZGl0b3IgZm91bmQuXCIpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG5cbmNsYXNzIExJUlBTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBMaXN0SXRlbVJhbmRvbVBpY2tlcjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IExpc3RJdGVtUmFuZG9tUGlja2VyKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdOb3RlIHNldHRpbmcnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05vdGUgUGF0aCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnVGhlIHBhdGggYW5kIGZpbGVuYW1lIG9mIHRoZSBub3RlIHRoYXQgY29udGFpbnMgdGhlIGxpc3RzIHRvIGJlIHVzZWQuIEV4ZW1wbGUgOiBcIkZvbGRlci9Ob3RlXCIuJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdGhlIHBhdGggdG8geW91ciBub3RlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVBhdGgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlUGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdJbnRlcmZhY2Ugc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgbm90ZSBzZWxlY3RvcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgcGF0aCBpcyBhIGZvbGRlcicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Tm90ZVNlbGVjdG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IHdhcm5pbmcnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Rpc3BsYXkgdGhlIHdhcm5pbmdzIG9mIG5vdGVzIGFuZCBsaXN0cywgaWYgYW55LiBXYXJuaW5ncyBmb3IgbWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBhcmUgYWx3YXlzIGRpc3BsYXllZC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdMaXN0IHNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOdWxsIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgZmlyc3QgbGluZSBvZiBhbiBpdGVtIGhhcyB0aGlzIHZhbHVlLCB0aGUgbGluZSBpcyBmbHVzaC4nKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB2YWx1ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdFc2NhcGUgdmFsdWUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHlvdSB3YW50IHNvbWUgaGVhZGluIG9uZSBvciBmaXJzdCBsZXZlbCBsaXN0IGl0ZW0gaW4geW91ciBpdGVtLCB5b3UgY291bGQgZXNjYXBlIHRoZW0gd2l0aCB0aGVzZSB2YWx1ZScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXNjYXBlVmFsdWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lc2NhcGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdTZWxlY3Rpb24gc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1NlbGVjdGlvbiB2YWx1ZSBmb3Igbm90aWZpY2F0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgdGV4dCBzZWxlY3RlZCBoYXMgdGhpcyB2YWx1ZSwgdGhlIGl0ZW0gaXMgbm90IGluc2VydGVkLCBidXQgbm90aWZpZWQgIScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlbGV0ZSBzZWxlY3Rpb24gdmFsdWUgZm9yIG5vdGlmaWNhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgc2V0LCB0aGUgc2VsZWN0ZWQgdmFsdWUgZm9yIG5vdGlmaWNhdGlvbiBpcyBkZWxldGVkLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1RlY2huaWNhbCBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdNYWNybyBkZXB0aCBsaW1pdCcpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ01hY3JvIHJlY3Vyc2lvbiBsaW1pdDogaG93IG1hbnkgbmVzdGVkIG1hY3JvIGNhbGxzIGFyZSBhbGxvd2VkLiBaZXJvIHByZXZlbnRzIG5lc3RlZCBtYWNyb3MgZnJvbSBiZWluZyByZXNvbHZlZC4nKVxuICAgICAgICAgICAgICAgIC5hZGRTbGlkZXIoKHNsaWRlcikgPT5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMCwgMTAsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQWxsb3cgY3Jvc3Mgbm90ZSByZWZlcmVuY2UnKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKCdibGEgYmxhIGJsYS4nKVxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsb3dDcm9zc05vdGVSZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbn0iXSwKICAi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dkIsYUFBSyxPQUFPLFNBQVMsY0FBYztBQUNuQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDbkMsQ0FBQztBQUFBLElBQ0w7QUFFSixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpELFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLGtDQUFrQyxFQUMxQyxRQUFRLCtFQUErRSxFQUN2RjtBQUFBLE1BQVEsVUFBUSxLQUNaLGVBQWUsYUFBYSxFQUM1QixTQUFTLEtBQUssT0FBTyxTQUFTLHdCQUF3QixFQUN0RCxTQUFTLE9BQU8sVUFBVTtBQUN2QixhQUFLLE9BQU8sU0FBUywyQkFBMkI7QUFDaEQsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNMO0FBRUosUUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEseUNBQXlDLEVBQ2pELFFBQVEseURBQXlELEVBQ2pFLFVBQVUsQ0FBQyxXQUFXO0FBQ25CLGFBQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyw4QkFBOEI7QUFDbkUsYUFBTyxTQUFTLE9BQU8sVUFBVTtBQUM3QixhQUFLLE9BQU8sU0FBUyxpQ0FBaUM7QUFDdEQsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNMLENBQUM7QUFFRCxnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpELFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLG1CQUFtQixFQUMzQixRQUFRLGtIQUFrSCxFQUMxSDtBQUFBLE1BQVUsQ0FBQyxXQUNSLE9BQ0ssU0FBUyxLQUFLLE9BQU8sU0FBUyxhQUFhLEVBQzNDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFDbEIsa0JBQWtCLEVBQ2xCLFNBQVMsT0FBTyxVQUFVO0FBQzNCLGFBQUssT0FBTyxTQUFTLGdCQUFnQjtBQUNyQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ1Q7QUFFSixRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFBUSw0QkFBNEIsRUFDcEMsUUFBUSxjQUFjLEVBQ3RCLFVBQVUsQ0FBQyxXQUFXO0FBQ25CLGFBQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyx1QkFBdUI7QUFDNUQsYUFBTyxTQUFTLE9BQU8sVUFBVTtBQUM3QixhQUFLLE9BQU8sU0FBUywwQkFBMEI7QUFDL0MsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNMLENBQUM7QUFBQSxFQUNUO0FBQ1I7IiwKICAibmFtZXMiOiBbIml0ZW0iLCAicmVwZWF0Il0KfQo=
