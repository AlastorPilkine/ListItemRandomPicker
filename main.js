/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
var DEFAULT_SETTINGS = {
  notePath: "Full path of a note",
  showWarning: true,
  maxMacroDepth: 1,
  noticePrefix: "!"
};
var LIRPList = class {
  constructor(lines) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    const stringItem = item.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getListSuggestion() {
    const suggestion = {
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor() {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No heading in note`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      this.list.push(new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1])));
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1])));
    return true;
  }
  getNoteSuggestion() {
    let noteSuggestion;
    noteSuggestion = [];
    this.list.forEach((element) => {
      if (element.notHidden()) {
        noteSuggestion.push(element.getListSuggestion());
      }
    });
    return noteSuggestion;
  }
  execMacroSubstitution(item, macroRecursion) {
    const stringMacroRefRegex = `{(${this.list.map((element) => element.title).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], -1);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, macroRecursion) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: "",
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < macroRecursion; repeat++) {
        returnOfExecMacro = this.execMacroSubstitution(randomItem, macroRecursion);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => element.title).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && macroRecursion !== -1) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    return randomItem;
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item.title);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob(this.settings.notePath + ".md");
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob(this.settings.notePath + ".md");
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob(fullNotePath) {
    const file = this.app.vault.getAbstractFileByPath(fullNotePath);
    if (!file) {
      new import_obsidian.Notice("Note not found!");
      return;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Invalid file type. Expected a Markdown note file.");
      return;
    }
    const content = await this.app.vault.cachedRead(file);
    const currentLIRP = new LIRPNote();
    const loadSuccess = currentLIRP.loadFromNote(this.settings.notePath, content);
    if (!loadSuccess) {
      currentLIRP.getError().forEach((element) => new import_obsidian.Notice(element));
      return;
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (title) => {
      this.workWithTitle(currentLIRP, title);
    }).open();
  }
  workWithTitle(Note, listTitle) {
    const stringNoticeRegex = `^ *${this.settings.noticePrefix}(.*)`;
    const noticeRegex = new RegExp(stringNoticeRegex);
    if (noticeRegex.test(listTitle)) {
      new import_obsidian.Notice(Note.pickRandomItemFromList(listTitle, this.settings.maxMacroDepth));
    } else {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        let stringToInsert = "";
        const editor = activeView.editor;
        const selection = editor.getSelection();
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note.pickRandomItemFromList(listTitle, this.settings.maxMacroDepth));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note.pickRandomItemFromList(listTitle, this.settings.maxMacroDepth);
        }
        editor.replaceSelection(stringToInsert);
      } else {
        new import_obsidian.Notice("No active Markdown editor found.");
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth - 1).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value + 1;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("List prefix for notification").setDesc("If a list heading begin with the specified value, the picked item is not inserted, but notified.").addText(
      (text) => text.setPlaceholder("Enter prefix value").setValue(this.plugin.settings.noticePrefix).onChange(async (value) => {
        this.plugin.settings.noticePrefix = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
