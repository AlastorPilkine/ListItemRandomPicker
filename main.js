/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Path of a note or a folder",
  showWarning: true,
  maxMacroDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true
};
var DiceRoller = class {
  checkDice(diceString) {
    const diceRegex = /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i;
    return diceRegex.test(diceString);
  }
  rollDice(diceString) {
    if (!this.checkDice(diceString)) {
      throw new Error("Syntaxe de lancer de d\xE9s invalide.");
    }
    const [_, countStr, sidesStr, modifierStr, explodeStr, keepStr, keepLowStr] = diceString.match(
      /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i
    );
    const count = parseInt(countStr || "1");
    const sides = parseInt(sidesStr);
    const modifier = parseInt(modifierStr || "0");
    const explode = !!explodeStr;
    const keep = keepStr ? parseInt(keepStr.slice(1)) : void 0;
    const keepLow = keepLowStr ? parseInt(keepLowStr.slice(2)) : void 0;
    let results = [];
    for (let i = 0; i < count; i++) {
      let result = Math.floor(Math.random() * sides) + 1;
      results.push(result);
      if (explode) {
        while (result === sides) {
          result = Math.floor(Math.random() * sides) + 1;
          results.push(result);
        }
      }
    }
    if (keep) {
      results.sort((a, b) => b - a);
      results = results.slice(0, keep);
    } else if (keepLow) {
      results.sort((a, b) => a - b);
      results = results.slice(0, keepLow);
    }
    const sum = results.reduce((acc, val) => acc + val, 0);
    return sum + modifier;
  }
  /**
   * Remplace les lancers de dés encadrés par des délimiteurs dans une chaîne multi-lignes.
   *
   * @param {string} text Le texte multi-lignes contenant les lancers de dés.
   * @param {string} startDelimiter Le délimiteur de début des lancers de dés.
   * @param {string} endDelimiter Le délimiteur de fin des lancers de dés.
   * @returns {string} Le texte avec les lancers de dés remplacés par leurs résultats.
   */
  replaceDiceRolls(text, startDelimiter, endDelimiter) {
    const regex = new RegExp(
      `${this.escapeRegExp(startDelimiter)}([^${this.escapeRegExp(
        startDelimiter + endDelimiter
      )}]+)${this.escapeRegExp(endDelimiter)}`,
      "g"
    );
    return text.replace(regex, (match, diceString) => {
      try {
        const result = this.rollDice(diceString);
        return result.toString();
      } catch (error) {
        return match;
      }
    });
  }
  /**
   * Échappe les caractères spéciaux pour une utilisation dans une expression régulière.
   *
   * @param {string} string La chaîne de caractères à échapper.
   * @returns {string} La chaîne de caractères échappée.
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
var LIRPList = class {
  constructor(lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.rollDice = true;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  getListTitles() {
    let listTitles = [];
    this.list.map((element) => {
      listTitles.push(element.title);
    });
    return listTitles;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No list defined in note "${noteName}"`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      const currentList = new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString);
      if (this.getListTitles().contains(currentList.title)) {
        this.warning.push(`A list named "${currentList.title}" already exists in notes "${noteName}, ignoring"`);
      } else {
        this.list.push(currentList);
      }
      ;
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString));
    return true;
  }
  getListSuggestion(withHidden = false) {
    let noteSuggestion;
    noteSuggestion = [];
    this.list.forEach((element) => {
      if (withHidden || element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  execReferenceSubstitution(item) {
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], false);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: listTitle,
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < this.referenceMaxDepth; repeat++) {
        returnOfExecMacro = this.execReferenceSubstitution(randomItem);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && workOnReference) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    if (workOnReference && this.rollDice) {
      const diceRoller = new DiceRoller();
      return diceRoller.replaceDiceRolls(randomItem, "{", "}");
    } else {
      return randomItem;
    }
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  // selectNote(noteName: string): boolean {
  //     if (noteName === '' && this.multiNote.length > 1) {
  //         this.noteSelected =this.multiNote[0];
  //         return true;
  //     } else {
  //         this.noteSelected = this.multiNote.find((element) => element.noteName === noteName);
  //         return (this.noteSelected !== undefined);
  //     }
  // };
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    const status = currentNote.loadFromNote(noteName, noteContent);
    this.multiNote.push(currentNote);
    return status;
  }
  getNoteByName(noteName) {
    return this.multiNote.find((element) => element.noteName === noteName);
  }
  getListSuggestion(withHidden = false, noteName = "") {
    if (noteName !== "") {
      const currentNote = this.getNoteByName(noteName);
      if (currentNote !== void 0) {
        return currentNote.getListSuggestion();
      } else {
        return [];
      }
    } else {
      let allListSuggestion = [];
      this.multiNote.map((element) => {
        allListSuggestion = allListSuggestion.concat(element.getListSuggestion());
      });
      return allListSuggestion;
    }
  }
  getNoteSuggestion() {
    let noteSuggestion = [];
    this.multiNote.map((element) => {
      if (element.getListSuggestion().length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  // pickRandomItemFromList(listTitle: string, workOnReference: boolean = true): string {
  //     if (this.noteSelected !== undefined) {
  //         return this.noteSelected.pickRandomItemFromList(listTitle);
  //     } else {
  //         return "";
  //     }
  // }; 
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    return superNote.pickRandomItemFromList(listTitle);
  }
  getError() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getError();
    } else {
      let allError = [];
      this.multiNote.map((element) => {
        allError = allError.concat(element.getError());
      });
      return allError;
    }
  }
  getWarning() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getWarning();
    } else {
      let allWarning = [];
      this.multiNote.map((element) => {
        allWarning = allWarning.concat(element.getWarning());
      });
      return allWarning;
    }
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob();
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob();
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue, this.settings.maxMacroDepth);
    let loadWithoutError = true;
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        loadWithoutError = currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content) && loadWithoutError;
      }
      ;
    }
    ;
    if (!loadWithoutError) {
      currentLIRP.getError().map((element) => {
        new import_obsidian.Notice(element);
      });
      if (currentLIRP.length === 0) {
        return;
      }
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    if (currentLIRP.length === 0) {
      new import_obsidian.Notice('Error : check settings "Path " in plugin List Item Random Picker !');
      return;
    } else if (currentLIRP.length === 1) {
      new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
        this.workWithTitle(currentLIRP, item.title);
      }).open();
    } else {
      if (this.settings.showNoteSelector) {
        new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (item) => {
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(false, item.noteName), (item2) => {
            this.workWithTitle(currentLIRP, item2.title);
          }).open();
        }).open();
      } else {
        new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
          this.workWithTitle(currentLIRP, item.title);
        }).open();
      }
      ;
    }
    ;
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getFiles();
    let filesInNotePath = [];
    const notePathRegex = new RegExp(`^${notePath}(/.+)?.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      }
      ;
    });
    return filesInNotePath;
  }
  workWithTitle(Note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const editor = activeView.editor;
      const selection = editor.getSelection();
      if (noticeRegex.test(selection)) {
        new import_obsidian.Notice(Note.pickRandomItemFromList(listTitle));
        if (this.settings.deleteSelectionForNotification) {
          editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note.pickRandomItemFromList(listTitle));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note.pickRandomItemFromList(listTitle);
        }
        editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
    ;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Note setting" });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Interface settings" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "List settings" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of an item has this value, the line is flush.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("If you want some headin one or first level list item in your item, you could escape them with these value").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Selection settings" });
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the text selected has this value, the item is not inserted, but notified !").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delete selection value for notification").setDesc("If set, the selected value for notification is deleted.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Technical settings" });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgQXBwLCBTdWdnZXN0TW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSwgVEZvbGRlciwgTWFya2Rvd25WaWV3fSBmcm9tICdvYnNpZGlhbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleGVzPFQ+KGFuQXJyYXk6IFRbXSwgcHJlZGljYXRlOiAoZWxlbWVudDogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICBjb25zdCBpbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFuQXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCwgaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cmluZ1RvRXNjYXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdUb0VzY2FwZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuaW50ZXJmYWNlIExJUlBQbHVnaW5TZXR0aW5ncyB7XG4gICAgbm90ZVBhdGg6IHN0cmluZztcbiAgICBzaG93V2FybmluZzogYm9vbGVhbjtcbiAgICBtYXhNYWNyb0RlcHRoOiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBib29sZWFuO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVZhbHVlOiBzdHJpbmc7XG4gICAgc2hvd05vdGVTZWxlY3RvcjogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTElSUFBsdWdpblNldHRpbmdzID0ge1xuICAgIG5vdGVQYXRoOiAnUGF0aCBvZiBhIG5vdGUgb3IgYSBmb2xkZXInLFxuICAgIHNob3dXYXJuaW5nOiB0cnVlLFxuICAgIG1heE1hY3JvRGVwdGg6IDEsXG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiAnIScsXG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICBudWxsVmFsdWU6ICdudWxsJyxcbiAgICBlc2NhcGVWYWx1ZTogJy8vJyxcbiAgICBzaG93Tm90ZVNlbGVjdG9yOiB0cnVlLFxufTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY2xhc3MgRGljZVJvbGxlciB7XG4gICAgY2hlY2tEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZGljZVJlZ2V4ID0gL14oXFxkKyk/ZChcXGQrKShbXFwrXFwtXVxcZCspPyhlKT8oa1xcZCspPyhrbFxcZCspPyQvaTtcbiAgICAgIHJldHVybiBkaWNlUmVnZXgudGVzdChkaWNlU3RyaW5nKTtcbiAgICB9XG4gIFxuICAgIHJvbGxEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tEaWNlKGRpY2VTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bnRheGUgZGUgbGFuY2VyIGRlIGRcdTAwRTlzIGludmFsaWRlLlwiKTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBbXywgY291bnRTdHIsIHNpZGVzU3RyLCBtb2RpZmllclN0ciwgZXhwbG9kZVN0ciwga2VlcFN0ciwga2VlcExvd1N0cl0gPVxuICAgICAgICBkaWNlU3RyaW5nLm1hdGNoKFxuICAgICAgICAgIC9eKFxcZCspP2QoXFxkKykoW1xcK1xcLV1cXGQrKT8oZSk/KGtcXGQrKT8oa2xcXGQrKT8kL2lcbiAgICAgICAgKSBhcyBSZWdFeHBNYXRjaEFycmF5O1xuICBcbiAgICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQoY291bnRTdHIgfHwgXCIxXCIpO1xuICAgICAgY29uc3Qgc2lkZXMgPSBwYXJzZUludChzaWRlc1N0cik7XG4gICAgICBjb25zdCBtb2RpZmllciA9IHBhcnNlSW50KG1vZGlmaWVyU3RyIHx8IFwiMFwiKTtcbiAgICAgIGNvbnN0IGV4cGxvZGUgPSAhIWV4cGxvZGVTdHI7XG4gICAgICBjb25zdCBrZWVwID0ga2VlcFN0ciA/IHBhcnNlSW50KGtlZXBTdHIuc2xpY2UoMSkpIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3Qga2VlcExvdyA9IGtlZXBMb3dTdHIgPyBwYXJzZUludChrZWVwTG93U3RyLnNsaWNlKDIpKSA6IHVuZGVmaW5lZDtcbiAgXG4gICAgICBsZXQgcmVzdWx0czogbnVtYmVyW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2lkZXMpICsgMTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gIFxuICAgICAgICBpZiAoZXhwbG9kZSkge1xuICAgICAgICAgIHdoaWxlIChyZXN1bHQgPT09IHNpZGVzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzaWRlcykgKyAxO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgaWYgKGtlZXApIHtcbiAgICAgICAgcmVzdWx0cy5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIGtlZXApO1xuICAgICAgfSBlbHNlIGlmIChrZWVwTG93KSB7XG4gICAgICAgIHJlc3VsdHMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBrZWVwTG93KTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBzdW0gPSByZXN1bHRzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCk7XG4gICAgICByZXR1cm4gc3VtICsgbW9kaWZpZXI7XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBSZW1wbGFjZSBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyBlbmNhZHJcdTAwRTlzIHBhciBkZXMgZFx1MDBFOWxpbWl0ZXVycyBkYW5zIHVuZSBjaGFcdTAwRUVuZSBtdWx0aS1saWduZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBMZSB0ZXh0ZSBtdWx0aS1saWduZXMgY29udGVuYW50IGxlcyBsYW5jZXJzIGRlIGRcdTAwRTlzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydERlbGltaXRlciBMZSBkXHUwMEU5bGltaXRldXIgZGUgZFx1MDBFOWJ1dCBkZXMgbGFuY2VycyBkZSBkXHUwMEU5cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5kRGVsaW1pdGVyIExlIGRcdTAwRTlsaW1pdGV1ciBkZSBmaW4gZGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGUgdGV4dGUgYXZlYyBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyByZW1wbGFjXHUwMEU5cyBwYXIgbGV1cnMgclx1MDBFOXN1bHRhdHMuXG4gICAgICovXG4gICAgcmVwbGFjZURpY2VSb2xscyhcbiAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgIHN0YXJ0RGVsaW1pdGVyOiBzdHJpbmcsXG4gICAgICBlbmREZWxpbWl0ZXI6IHN0cmluZ1xuICAgICk6IHN0cmluZyB7XG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgIGAke3RoaXMuZXNjYXBlUmVnRXhwKHN0YXJ0RGVsaW1pdGVyKX0oW14ke3RoaXMuZXNjYXBlUmVnRXhwKFxuICAgICAgICAgIHN0YXJ0RGVsaW1pdGVyICsgZW5kRGVsaW1pdGVyXG4gICAgICAgICl9XSspJHt0aGlzLmVzY2FwZVJlZ0V4cChlbmREZWxpbWl0ZXIpfWAsXG4gICAgICAgIFwiZ1wiXG4gICAgICApO1xuICBcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmVnZXgsIChtYXRjaCwgZGljZVN0cmluZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucm9sbERpY2UoZGljZVN0cmluZyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaDsgLy8gU2kgbGEgc3ludGF4ZSBlc3QgaW52YWxpZGUsIG9uIGdhcmRlIGxlIHRleHRlIGQnb3JpZ2luZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAqIFx1MDBDOWNoYXBwZSBsZXMgY2FyYWN0XHUwMEU4cmVzIHNwXHUwMEU5Y2lhdXggcG91ciB1bmUgdXRpbGlzYXRpb24gZGFucyB1bmUgZXhwcmVzc2lvbiByXHUwMEU5Z3VsaVx1MDBFOHJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBMYSBjaGFcdTAwRUVuZSBkZSBjYXJhY3RcdTAwRThyZXMgXHUwMEUwIFx1MDBFOWNoYXBwZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGEgY2hhXHUwMEVFbmUgZGUgY2FyYWN0XHUwMEU4cmVzIFx1MDBFOWNoYXBwXHUwMEU5ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGVzY2FwZVJlZ0V4cChzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gIH1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW50ZXJmYWNlIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaXRlbXM6IHN0cmluZ1tdO1xuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlO1xuICAgIG5vdEhpZGRlbigpOiBib29sZWFuO1xuICAgIHBpY2tSYW5kb21JdGVtKCk6IHN0cmluZztcbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdO1xufVxuXG5jbGFzcyBMSVJQTGlzdCBpbXBsZW1lbnRzIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcbiAgICBudWxsVmFsdWU6IHN0cmluZztcbiAgICBlc2NhcGVTdHJpbmc6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGxpbmVzOiBzdHJpbmdbXSwgbnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmcgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuXG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdFeCA9IC9eIyArKC4rKSQvO1xuICAgICAgICB0aGlzLnRpdGxlID0gbGluZXNbMF0ucmVwbGFjZShoZWFkaW5nUmVnRXgsIFwiJDFcIik7XG4gICAgICAgIGNvbnN0IGl0YWxpY0hlYWRpbmdSZWdleCA9IC9eKF98XFwqKVxcUy87XG4gICAgICAgIGlmIChpdGFsaWNIZWFkaW5nUmVnZXgudGVzdCh0aGlzLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5zaGlmdCgpO1xuICAgICAgICBjb25zdCBsaXN0QmVnaW5JdGVtUmVnZXggPSAvXigtfFxcZCtcXC4pICsoLispJC87XG4gICAgICAgIGNvbnN0IGxpc3RCZWdpbkluZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGxpc3RCZWdpbkl0ZW1SZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmcucHVzaChgTm8gaXRlbXMgaW4gbGlzdCAke3RoaXMudGl0bGV9YCk7XG4gICAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xlYW5MaW5lcyA9IGxpbmVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShsaXN0QmVnaW5JdGVtUmVnZXgsIFwiJDJcIilcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaXN0QmVnaW5JbmRleGVzWzBdICE9PSAwKSB7XG4gICAgICAgICAgICBsZXQgbWREZXNjcmlwdGlvbiA9IGNsZWFuTGluZXMuc2xpY2UoMCwgbGlzdEJlZ2luSW5kZXhlc1swXSk7XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAgICAgLy8gICBNRDAyMi9ibGFua3MtYXJvdW5kLWhlYWRpbmdzOiBIZWFkaW5ncyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgaWYgKG1kRGVzY3JpcHRpb25bMF0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBtZERlc2NyaXB0aW9uLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAzMlxuICAgICAgICAgICAgLy8gICBNRDAzMi9ibGFua3MtYXJvdW5kLWxpc3RzOiBMaXN0cyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgLy8gRHVlIHRvIHNwbGl0IG9uICdcXG4nLCB0aGUgc2xpY2UsIGFuZCBhdCBsZWFzdCBhIGpvaW4gb24gJ1xcbicgdGhlIGxhc3QgJ1xcbicgaXMgYWx3YXlzIGxvc3QgIVxuICAgICAgICAgICAgLy8gU28gdGhlIGZvbG93aW5nIGNvZGUgaXMgdXNlbGVzc1xuICAgICAgICAgICAgLy8gaWYgKG1kRGVzY3JpcHRpb24uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAvLyAgICAgbWREZXNjcmlwdGlvbi5wb3AoKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBtZERlc2NyaXB0aW9uLmpvaW4oJ1xcbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0QmVnaW5Db3VudCA9IGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoXG4gICAgICAgIGxldCBpdGVtOiBzdHJpbmdbXTtcbiAgICAgICAgZm9yIChsZXQgY3VycmVudEluZGV4ID0gMDsgY3VycmVudEluZGV4IDwgKGxpc3RCZWdpbkNvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBsaXN0QmVnaW5JbmRleGVzW2N1cnJlbnRJbmRleCArIDFdKSk7XG4gICAgICAgICAgICB0aGlzLnB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tsaXN0QmVnaW5Db3VudCAtIDFdKSk7XG4gICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgaWYgKGl0ZW0uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpdGVtLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaEl0ZW1CYXNlZE9uV2VpZ2h0KGl0ZW0pO1xuICAgIH1cblxuICAgIHB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtOiBzdHJpbmdbXSkgOiB2b2lkIHtcbiAgICAgICAgY29uc3QgSXRlbVdpdGhXZWlnaHRSZWdFeCA9IC9eXFwoKFxcZCspXFwpXFxzKyguKykkLztcbiAgICAgICAgbGV0IHJlZ0V4RXhlY3V0aW9uO1xuICAgICAgICBsZXQgcmVwZWF0OiBudW1iZXI7XG4gICAgICAgIGlmICgocmVnRXhFeGVjdXRpb24gPSBJdGVtV2l0aFdlaWdodFJlZ0V4LmV4ZWMoaXRlbVswXSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXBlYXQgPSBOdW1iZXIocmVnRXhFeGVjdXRpb25bMV0pO1xuICAgICAgICAgICAgaXRlbVswXSA9IHJlZ0V4RXhlY3V0aW9uWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwZWF0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbVswXSA9PT0gdGhpcy5udWxsVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZW1bMF0gPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNoaWZ0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0cmluZ1JlZ2V4ID0gYF4gKiR7dGhpcy5lc2NhcGVTdHJpbmd9KC4qKWA7XG4gICAgICAgIGNvbnN0IGVzY2FwZVN0cmluZ1JlZ0V4ID0gbmV3IFJlZ0V4cChzdHJpbmdSZWdleCwgJ2dtJyk7XG4gICAgICAgIGNvbnN0IGVzY2FwZUl0ZW0gPSBpdGVtLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShlc2NhcGVTdHJpbmdSZWdFeCwgJyQxJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdHJpbmdJdGVtID0gZXNjYXBlSXRlbS5qb2luKCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXBlYXQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHN0cmluZ0l0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbiA9IHtcbiAgICAgICAgICAgIG5vdGVOYW1lOiBub3RlTmFtZSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICh0aGlzLmRlc2NyaXB0aW9uLnNwbGl0KCdcXG4nKVswXSksXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb247XG4gICAgfTtcblxuICAgIG5vdEhpZGRlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhpZGRlbjtcbiAgICB9XG5cbiAgICBwaWNrUmFuZG9tSXRlbSgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmFuZG9tSXRlbTogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHRoaXMuaXRlbXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5pdGVtcy5sZW5ndGgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZG9tSXRlbTtcbiAgICB9XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2FybmluZztcbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIExJUlBFeGVjTWFjcm9JbnRlcmZhY2Uge1xuICAgIGxhc3RMaXN0VGl0bGU6IHN0cmluZztcbiAgICBtb2RpZmllZEl0ZW06IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIExJUlBOb3RlSW50ZXJmYWNlIHtcbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgZ2V0TGlzdFN1Z2dlc3Rpb24od2l0aEhpZGRlbjogYm9vbGVhbik6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgd29ya09uUmVmZXJlbmNlOiBib29sZWFuKTogc3RyaW5nOyBcbiAgICBnZXRFcnJvcigpOiBzdHJpbmdbXTtcbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuY2xhc3MgTElSUE5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGxpc3Q6IExJUlBMaXN0W107XG4gICAgZXJyb3I6IHN0cmluZ1tdO1xuICAgIHdhcm5pbmc6IHN0cmluZ1tdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIHJvbGxEaWNlOiBib29sZWFuO1xuICAgIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAobnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nLCByZWZlcmVuY2VNYXhEZXB0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5saXN0ID0gW107XG4gICAgICAgIHRoaXMuZXJyb3IgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgICAgIHRoaXMubnVsbFZhbHVlID0gbnVsbFZhbHVlO1xuICAgICAgICB0aGlzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZztcbiAgICAgICAgdGhpcy5yb2xsRGljZSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlTWF4RGVwdGggPSByZWZlcmVuY2VNYXhEZXB0aDtcbiAgICB9XG5cbiAgICBnZXRMaXN0VGl0bGVzKCkgOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBsaXN0VGl0bGVzOnN0cmluZ1tdID0gW107XG4gICAgICAgIHRoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGxpc3RUaXRsZXMucHVzaChlbGVtZW50LnRpdGxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaXN0VGl0bGVzO1xuICAgIH07XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZywgKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBub3RlTmFtZTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBub3RlQ29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdleCA9IC9eIyAuKyQvO1xuICAgICAgICBsZXQgaGVhZGluZ0luZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGhlYWRpbmdSZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGhlYWRpbmdJbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5wdXNoKGBObyBsaXN0IGRlZmluZWQgaW4gbm90ZSBcIiR7bm90ZU5hbWV9XCJgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGluZ0luZGV4ZXNbMF0gIT09IDApIHtcbiAgICAgICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgICAgICAvLyAgIE1EMDIyL2JsYW5rcy1hcm91bmQtaGVhZGluZ3M6IEhlYWRpbmdzIHNob3VsZCBiZSBzdXJyb3VuZGVkIGJ5IGJsYW5rIGxpbmVzXG4gICAgICAgICAgICAvLyBEdWUgdG8gc3BsaXQgb24gJ1xcbicsIHRoZSBzbGljZSwgYW5kIGF0IGxlYXN0IGEgam9pbiBvbiAnXFxuJyB0aGUgbGFzdCAnXFxuJyBpcyBhbHdheXMgbG9zdCAhXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gbGluZXMuc2xpY2UoMCwgaGVhZGluZ0luZGV4ZXNbMF0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRpbmdDb3VudCA9IGhlYWRpbmdJbmRleGVzLmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAwOyBjdXJyZW50SW5kZXggPCAoaGVhZGluZ0NvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXggKyAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZyk7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRMaXN0VGl0bGVzKCkuY29udGFpbnMoY3VycmVudExpc3QudGl0bGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXJuaW5nLnB1c2goYEEgbGlzdCBuYW1lZCBcIiR7Y3VycmVudExpc3QudGl0bGV9XCIgYWxyZWFkeSBleGlzdHMgaW4gbm90ZXMgXCIke25vdGVOYW1lfSwgaWdub3JpbmdcImApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChjdXJyZW50TGlzdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdC5wdXNoKG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1toZWFkaW5nQ291bnQgLSAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZykpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBsZXQgbm90ZVN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgICAgIG5vdGVTdWdnZXN0aW9uID0gW107XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAod2l0aEhpZGRlbiB8fCBlbGVtZW50Lm5vdEhpZGRlbigpKSB7XG4gICAgICAgICAgICAgICAgbm90ZVN1Z2dlc3Rpb24ucHVzaChlbGVtZW50LmdldFN1Z2dlc3Rpb24odGhpcy5ub3RlTmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5vdGVTdWdnZXN0aW9uO1xuICAgIH1cblxuICAgIGV4ZWNSZWZlcmVuY2VTdWJzdGl0dXRpb24oaXRlbTogc3RyaW5nKTogTElSUEV4ZWNNYWNyb0ludGVyZmFjZSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ01hY3JvUmVmUmVnZXg6IHN0cmluZyA9IGBcXHsoJHt0aGlzLmxpc3QubWFwKChlbGVtZW50KSA9PiBlc2NhcGVSZWdleChlbGVtZW50LnRpdGxlKSkuam9pbignfCcpfSlcXH1gO1xuICAgICAgICBjb25zdCBtYWNyb1JlZlJlZ2V4ID0gbmV3IFJlZ0V4cCAoc3RyaW5nTWFjcm9SZWZSZWdleCwnbWcnKTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBsZXQgbW9kaWZpZWRJdGVtOnN0cmluZyA9IGl0ZW07XG4gICAgICAgIGxldCBsaXN0VGl0bGU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IG1hY3JvUmVmUmVnZXguZXhlYyhtb2RpZmllZEl0ZW0pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlOiBzdHJpbmcgPSB0aGlzLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobWF0Y2hbMV0sIGZhbHNlKTsgXG4gICAgICAgICAgICBsaXN0VGl0bGUgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIG1vZGlmaWVkSXRlbSA9IG1vZGlmaWVkSXRlbS5yZXBsYWNlKGxpc3RUaXRsZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgbWFjcm9SZWZSZWdleC5sYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG5ld1ZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFzdExpc3RUaXRsZTogbGlzdFRpdGxlLFxuICAgICAgICAgICAgbW9kaWZpZWRJdGVtOiBtb2RpZmllZEl0ZW0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgd29ya09uUmVmZXJlbmNlOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCByYW5kb21JdGVtOiBzdHJpbmcgPSBcIlwiO1xuICAgICAgICBsZXQgcmV0dXJuT2ZFeGVjTWFjcm86IExJUlBFeGVjTWFjcm9JbnRlcmZhY2UgPSB7XG4gICAgICAgICAgICBsYXN0TGlzdFRpdGxlOiBsaXN0VGl0bGUsXG4gICAgICAgICAgICBtb2RpZmllZEl0ZW06IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ID0gdGhpcy5saXN0LmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQudGl0bGUgPT09IGxpc3RUaXRsZSk7XG4gICAgICAgIGlmIChjdXJyZW50TGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByYW5kb21JdGVtID0gY3VycmVudExpc3QucGlja1JhbmRvbUl0ZW0oKTtcbiAgICAgICAgICAgIGZvciAobGV0IHJlcGVhdCA9IDA7IHJlcGVhdCA8IHRoaXMucmVmZXJlbmNlTWF4RGVwdGg7IHJlcGVhdCsrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuT2ZFeGVjTWFjcm8gPSB0aGlzLmV4ZWNSZWZlcmVuY2VTdWJzdGl0dXRpb24ocmFuZG9tSXRlbSk7XG4gICAgICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHJldHVybk9mRXhlY01hY3JvLm1vZGlmaWVkSXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdNYWNyb1JlZlJlZ2V4OiBzdHJpbmcgPSBgXFx7KCR7dGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4gZXNjYXBlUmVnZXgoZWxlbWVudC50aXRsZSkpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgpO1xuICAgICAgICBpZiAobWFjcm9SZWZSZWdleC50ZXN0KHJhbmRvbUl0ZW0pICYmIHdvcmtPblJlZmVyZW5jZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgTWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBpbiBub3RlIFwiJHt0aGlzLm5vdGVOYW1lfVwiIGFmdGVyIGNhbGxpbmcgXCIke3JldHVybk9mRXhlY01hY3JvLmxhc3RMaXN0VGl0bGV9XCJgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdvcmtPblJlZmVyZW5jZSAmJiB0aGlzLnJvbGxEaWNlKSB7XG4gICAgICAgICAgICBjb25zdCBkaWNlUm9sbGVyID0gbmV3IERpY2VSb2xsZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBkaWNlUm9sbGVyLnJlcGxhY2VEaWNlUm9sbHMocmFuZG9tSXRlbSwneycsJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21JdGVtO1xuICAgICAgICB9XG4gICAgfSBcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfTtcblxuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsV2FybmluZzogc3RyaW5nW107XG4gICAgICAgIGFsbFdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KHRoaXMud2FybmluZyk7XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhbGxXYXJuaW5nID0gYWxsV2FybmluZy5jb25jYXQoZWxlbWVudC5nZXRXYXJuaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IE5vdGVXYXJuaW5nOiBzdHJpbmdbXTtcbiAgICAgICAgTm90ZVdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZy5mb3JFYWNoKChlbGVtZW50KSA9PiBcbiAgICAgICAgICAgIE5vdGVXYXJuaW5nLnB1c2goYFdhcm5pbmcgaW4gbm90ZSBcIiR7dGhpcy5ub3RlTmFtZX1cIiA6ICR7ZWxlbWVudH1gKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gTm90ZVdhcm5pbmc7XG4gICAgfTtcblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGg7XG4gICAgfTtcbn1cblxuY2xhc3MgTElSUE11bHRpTm90ZSBpbXBsZW1lbnRzIExJUlBOb3RlSW50ZXJmYWNlIHtcbiAgICBtdWx0aU5vdGU6IExJUlBOb3RlW107XG4gICAgbnVsbFZhbHVlOiBzdHJpbmc7XG4gICAgZXNjYXBlU3RyaW5nOiBzdHJpbmc7XG4gICAgbm90ZVNlbGVjdGVkOiBMSVJQTm90ZXx1bmRlZmluZWQ7XG4gICAgcmVmZXJlbmNlTWF4RGVwdGg6IG51bWJlcjtcblxuXG4gICAgY29uc3RydWN0b3IgKG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZywgcmVmZXJlbmNlTWF4RGVwdGg6IG51bWJlcikge1xuICAgICAgICB0aGlzLm11bHRpTm90ZSA9IFtdO1xuICAgICAgICB0aGlzLm51bGxWYWx1ZSA9IG51bGxWYWx1ZTtcbiAgICAgICAgdGhpcy5lc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmc7XG4gICAgICAgIC8vIHRoaXMubm90ZVNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZU1heERlcHRoID0gcmVmZXJlbmNlTWF4RGVwdGg7XG4gICAgfTtcblxuICAgIC8vIHNlbGVjdE5vdGUobm90ZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vICAgICBpZiAobm90ZU5hbWUgPT09ICcnICYmIHRoaXMubXVsdGlOb3RlLmxlbmd0aCA+IDEpIHtcbiAgICAvLyAgICAgICAgIHRoaXMubm90ZVNlbGVjdGVkID10aGlzLm11bHRpTm90ZVswXTtcbiAgICAvLyAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgdGhpcy5ub3RlU2VsZWN0ZWQgPSB0aGlzLm11bHRpTm90ZS5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50Lm5vdGVOYW1lID09PSBub3RlTmFtZSk7XG4gICAgLy8gICAgICAgICByZXR1cm4gKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfTtcblxuICAgIGxvYWRGcm9tTm90ZShub3RlTmFtZTogc3RyaW5nLCBub3RlQ29udGVudDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROb3RlID0gbmV3IExJUlBOb3RlKHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZywgdGhpcy5yZWZlcmVuY2VNYXhEZXB0aCk7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IGN1cnJlbnROb3RlLmxvYWRGcm9tTm90ZShub3RlTmFtZSwgbm90ZUNvbnRlbnQpO1xuICAgICAgICB0aGlzLm11bHRpTm90ZS5wdXNoKGN1cnJlbnROb3RlKTtcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9O1xuXG4gICAgZ2V0Tm90ZUJ5TmFtZSAobm90ZU5hbWU6IHN0cmluZyk6IExJUlBOb3RlfHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpTm90ZS5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50Lm5vdGVOYW1lID09PSBub3RlTmFtZSk7XG4gICAgfTtcblxuICAgIGdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSwgbm90ZU5hbWU6IHN0cmluZyA9ICcnKTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSB7XG4gICAgICAgIGlmIChub3RlTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb3RlID0gdGhpcy5nZXROb3RlQnlOYW1lKG5vdGVOYW1lKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Tm90ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnROb3RlLmdldExpc3RTdWdnZXN0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhbGxMaXN0U3VnZ2VzdGlvbjogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWxsTGlzdFN1Z2dlc3Rpb24gPSBhbGxMaXN0U3VnZ2VzdGlvbi5jb25jYXQoZWxlbWVudC5nZXRMaXN0U3VnZ2VzdGlvbigpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsTGlzdFN1Z2dlc3Rpb247XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0Tm90ZVN1Z2dlc3Rpb24oKTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSB7XG4gICAgICAgIGxldCBub3RlU3VnZ2VzdGlvbjogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSA9IFtdO1xuICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmdldExpc3RTdWdnZXN0aW9uKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5vdGVTdWdnZXN0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBub3RlTmFtZTogZWxlbWVudC5ub3RlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVsZW1lbnQubm90ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAoZWxlbWVudC5kZXNjcmlwdGlvbi5zcGxpdCgnXFxuJylbMF0pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3RlU3VnZ2VzdGlvbjtcbiAgICB9O1xuICAgIFxuICAgIC8vIHBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlOiBzdHJpbmcsIHdvcmtPblJlZmVyZW5jZTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICAgIC8vICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlKTtcbiAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBcIlwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gfTsgXG5cbiAgICBwaWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZTogc3RyaW5nLCB3b3JrT25SZWZlcmVuY2U6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHN1cGVyTm90ZSA9IG5ldyBMSVJQTm90ZSh0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcsIHRoaXMucmVmZXJlbmNlTWF4RGVwdGgpO1xuICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHN1cGVyTm90ZS5saXN0ID0gc3VwZXJOb3RlLmxpc3QuY29uY2F0KGVsZW1lbnQubGlzdCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3VwZXJOb3RlLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlKTtcbiAgICB9O1xuXG4gICAgZ2V0RXJyb3IoKTogc3RyaW5nW10ge1xuICAgICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLmdldEVycm9yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsRXJyb3I6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbEVycm9yID0gYWxsRXJyb3IuY29uY2F0KGVsZW1lbnQuZ2V0RXJyb3IoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhbGxFcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGVTZWxlY3RlZC5nZXRXYXJuaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsV2FybmluZzpzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KGVsZW1lbnQuZ2V0V2FybmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFsbFdhcm5pbmc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aU5vdGUubGVuZ3RoO1xuICAgIH07XG5cbn07XG5cbmludGVyZmFjZSBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBMSVJQU3VnZ2VzdE1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlPiB7XG4gICAgaXRlbXM6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgY2FsbGJhY2s6ICh2YWx1ZTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpID0+IHZvaWQ7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpdGVtczogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSwgY2FsbGJhY2s6ICh2YWx1ZTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpID0+IHZvaWQpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZ2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBcbiAgICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogaXRlbS50aXRsZSB9KTtcbiAgICAgICAgZWwuY3JlYXRlRWwoJ3NtYWxsJywge3RleHQ6IGl0ZW0uZGVzY3JpcHRpb259KTtcbiAgICAgIH1cbiAgXG4gICAgICBvbkNob29zZVN1Z2dlc3Rpb24oaXRlbTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhpdGVtKTtcbiAgICAgIH19XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RJdGVtUmFuZG9tUGlja2VyIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogTElSUFBsdWdpblNldHRpbmdzO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignbGlzdC10cmVlJywgJ1BpY2sgcmFuZG9tIGxpc3QgaXRlbScsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZG9UaGVKb2IoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LXJhbmRvbS1pdGVtJyxcbiAgICAgICAgICAgIG5hbWU6ICdJbnNlcnQgcmFuZG9tIGl0ZW0gZnJvbSBsaXN0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb1RoZUpvYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IExJUlBTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG5cbiAgICB9XG5cbiAgICBhc3luYyBkb1RoZUpvYigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgYWxsTElSUEZpbGVzID0gdGhpcy5nZXRMSVJQRmlsZXModGhpcy5zZXR0aW5ncy5ub3RlUGF0aCk7XG4gICAgICAgIGxldCBjdXJyZW50TElSUCA9IG5ldyBMSVJQTXVsdGlOb3RlKHRoaXMuc2V0dGluZ3MubnVsbFZhbHVlLCB0aGlzLnNldHRpbmdzLmVzY2FwZVZhbHVlLCB0aGlzLnNldHRpbmdzLm1heE1hY3JvRGVwdGgpO1xuICAgICAgICBsZXQgbG9hZFdpdGhvdXRFcnJvcjpib29sZWFuID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGN1cnJlbnRGaWxlIG9mIGFsbExJUlBGaWxlcykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEZTT2JqZWN0ID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGN1cnJlbnRGaWxlKTtcbiAgICAgICAgICAgIGxldCBjb250ZW50OnN0cmluZyA9ICcnO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRGU09iamVjdCBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQoY3VycmVudEZTT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBsb2FkV2l0aG91dEVycm9yID0gIGN1cnJlbnRMSVJQLmxvYWRGcm9tTm90ZShjdXJyZW50RlNPYmplY3QucGF0aC5zbGljZSgwLCAtMyksIGNvbnRlbnQpICYmIGxvYWRXaXRob3V0RXJyb3I7XG4gICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH07XG4gICAgICAgIGlmICghbG9hZFdpdGhvdXRFcnJvcikge1xuICAgICAgICAgICAgY3VycmVudExJUlAuZ2V0RXJyb3IoKS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudExJUlAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dXYXJuaW5nKSB7XG4gICAgICAgICAgICBjdXJyZW50TElSUC5nZXRXYXJuaW5nKCkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChjdXJyZW50TElSUC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0Vycm9yIDogY2hlY2sgc2V0dGluZ3MgXCJQYXRoIFwiIGluIHBsdWdpbiBMaXN0IEl0ZW0gUmFuZG9tIFBpY2tlciAhJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudExJUlAubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBjdXJyZW50TElSUC5zZWxlY3ROb3RlKCcnKTtcbiAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXRMaXN0U3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud29ya1dpdGhUaXRsZShjdXJyZW50TElSUCwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93Tm90ZVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgbmV3IExJUlBTdWdnZXN0TW9kYWwodGhpcy5hcHAsIGN1cnJlbnRMSVJQLmdldE5vdGVTdWdnZXN0aW9uKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRMSVJQLnNlbGVjdE5vdGUoaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXRMaXN0U3VnZ2VzdGlvbihmYWxzZSwgaXRlbS5ub3RlTmFtZSksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudExJUlAuc2VsZWN0Tm90ZShpdGVtLm5vdGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JrV2l0aFRpdGxlKGN1cnJlbnRMSVJQLCBpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldExJUlBGaWxlcyAobm90ZVBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGFsbFZhdWx0RmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpO1xuICAgICAgICBsZXQgZmlsZXNJbk5vdGVQYXRoOnN0cmluZ1tdID0gW107XG4gICAgICAgIGNvbnN0IG5vdGVQYXRoUmVnZXggPSBuZXcgUmVnRXhwKGBeJHtub3RlUGF0aH0oLy4rKT9cXC5tZCRgKTtcbiAgICAgICAgYWxsVmF1bHRGaWxlcy5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChub3RlUGF0aFJlZ2V4LnRlc3QoZWxlbWVudC5wYXRoKSkge1xuICAgICAgICAgICAgICAgIGZpbGVzSW5Ob3RlUGF0aC5wdXNoKGVsZW1lbnQucGF0aCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbGVzSW5Ob3RlUGF0aDtcbiAgICB9O1xuXG4gICAgd29ya1dpdGhUaXRsZShOb3RlOiBMSVJQTXVsdGlOb3RlLCBsaXN0VGl0bGU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblxuICAgICAgICBpZiAoYWN0aXZlVmlldykge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uUmVnZXg6c3RyaW5nID0gYF4ke3RoaXMuc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9ufSRgO1xuICAgICAgICAgICAgY29uc3Qgbm90aWNlUmVnZXggPSBuZXcgUmVnRXhwKHNlbGVjdGlvbkZvck5vdGlmaWNhdGlvblJlZ2V4KTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAobm90aWNlUmVnZXgudGVzdChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShOb3RlLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlKSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBzdHJpbmdUb0luc2VydDogc3RyaW5nID0gJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0SW5zZXJ0UmVnRXggPSAvXihcXGQrKSguKikvZ207XG4gICAgICAgICAgICAgICAgbGV0IHJlZ0V4RXhlY3V0aW9uO1xuICAgICAgICAgICAgICAgIGxldCByZXBlYXQ6IG51bWJlcjtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZ0V4RXhlY3V0aW9uID0gcmVwZWF0SW5zZXJ0UmVnRXguZXhlYyhzZWxlY3Rpb24pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBlYXQgPSBOdW1iZXIocmVnRXhFeGVjdXRpb25bMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWxpbWl0ZXIgPSBzZWxlY3Rpb24ucmVwbGFjZSgvXlxcZCsvLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5U3RyaW5nVG9pbnNlcnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5U3RyaW5nVG9pbnNlcnQucHVzaChOb3RlLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nVG9JbnNlcnQgPSBhcnJheVN0cmluZ1RvaW5zZXJ0LmpvaW4oZGVsaW1pdGVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdUb0luc2VydCA9IE5vdGUucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihzdHJpbmdUb0luc2VydCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIGFjdGl2ZSBNYXJrZG93biBlZGl0b3IgZm91bmQuXCIpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG5cbmNsYXNzIExJUlBTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBMaXN0SXRlbVJhbmRvbVBpY2tlcjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IExpc3RJdGVtUmFuZG9tUGlja2VyKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdOb3RlIHNldHRpbmcnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05vdGUgUGF0aCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnVGhlIHBhdGggYW5kIGZpbGVuYW1lIG9mIHRoZSBub3RlIHRoYXQgY29udGFpbnMgdGhlIGxpc3RzIHRvIGJlIHVzZWQuIEV4ZW1wbGUgOiBcIkZvbGRlci9Ob3RlXCIuJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdGhlIHBhdGggdG8geW91ciBub3RlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVBhdGgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlUGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdJbnRlcmZhY2Ugc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgbm90ZSBzZWxlY3RvcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgcGF0aCBpcyBhIGZvbGRlcicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Tm90ZVNlbGVjdG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IHdhcm5pbmcnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Rpc3BsYXkgdGhlIHdhcm5pbmdzIG9mIG5vdGVzIGFuZCBsaXN0cywgaWYgYW55LiBXYXJuaW5ncyBmb3IgbWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBhcmUgYWx3YXlzIGRpc3BsYXllZC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdMaXN0IHNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOdWxsIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgZmlyc3QgbGluZSBvZiBhbiBpdGVtIGhhcyB0aGlzIHZhbHVlLCB0aGUgbGluZSBpcyBmbHVzaC4nKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB2YWx1ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdFc2NhcGUgdmFsdWUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHlvdSB3YW50IHNvbWUgaGVhZGluIG9uZSBvciBmaXJzdCBsZXZlbCBsaXN0IGl0ZW0gaW4geW91ciBpdGVtLCB5b3UgY291bGQgZXNjYXBlIHRoZW0gd2l0aCB0aGVzZSB2YWx1ZScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXNjYXBlVmFsdWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lc2NhcGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdTZWxlY3Rpb24gc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1NlbGVjdGlvbiB2YWx1ZSBmb3Igbm90aWZpY2F0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgdGV4dCBzZWxlY3RlZCBoYXMgdGhpcyB2YWx1ZSwgdGhlIGl0ZW0gaXMgbm90IGluc2VydGVkLCBidXQgbm90aWZpZWQgIScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlbGV0ZSBzZWxlY3Rpb24gdmFsdWUgZm9yIG5vdGlmaWNhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgc2V0LCB0aGUgc2VsZWN0ZWQgdmFsdWUgZm9yIG5vdGlmaWNhdGlvbiBpcyBkZWxldGVkLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1RlY2huaWNhbCBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdNYWNybyBkZXB0aCBsaW1pdCcpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ01hY3JvIHJlY3Vyc2lvbiBsaW1pdDogaG93IG1hbnkgbmVzdGVkIG1hY3JvIGNhbGxzIGFyZSBhbGxvd2VkLiBaZXJvIHByZXZlbnRzIG5lc3RlZCBtYWNyb3MgZnJvbSBiZWluZyByZXNvbHZlZC4nKVxuICAgICAgICAgICAgICAgIC5hZGRTbGlkZXIoKHNsaWRlcikgPT5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMCwgMTAsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxzQkFBMEc7QUFFMUcsU0FBUyxZQUFlLFNBQWMsV0FBNkQ7QUFDL0YsUUFBTSxVQUFvQixDQUFDO0FBQzNCLFVBQVEsUUFBUSxDQUFDLFNBQVMsVUFBVTtBQUNsQyxRQUFJLFVBQVUsU0FBUyxLQUFLLEdBQUc7QUFDN0IsY0FBUSxLQUFLLEtBQUs7QUFBQSxJQUNwQjtBQUFBLEVBQ0YsQ0FBQztBQUNELFNBQU87QUFDWDtBQUVBLFNBQVMsWUFBWSxnQkFBZ0M7QUFDakQsU0FBTyxlQUFlLFFBQVEsdUJBQXVCLE1BQU07QUFDL0Q7QUFZQSxJQUFNLG1CQUF1QztBQUFBLEVBQ3pDLFVBQVU7QUFBQSxFQUNWLGFBQWE7QUFBQSxFQUNiLGVBQWU7QUFBQSxFQUNmLDBCQUEwQjtBQUFBLEVBQzFCLGdDQUFnQztBQUFBLEVBQ2hDLFdBQVc7QUFBQSxFQUNYLGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUN0QjtBQUdBLElBQU0sYUFBTixNQUFpQjtBQUFBLEVBQ2IsVUFBVSxZQUE2QjtB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S0FBSyxPQUFPLFNBQVMsU0FBUyxFQUN2QyxTQUFTLE9BQU8sVUFBVTtBQUN2QixhQUFLLE9BQU8sU0FBUyxZQUFZO0FBQ2pDLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTDtBQUVKLFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLGNBQWMsRUFDdEIsUUFBUSwyR0FBMkcsRUFDbkg7QUFBQSxNQUFRLFVBQVEsS0FDWixlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyxXQUFXLEVBQ3pDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLGFBQUssT0FBTyxTQUFTLGNBQWM7QUFDbkMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNMO0FBRUosZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RCxRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFBUSxrQ0FBa0MsRUFDMUMsUUFBUSwrRUFBK0UsRUFDdkY7QUFBQSxNQUFRLFVBQVEsS0FDWixlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyx3QkFBd0IsRUFDdEQsU0FBUyxPQUFPLFVBQVU7QUFDdkIsYUFBSyxPQUFPLFNBQVMsMkJBQTJCO0FBQ2hELGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTDtBQUVKLFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLHlDQUF5QyxFQUNqRCxRQUFRLHlEQUF5RCxFQUNqRSxVQUFVLENBQUMsV0FBVztBQUNuQixhQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsOEJBQThCO0FBQ25FLGFBQU8sU0FBUyxPQUFPLFVBQVU7QUFDN0IsYUFBSyxPQUFPLFNBQVMsaUNBQWlDO0FBQ3RELGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTCxDQUFDO0FBRUQsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RCxRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSxrSEFBa0gsRUFDMUg7QUFBQSxNQUFVLENBQUMsV0FDUixPQUNLLFNBQVMsS0FBSyxPQUFPLFNBQVMsYUFBYSxFQUMzQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQ2xCLGtCQUFrQixFQUNsQixTQUFTLE9BQU8sVUFBVTtBQUMzQixhQUFLLE9BQU8sU0FBUyxnQkFBZ0I7QUFDckMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQy9CLENBQUM7QUFBQSxJQUNUO0FBQUEsRUFDUjtBQUNSOyIsCiAgIm5hbWVzIjogWyJpdGVtIiwgInJlcGVhdCJdCn0K
