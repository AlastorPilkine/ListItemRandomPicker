/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  notePath: "Example Note"
};
var ItemPickerModal = class extends import_obsidian.Modal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.style.display = "flex";
    contentEl.style.flexDirection = "column";
    contentEl.style.height = "100%";
    const selectContainer = contentEl.createDiv();
    selectContainer.style.flexGrow = "1";
    selectContainer.style.display = "flex";
    selectContainer.style.flexDirection = "column";
    selectContainer.style.justifyContent = "center";
    selectContainer.style.alignItems = "center";
    const itemSelect = selectContainer.createEl("select");
    this.items.forEach((item) => {
      itemSelect.createEl("option", { value: item, text: item });
    });
    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "center";
    buttonContainer.style.padding = "10px 0";
    const okButton = buttonContainer.createEl("button", { text: "OK" });
    okButton.addEventListener("click", () => {
      const selectedItem = itemSelect.value;
      this.close();
      this.callback(selectedItem);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick Random Entry", (evt) => {
      this.openTitlePicker(this.settings.notePath);
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openTitlePicker(notePath) {
    const fullnotePath = notePath + ".md";
    const file = this.app.vault.getAbstractFileByPath(fullnotePath);
    if (!file) {
      new import_obsidian.Notice("Note not found!");
      return;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Invalid file type. Expected a TFile.");
      return;
    }
    const content = await this.app.vault.read(file);
    const titles = this.getTitlesFromNote(content);
    if (titles.length === 0) {
      new import_obsidian.Notice("No titles found in the note!");
      return;
    }
    new ItemPickerModal(this.app, titles, (title) => {
      this.insertRandomEntry(fullnotePath, title);
    }).open();
  }
  getTitlesFromNote(content) {
    const titleRegex = /^#+\s+(.+)$/gm;
    const titles = [];
    let match;
    while ((match = titleRegex.exec(content)) !== null) {
      titles.push(match[1]);
    }
    return titles;
  }
  async insertRandomEntry(notePath, title) {
    const file = this.app.vault.getAbstractFileByPath(notePath);
    if (!file) {
      new import_obsidian.Notice("Note not found!");
      return;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Invalid file type. Expected a TFile.");
      return;
    }
    const content = await this.app.vault.read(file);
    const entries = this.getEntriesFromNote(content, title);
    if (entries.length === 0) {
      new import_obsidian.Notice("No entries found for this title!");
      return;
    }
    const randomEntry = entries[Math.floor(Math.random() * entries.length)].replace(/\n/g, "");
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const position = editor.getCursor();
      editor.replaceRange(randomEntry, position, position);
      const newPosition = { line: position.line, ch: position.ch + randomEntry.length };
      editor.setCursor(newPosition);
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
  }
  getEntriesFromNote(content, title) {
    const titleRegex = new RegExp(`^#+\\s+${title}$`, "m");
    const titleMatch = titleRegex.exec(content);
    if (!titleMatch) {
      return [];
    }
    const startIndex = titleMatch.index + titleMatch[0].length;
    let endIndex = content.indexOf("\n#", startIndex);
    if (endIndex === -1) {
      endIndex = content.length;
    }
    const listItemRegex = /^(-|\d+\.) +(.+)$/gm;
    const entries = [];
    let currentEntry;
    let currentEntrySplit;
    let repeat;
    let itemString;
    const listContent = content.substring(startIndex, endIndex);
    while ((currentEntry = listItemRegex.exec(listContent)) !== null) {
      let fullString = currentEntry[2];
      const ItemWithNumberRegEx = /^\((\d+)\)\s+(.+)$/m;
      if ((currentEntrySplit = ItemWithNumberRegEx.exec(fullString)) !== null) {
        repeat = Number(currentEntrySplit[1]);
        itemString = currentEntrySplit[2];
      } else {
        repeat = 1;
        itemString = fullString;
      }
      for (let i = 0; i < repeat; i++) {
        entries.push(itemString);
      }
    }
    return entries;
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for List Item Random Picker." });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc("Path to the note containing the entries.").addText((text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
      this.plugin.settings.notePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
