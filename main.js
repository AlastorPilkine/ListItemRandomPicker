/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Path of a note or a folder",
  showWarning: true,
  maxMacroDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true
};
var DiceRoller = class {
  checkDice(diceString) {
    const diceRegex = /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i;
    return diceRegex.test(diceString);
  }
  rollDice(diceString) {
    if (!this.checkDice(diceString)) {
      throw new Error("Syntaxe de lancer de d\xE9s invalide.");
    }
    const [_, countStr, sidesStr, modifierStr, explodeStr, keepStr, keepLowStr] = diceString.match(
      /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i
    );
    const count = parseInt(countStr || "1");
    const sides = parseInt(sidesStr);
    const modifier = parseInt(modifierStr || "0");
    const explode = !!explodeStr;
    const keep = keepStr ? parseInt(keepStr.slice(1)) : void 0;
    const keepLow = keepLowStr ? parseInt(keepLowStr.slice(2)) : void 0;
    let results = [];
    for (let i = 0; i < count; i++) {
      let result = Math.floor(Math.random() * sides) + 1;
      results.push(result);
      if (explode) {
        while (result === sides) {
          result = Math.floor(Math.random() * sides) + 1;
          results.push(result);
        }
      }
    }
    if (keep) {
      results.sort((a, b) => b - a);
      results = results.slice(0, keep);
    } else if (keepLow) {
      results.sort((a, b) => a - b);
      results = results.slice(0, keepLow);
    }
    const sum = results.reduce((acc, val) => acc + val, 0);
    return sum + modifier;
  }
  /**
   * Remplace les lancers de dés encadrés par des délimiteurs dans une chaîne multi-lignes.
   *
   * @param {string} text Le texte multi-lignes contenant les lancers de dés.
   * @param {string} startDelimiter Le délimiteur de début des lancers de dés.
   * @param {string} endDelimiter Le délimiteur de fin des lancers de dés.
   * @returns {string} Le texte avec les lancers de dés remplacés par leurs résultats.
   */
  replaceDiceRolls(text, startDelimiter, endDelimiter) {
    const regex = new RegExp(
      `${this.escapeRegExp(startDelimiter)}([^${this.escapeRegExp(
        startDelimiter + endDelimiter
      )}]+)${this.escapeRegExp(endDelimiter)}`,
      "g"
    );
    return text.replace(regex, (match, diceString) => {
      try {
        const result = this.rollDice(diceString);
        return result.toString();
      } catch (error) {
        return match;
      }
    });
  }
  /**
   * Échappe les caractères spéciaux pour une utilisation dans une expression régulière.
   *
   * @param {string} string La chaîne de caractères à échapper.
   * @returns {string} La chaîne de caractères échappée.
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
var LIRPList = class {
  constructor(lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.rollDice = true;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  getListTitles() {
    let listTitles = [];
    this.list.map((element) => {
      listTitles.push(element.title);
    });
    return listTitles;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No list defined in note "${noteName}"`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      this.pushListIfNotExists(new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString));
    }
    ;
    this.pushListIfNotExists(new LIRPList(lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString));
    return true;
  }
  pushListIfNotExists(listToPush) {
    if (this.getListTitles().contains(listToPush.title)) {
      this.warning.push(`A list named "${listToPush.title}" already exists in notes "${this.noteName}, ignoring"`);
      return false;
    } else {
      this.list.push(listToPush);
      return true;
    }
    ;
  }
  getListSuggestion(withHidden = false) {
    const noteSuggestion = new LIRPSuggestionList();
    this.list.forEach((element) => {
      if (withHidden || element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  execReferenceSubstitution(item) {
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], false);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: listTitle,
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < this.referenceMaxDepth; repeat++) {
        returnOfExecMacro = this.execReferenceSubstitution(randomItem);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && workOnReference) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    if (workOnReference && this.rollDice) {
      const diceRoller = new DiceRoller();
      return diceRoller.replaceDiceRolls(randomItem, "{", "}");
    } else {
      return randomItem;
    }
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.referenceMaxDepth = referenceMaxDepth;
    this.warning = [];
  }
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    const status = currentNote.loadFromNote(noteName, noteContent);
    this.pushNoteIfListNotExists(currentNote);
    return status;
  }
  pushNoteIfListNotExists(noteToPush) {
    const allListTitle = this.getListTitles();
    let unic = true;
    noteToPush.getListTitles().map((element) => {
      if (allListTitle.contains(element)) {
        this.warning.push(`Warning, duplicate List "${element}" found in note "${noteToPush.noteName}"`);
        unic = false;
      }
    });
    if (unic) {
      this.multiNote.push(noteToPush);
    }
    ;
    return unic;
  }
  getListTitles() {
    let listTitles = [];
    this.multiNote.map((element) => {
      listTitles = listTitles.concat(element.getListTitles());
    });
    return listTitles;
  }
  getListSuggestion(withHidden = false) {
    let allListSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      allListSuggestion = allListSuggestion.concat(element.getListSuggestion());
    });
    return allListSuggestion;
  }
  getNoteSuggestion(withHidden = false) {
    let noteSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      if (element.getListSuggestion(withHidden).length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    return superNote.pickRandomItemFromList(listTitle);
  }
  getError() {
    let allError = [];
    this.multiNote.map((element) => {
      allError = allError.concat(element.getError());
    });
    return allError;
  }
  getWarning() {
    let allWarning = this.warning;
    this.multiNote.map((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    return allWarning;
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestionList = class {
  constructor() {
    this.list = [];
  }
  push(element) {
    this.list.push(element);
  }
  filterByNoteName(noteName) {
    const filterList = new LIRPSuggestionList();
    this.list.map((element) => {
      if (element.noteName === noteName) {
        filterList.push(element);
      }
    });
    return filterList;
  }
  filter(callback) {
    const filteredList = new LIRPSuggestionList();
    for (let i = 0; i < this.list.length; i++) {
      if (callback(this.list[i], i, this.list)) {
        filteredList.push(this.list[i]);
      }
    }
    return filteredList;
  }
  concat(otherList) {
    const newList = new LIRPSuggestionList();
    newList.list = this.list.concat(otherList.list);
    return newList;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    ).list;
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob();
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob();
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue, this.settings.maxMacroDepth);
    let loadWithoutError = true;
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        loadWithoutError = currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content) && loadWithoutError;
      }
      ;
    }
    ;
    if (!loadWithoutError) {
      currentLIRP.getError().map((element) => {
        new import_obsidian.Notice(element);
      });
      if (currentLIRP.length === 0) {
        return;
      }
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    if (currentLIRP.length === 0) {
      new import_obsidian.Notice('Error : check settings "Path " in plugin List Item Random Picker !');
      return;
    } else if (currentLIRP.length === 1) {
      new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
        this.workWithTitle(currentLIRP, item.title);
      }).open();
    } else {
      if (this.settings.showNoteSelector) {
        new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (item) => {
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion().filterByNoteName(item.noteName), (item2) => {
            this.workWithTitle(currentLIRP, item2.title);
          }).open();
        }).open();
      } else {
        new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
          this.workWithTitle(currentLIRP, item.title);
        }).open();
      }
      ;
    }
    ;
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getFiles();
    let filesInNotePath = [];
    const notePathRegex = new RegExp(`^${notePath}(/.+)?.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      }
      ;
    });
    return filesInNotePath;
  }
  workWithTitle(Note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const editor = activeView.editor;
      const selection = editor.getSelection();
      if (noticeRegex.test(selection)) {
        new import_obsidian.Notice(Note.pickRandomItemFromList(listTitle));
        if (this.settings.deleteSelectionForNotification) {
          editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note.pickRandomItemFromList(listTitle));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note.pickRandomItemFromList(listTitle);
        }
        editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
    ;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Note setting" });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Interface settings" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "List settings" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of an item has this value, the line is flush.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("If you want some headin one or first level list item in your item, you could escape them with these value").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Selection settings" });
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the text selected has this value, the item is not inserted, but notified !").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delete selection value for notification").setDesc("If set, the selected value for notification is deleted.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Technical settings" });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgQXBwLCBTdWdnZXN0TW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSwgVEZvbGRlciwgTWFya2Rvd25WaWV3fSBmcm9tICdvYnNpZGlhbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleGVzPFQ+KGFuQXJyYXk6IFRbXSwgcHJlZGljYXRlOiAoZWxlbWVudDogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICBjb25zdCBpbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFuQXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCwgaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cmluZ1RvRXNjYXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdUb0VzY2FwZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuaW50ZXJmYWNlIExJUlBQbHVnaW5TZXR0aW5ncyB7XG4gICAgbm90ZVBhdGg6IHN0cmluZztcbiAgICBzaG93V2FybmluZzogYm9vbGVhbjtcbiAgICBtYXhNYWNyb0RlcHRoOiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBib29sZWFuO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVZhbHVlOiBzdHJpbmc7XG4gICAgc2hvd05vdGVTZWxlY3RvcjogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTElSUFBsdWdpblNldHRpbmdzID0ge1xuICAgIG5vdGVQYXRoOiAnUGF0aCBvZiBhIG5vdGUgb3IgYSBmb2xkZXInLFxuICAgIHNob3dXYXJuaW5nOiB0cnVlLFxuICAgIG1heE1hY3JvRGVwdGg6IDEsXG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiAnIScsXG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICBudWxsVmFsdWU6ICdudWxsJyxcbiAgICBlc2NhcGVWYWx1ZTogJy8vJyxcbiAgICBzaG93Tm90ZVNlbGVjdG9yOiB0cnVlLFxufTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY2xhc3MgRGljZVJvbGxlciB7XG4gICAgY2hlY2tEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZGljZVJlZ2V4ID0gL14oXFxkKyk/ZChcXGQrKShbXFwrXFwtXVxcZCspPyhlKT8oa1xcZCspPyhrbFxcZCspPyQvaTtcbiAgICAgIHJldHVybiBkaWNlUmVnZXgudGVzdChkaWNlU3RyaW5nKTtcbiAgICB9XG4gIFxuICAgIHJvbGxEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tEaWNlKGRpY2VTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bnRheGUgZGUgbGFuY2VyIGRlIGRcdTAwRTlzIGludmFsaWRlLlwiKTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBbXywgY291bnRTdHIsIHNpZGVzU3RyLCBtb2RpZmllclN0ciwgZXhwbG9kZVN0ciwga2VlcFN0ciwga2VlcExvd1N0cl0gPVxuICAgICAgICBkaWNlU3RyaW5nLm1hdGNoKFxuICAgICAgICAgIC9eKFxcZCspP2QoXFxkKykoW1xcK1xcLV1cXGQrKT8oZSk/KGtcXGQrKT8oa2xcXGQrKT8kL2lcbiAgICAgICAgKSBhcyBSZWdFeHBNYXRjaEFycmF5O1xuICBcbiAgICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQoY291bnRTdHIgfHwgXCIxXCIpO1xuICAgICAgY29uc3Qgc2lkZXMgPSBwYXJzZUludChzaWRlc1N0cik7XG4gICAgICBjb25zdCBtb2RpZmllciA9IHBhcnNlSW50KG1vZGlmaWVyU3RyIHx8IFwiMFwiKTtcbiAgICAgIGNvbnN0IGV4cGxvZGUgPSAhIWV4cGxvZGVTdHI7XG4gICAgICBjb25zdCBrZWVwID0ga2VlcFN0ciA/IHBhcnNlSW50KGtlZXBTdHIuc2xpY2UoMSkpIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3Qga2VlcExvdyA9IGtlZXBMb3dTdHIgPyBwYXJzZUludChrZWVwTG93U3RyLnNsaWNlKDIpKSA6IHVuZGVmaW5lZDtcbiAgXG4gICAgICBsZXQgcmVzdWx0czogbnVtYmVyW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2lkZXMpICsgMTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gIFxuICAgICAgICBpZiAoZXhwbG9kZSkge1xuICAgICAgICAgIHdoaWxlIChyZXN1bHQgPT09IHNpZGVzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzaWRlcykgKyAxO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgaWYgKGtlZXApIHtcbiAgICAgICAgcmVzdWx0cy5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIGtlZXApO1xuICAgICAgfSBlbHNlIGlmIChrZWVwTG93KSB7XG4gICAgICAgIHJlc3VsdHMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBrZWVwTG93KTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBzdW0gPSByZXN1bHRzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCk7XG4gICAgICByZXR1cm4gc3VtICsgbW9kaWZpZXI7XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBSZW1wbGFjZSBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyBlbmNhZHJcdTAwRTlzIHBhciBkZXMgZFx1MDBFOWxpbWl0ZXVycyBkYW5zIHVuZSBjaGFcdTAwRUVuZSBtdWx0aS1saWduZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBMZSB0ZXh0ZSBtdWx0aS1saWduZXMgY29udGVuYW50IGxlcyBsYW5jZXJzIGRlIGRcdTAwRTlzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydERlbGltaXRlciBMZSBkXHUwMEU5bGltaXRldXIgZGUgZFx1MDBFOWJ1dCBkZXMgbGFuY2VycyBkZSBkXHUwMEU5cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5kRGVsaW1pdGVyIExlIGRcdTAwRTlsaW1pdGV1ciBkZSBmaW4gZGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGUgdGV4dGUgYXZlYyBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyByZW1wbGFjXHUwMEU5cyBwYXIgbGV1cnMgclx1MDBFOXN1bHRhdHMuXG4gICAgICovXG4gICAgcmVwbGFjZURpY2VSb2xscyhcbiAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgIHN0YXJ0RGVsaW1pdGVyOiBzdHJpbmcsXG4gICAgICBlbmREZWxpbWl0ZXI6IHN0cmluZ1xuICAgICk6IHN0cmluZyB7XG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgIGAke3RoaXMuZXNjYXBlUmVnRXhwKHN0YXJ0RGVsaW1pdGVyKX0oW14ke3RoaXMuZXNjYXBlUmVnRXhwKFxuICAgICAgICAgIHN0YXJ0RGVsaW1pdGVyICsgZW5kRGVsaW1pdGVyXG4gICAgICAgICl9XSspJHt0aGlzLmVzY2FwZVJlZ0V4cChlbmREZWxpbWl0ZXIpfWAsXG4gICAgICAgIFwiZ1wiXG4gICAgICApO1xuICBcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmVnZXgsIChtYXRjaCwgZGljZVN0cmluZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucm9sbERpY2UoZGljZVN0cmluZyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaDsgLy8gU2kgbGEgc3ludGF4ZSBlc3QgaW52YWxpZGUsIG9uIGdhcmRlIGxlIHRleHRlIGQnb3JpZ2luZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAqIFx1MDBDOWNoYXBwZSBsZXMgY2FyYWN0XHUwMEU4cmVzIHNwXHUwMEU5Y2lhdXggcG91ciB1bmUgdXRpbGlzYXRpb24gZGFucyB1bmUgZXhwcmVzc2lvbiByXHUwMEU5Z3VsaVx1MDBFOHJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBMYSBjaGFcdTAwRUVuZSBkZSBjYXJhY3RcdTAwRThyZXMgXHUwMEUwIFx1MDBFOWNoYXBwZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGEgY2hhXHUwMEVFbmUgZGUgY2FyYWN0XHUwMEU4cmVzIFx1MDBFOWNoYXBwXHUwMEU5ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGVzY2FwZVJlZ0V4cChzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gIH1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW50ZXJmYWNlIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaXRlbXM6IHN0cmluZ1tdO1xuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlO1xuICAgIG5vdEhpZGRlbigpOiBib29sZWFuO1xuICAgIHBpY2tSYW5kb21JdGVtKCk6IHN0cmluZztcbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdO1xufVxuXG5jbGFzcyBMSVJQTGlzdCBpbXBsZW1lbnRzIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcbiAgICBudWxsVmFsdWU6IHN0cmluZztcbiAgICBlc2NhcGVTdHJpbmc6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGxpbmVzOiBzdHJpbmdbXSwgbnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmcgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuXG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdFeCA9IC9eIyArKC4rKSQvO1xuICAgICAgICB0aGlzLnRpdGxlID0gbGluZXNbMF0ucmVwbGFjZShoZWFkaW5nUmVnRXgsIFwiJDFcIik7XG4gICAgICAgIGNvbnN0IGl0YWxpY0hlYWRpbmdSZWdleCA9IC9eKF98XFwqKVxcUy87XG4gICAgICAgIGlmIChpdGFsaWNIZWFkaW5nUmVnZXgudGVzdCh0aGlzLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5zaGlmdCgpO1xuICAgICAgICBjb25zdCBsaXN0QmVnaW5JdGVtUmVnZXggPSAvXigtfFxcZCtcXC4pICsoLispJC87XG4gICAgICAgIGNvbnN0IGxpc3RCZWdpbkluZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGxpc3RCZWdpbkl0ZW1SZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmcucHVzaChgTm8gaXRlbXMgaW4gbGlzdCAke3RoaXMudGl0bGV9YCk7XG4gICAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xlYW5MaW5lcyA9IGxpbmVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShsaXN0QmVnaW5JdGVtUmVnZXgsIFwiJDJcIilcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaXN0QmVnaW5JbmRleGVzWzBdICE9PSAwKSB7XG4gICAgICAgICAgICBsZXQgbWREZXNjcmlwdGlvbiA9IGNsZWFuTGluZXMuc2xpY2UoMCwgbGlzdEJlZ2luSW5kZXhlc1swXSk7XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAgICAgLy8gICBNRDAyMi9ibGFua3MtYXJvdW5kLWhlYWRpbmdzOiBIZWFkaW5ncyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgaWYgKG1kRGVzY3JpcHRpb25bMF0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBtZERlc2NyaXB0aW9uLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAzMlxuICAgICAgICAgICAgLy8gICBNRDAzMi9ibGFua3MtYXJvdW5kLWxpc3RzOiBMaXN0cyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgLy8gRHVlIHRvIHNwbGl0IG9uICdcXG4nLCB0aGUgc2xpY2UsIGFuZCBhdCBsZWFzdCBhIGpvaW4gb24gJ1xcbicgdGhlIGxhc3QgJ1xcbicgaXMgYWx3YXlzIGxvc3QgIVxuICAgICAgICAgICAgLy8gU28gdGhlIGZvbG93aW5nIGNvZGUgaXMgdXNlbGVzc1xuICAgICAgICAgICAgLy8gaWYgKG1kRGVzY3JpcHRpb24uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAvLyAgICAgbWREZXNjcmlwdGlvbi5wb3AoKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBtZERlc2NyaXB0aW9uLmpvaW4oJ1xcbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0QmVnaW5Db3VudCA9IGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoXG4gICAgICAgIGxldCBpdGVtOiBzdHJpbmdbXTtcbiAgICAgICAgZm9yIChsZXQgY3VycmVudEluZGV4ID0gMDsgY3VycmVudEluZGV4IDwgKGxpc3RCZWdpbkNvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBsaXN0QmVnaW5JbmRleGVzW2N1cnJlbnRJbmRleCArIDFdKSk7XG4gICAgICAgICAgICB0aGlzLnB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tsaXN0QmVnaW5Db3VudCAtIDFdKSk7XG4gICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgaWYgKGl0ZW0uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpdGVtLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaEl0ZW1CYXNlZE9uV2VpZ2h0KGl0ZW0pO1xuICAgIH1cblxuICAgIHB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtOiBzdHJpbmdbXSkgOiB2b2lkIHtcbiAgICAgICAgY29uc3QgSXRlbVdpdGhXZWlnaHRSZWdFeCA9IC9eXFwoKFxcZCspXFwpXFxzKyguKykkLztcbiAgICAgICAgbGV0IHJlZ0V4RXhlY3V0aW9uO1xuICAgICAgICBsZXQgcmVwZWF0OiBudW1iZXI7XG4gICAgICAgIGlmICgocmVnRXhFeGVjdXRpb24gPSBJdGVtV2l0aFdlaWdodFJlZ0V4LmV4ZWMoaXRlbVswXSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXBlYXQgPSBOdW1iZXIocmVnRXhFeGVjdXRpb25bMV0pO1xuICAgICAgICAgICAgaXRlbVswXSA9IHJlZ0V4RXhlY3V0aW9uWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwZWF0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbVswXSA9PT0gdGhpcy5udWxsVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZW1bMF0gPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNoaWZ0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0cmluZ1JlZ2V4ID0gYF4gKiR7dGhpcy5lc2NhcGVTdHJpbmd9KC4qKWA7XG4gICAgICAgIGNvbnN0IGVzY2FwZVN0cmluZ1JlZ0V4ID0gbmV3IFJlZ0V4cChzdHJpbmdSZWdleCwgJ2dtJyk7XG4gICAgICAgIGNvbnN0IGVzY2FwZUl0ZW0gPSBpdGVtLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShlc2NhcGVTdHJpbmdSZWdFeCwgJyQxJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdHJpbmdJdGVtID0gZXNjYXBlSXRlbS5qb2luKCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXBlYXQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHN0cmluZ0l0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbiA9IHtcbiAgICAgICAgICAgIG5vdGVOYW1lOiBub3RlTmFtZSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICh0aGlzLmRlc2NyaXB0aW9uLnNwbGl0KCdcXG4nKVswXSksXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb247XG4gICAgfTtcblxuICAgIG5vdEhpZGRlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhpZGRlbjtcbiAgICB9XG5cbiAgICBwaWNrUmFuZG9tSXRlbSgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmFuZG9tSXRlbTogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHRoaXMuaXRlbXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5pdGVtcy5sZW5ndGgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZG9tSXRlbTtcbiAgICB9XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2FybmluZztcbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIExJUlBFeGVjUmVmU3ViSW50ZXJmYWNlIHtcbiAgICBsYXN0TGlzdFRpdGxlOiBzdHJpbmc7XG4gICAgbW9kaWZpZWRJdGVtOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbG9hZEZyb21Ob3RlKG5vdGVOYW1lOiBzdHJpbmcsIG5vdGVDb250ZW50OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uTGlzdDtcbiAgICBwaWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZTogc3RyaW5nLCB3b3JrT25SZWZlcmVuY2U6IGJvb2xlYW4pOiBzdHJpbmc7IFxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdO1xuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW107XG59XG5cbmNsYXNzIExJUlBOb3RlIGltcGxlbWVudHMgTElSUE5vdGVJbnRlcmZhY2Uge1xuICAgIG5vdGVOYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBsaXN0OiBMSVJQTGlzdFtdO1xuICAgIGVycm9yOiBzdHJpbmdbXTtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcbiAgICBudWxsVmFsdWU6IHN0cmluZztcbiAgICBlc2NhcGVTdHJpbmc6IHN0cmluZztcbiAgICByb2xsRGljZTogYm9vbGVhbjtcbiAgICByZWZlcmVuY2VNYXhEZXB0aDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IgKG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZywgcmVmZXJlbmNlTWF4RGVwdGg6IG51bWJlcikge1xuICAgICAgICB0aGlzLm5vdGVOYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmVycm9yID0gW107XG4gICAgICAgIHRoaXMud2FybmluZyA9IFtdO1xuICAgICAgICB0aGlzLm51bGxWYWx1ZSA9IG51bGxWYWx1ZTtcbiAgICAgICAgdGhpcy5lc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmc7XG4gICAgICAgIHRoaXMucm9sbERpY2UgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZU1heERlcHRoID0gcmVmZXJlbmNlTWF4RGVwdGg7XG4gICAgfVxuXG4gICAgZ2V0TGlzdFRpdGxlcygpIDogc3RyaW5nW10ge1xuICAgICAgICBsZXQgbGlzdFRpdGxlczpzdHJpbmdbXSA9IFtdO1xuICAgICAgICB0aGlzLmxpc3QubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBsaXN0VGl0bGVzLnB1c2goZWxlbWVudC50aXRsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbGlzdFRpdGxlcztcbiAgICB9O1xuXG4gICAgbG9hZEZyb21Ob3RlKG5vdGVOYW1lOiBzdHJpbmcsIG5vdGVDb250ZW50OiBzdHJpbmcsICk6IGJvb2xlYW4ge1xuICAgICAgICB0aGlzLm5vdGVOYW1lID0gbm90ZU5hbWU7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gbm90ZUNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBjb25zdCBoZWFkaW5nUmVnZXggPSAvXiMgLiskLztcbiAgICAgICAgbGV0IGhlYWRpbmdJbmRleGVzID0gZmluZEluZGV4ZXMobGluZXMsIChlbGVtZW50KSA9PiBoZWFkaW5nUmVnZXgudGVzdChlbGVtZW50KSk7XG4gICAgICAgIGlmIChoZWFkaW5nSW5kZXhlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IucHVzaChgTm8gbGlzdCBkZWZpbmVkIGluIG5vdGUgXCIke25vdGVOYW1lfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRpbmdJbmRleGVzWzBdICE9PSAwKSB7XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAgICAgLy8gICBNRDAyMi9ibGFua3MtYXJvdW5kLWhlYWRpbmdzOiBIZWFkaW5ncyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgLy8gRHVlIHRvIHNwbGl0IG9uICdcXG4nLCB0aGUgc2xpY2UsIGFuZCBhdCBsZWFzdCBhIGpvaW4gb24gJ1xcbicgdGhlIGxhc3QgJ1xcbicgaXMgYWx3YXlzIGxvc3QgIVxuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGxpbmVzLnNsaWNlKDAsIGhlYWRpbmdJbmRleGVzWzBdKS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkaW5nQ291bnQgPSBoZWFkaW5nSW5kZXhlcy5sZW5ndGhcbiAgICAgICAgZm9yIChsZXQgY3VycmVudEluZGV4ID0gMDsgY3VycmVudEluZGV4IDwgKGhlYWRpbmdDb3VudCAtIDEpOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaExpc3RJZk5vdEV4aXN0cyhuZXcgTElSUExpc3QobGluZXMuc2xpY2UoaGVhZGluZ0luZGV4ZXNbY3VycmVudEluZGV4XSwgaGVhZGluZ0luZGV4ZXNbY3VycmVudEluZGV4ICsgMV0pLCB0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wdXNoTGlzdElmTm90RXhpc3RzKG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1toZWFkaW5nQ291bnQgLSAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZykpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH07XG5cbiAgICBwdXNoTGlzdElmTm90RXhpc3RzKGxpc3RUb1B1c2g6IExJUlBMaXN0KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmdldExpc3RUaXRsZXMoKS5jb250YWlucyhsaXN0VG9QdXNoLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy53YXJuaW5nLnB1c2goYEEgbGlzdCBuYW1lZCBcIiR7bGlzdFRvUHVzaC50aXRsZX1cIiBhbHJlYWR5IGV4aXN0cyBpbiBub3RlcyBcIiR7dGhpcy5ub3RlTmFtZX0sIGlnbm9yaW5nXCJgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKGxpc3RUb1B1c2gpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGNvbnN0IG5vdGVTdWdnZXN0aW9uID0gbmV3IExJUlBTdWdnZXN0aW9uTGlzdCgpO1xuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHdpdGhIaWRkZW4gfHwgZWxlbWVudC5ub3RIaWRkZW4oKSkge1xuICAgICAgICAgICAgICAgIG5vdGVTdWdnZXN0aW9uLnB1c2goZWxlbWVudC5nZXRTdWdnZXN0aW9uKHRoaXMubm90ZU5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3RlU3VnZ2VzdGlvbjtcbiAgICB9XG5cbiAgICBleGVjUmVmZXJlbmNlU3Vic3RpdHV0aW9uKGl0ZW06IHN0cmluZyk6IExJUlBFeGVjUmVmU3ViSW50ZXJmYWNlIHtcbiAgICAgICAgY29uc3Qgc3RyaW5nTWFjcm9SZWZSZWdleDogc3RyaW5nID0gYFxceygke3RoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IGVzY2FwZVJlZ2V4KGVsZW1lbnQudGl0bGUpKS5qb2luKCd8Jyl9KVxcfWA7XG4gICAgICAgIGNvbnN0IG1hY3JvUmVmUmVnZXggPSBuZXcgUmVnRXhwIChzdHJpbmdNYWNyb1JlZlJlZ2V4LCdtZycpO1xuICAgICAgICBsZXQgbWF0Y2g7XG4gICAgICAgIGxldCBtb2RpZmllZEl0ZW06c3RyaW5nID0gaXRlbTtcbiAgICAgICAgbGV0IGxpc3RUaXRsZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gbWFjcm9SZWZSZWdleC5leGVjKG1vZGlmaWVkSXRlbSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgbmV3VmFsdWU6IHN0cmluZyA9IHRoaXMucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChtYXRjaFsxXSwgZmFsc2UpOyBcbiAgICAgICAgICAgIGxpc3RUaXRsZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgbW9kaWZpZWRJdGVtID0gbW9kaWZpZWRJdGVtLnJlcGxhY2UobGlzdFRpdGxlLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICBtYWNyb1JlZlJlZ2V4Lmxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbmV3VmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXN0TGlzdFRpdGxlOiBsaXN0VGl0bGUsXG4gICAgICAgICAgICBtb2RpZmllZEl0ZW06IG1vZGlmaWVkSXRlbSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwaWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZTogc3RyaW5nLCB3b3JrT25SZWZlcmVuY2U6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJhbmRvbUl0ZW06IHN0cmluZyA9IFwiXCI7XG4gICAgICAgIGxldCByZXR1cm5PZkV4ZWNNYWNybzogTElSUEV4ZWNSZWZTdWJJbnRlcmZhY2UgPSB7XG4gICAgICAgICAgICBsYXN0TGlzdFRpdGxlOiBsaXN0VGl0bGUsXG4gICAgICAgICAgICBtb2RpZmllZEl0ZW06IFwiXCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ID0gdGhpcy5saXN0LmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQudGl0bGUgPT09IGxpc3RUaXRsZSk7XG4gICAgICAgIGlmIChjdXJyZW50TGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByYW5kb21JdGVtID0gY3VycmVudExpc3QucGlja1JhbmRvbUl0ZW0oKTtcbiAgICAgICAgICAgIGZvciAobGV0IHJlcGVhdCA9IDA7IHJlcGVhdCA8IHRoaXMucmVmZXJlbmNlTWF4RGVwdGg7IHJlcGVhdCsrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuT2ZFeGVjTWFjcm8gPSB0aGlzLmV4ZWNSZWZlcmVuY2VTdWJzdGl0dXRpb24ocmFuZG9tSXRlbSk7XG4gICAgICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHJldHVybk9mRXhlY01hY3JvLm1vZGlmaWVkSXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdNYWNyb1JlZlJlZ2V4OiBzdHJpbmcgPSBgXFx7KCR7dGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4gZXNjYXBlUmVnZXgoZWxlbWVudC50aXRsZSkpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgpO1xuICAgICAgICBpZiAobWFjcm9SZWZSZWdleC50ZXN0KHJhbmRvbUl0ZW0pICYmIHdvcmtPblJlZmVyZW5jZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgTWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBpbiBub3RlIFwiJHt0aGlzLm5vdGVOYW1lfVwiIGFmdGVyIGNhbGxpbmcgXCIke3JldHVybk9mRXhlY01hY3JvLmxhc3RMaXN0VGl0bGV9XCJgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdvcmtPblJlZmVyZW5jZSAmJiB0aGlzLnJvbGxEaWNlKSB7XG4gICAgICAgICAgICBjb25zdCBkaWNlUm9sbGVyID0gbmV3IERpY2VSb2xsZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBkaWNlUm9sbGVyLnJlcGxhY2VEaWNlUm9sbHMocmFuZG9tSXRlbSwneycsJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21JdGVtO1xuICAgICAgICB9XG4gICAgfSBcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfTtcblxuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsV2FybmluZzogc3RyaW5nW107XG4gICAgICAgIGFsbFdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KHRoaXMud2FybmluZyk7XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhbGxXYXJuaW5nID0gYWxsV2FybmluZy5jb25jYXQoZWxlbWVudC5nZXRXYXJuaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IE5vdGVXYXJuaW5nOiBzdHJpbmdbXTtcbiAgICAgICAgTm90ZVdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZy5mb3JFYWNoKChlbGVtZW50KSA9PiBcbiAgICAgICAgICAgIE5vdGVXYXJuaW5nLnB1c2goYFdhcm5pbmcgaW4gbm90ZSBcIiR7dGhpcy5ub3RlTmFtZX1cIiA6ICR7ZWxlbWVudH1gKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gTm90ZVdhcm5pbmc7XG4gICAgfTtcblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGg7XG4gICAgfTtcbn1cblxuY2xhc3MgTElSUE11bHRpTm90ZSBpbXBsZW1lbnRzIExJUlBOb3RlSW50ZXJmYWNlIHtcbiAgICBtdWx0aU5vdGU6IExJUlBOb3RlW107XG4gICAgbnVsbFZhbHVlOiBzdHJpbmc7XG4gICAgZXNjYXBlU3RyaW5nOiBzdHJpbmc7XG4gICAgbm90ZVNlbGVjdGVkOiBMSVJQTm90ZXx1bmRlZmluZWQ7XG4gICAgcmVmZXJlbmNlTWF4RGVwdGg6IG51bWJlcjtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcblxuXG4gICAgY29uc3RydWN0b3IgKG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZywgcmVmZXJlbmNlTWF4RGVwdGg6IG51bWJlcikge1xuICAgICAgICB0aGlzLm11bHRpTm90ZSA9IFtdO1xuICAgICAgICB0aGlzLm51bGxWYWx1ZSA9IG51bGxWYWx1ZTtcbiAgICAgICAgdGhpcy5lc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmc7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlTWF4RGVwdGggPSByZWZlcmVuY2VNYXhEZXB0aDtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgfTtcblxuICAgIGxvYWRGcm9tTm90ZShub3RlTmFtZTogc3RyaW5nLCBub3RlQ29udGVudDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROb3RlID0gbmV3IExJUlBOb3RlKHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZywgdGhpcy5yZWZlcmVuY2VNYXhEZXB0aCk7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IGN1cnJlbnROb3RlLmxvYWRGcm9tTm90ZShub3RlTmFtZSwgbm90ZUNvbnRlbnQpO1xuICAgICAgICB0aGlzLnB1c2hOb3RlSWZMaXN0Tm90RXhpc3RzKGN1cnJlbnROb3RlKTtcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9O1xuXG4gICAgcHVzaE5vdGVJZkxpc3ROb3RFeGlzdHMobm90ZVRvUHVzaDogTElSUE5vdGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYWxsTGlzdFRpdGxlID0gdGhpcy5nZXRMaXN0VGl0bGVzKCk7XG4gICAgICAgIGxldCB1bmljOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBub3RlVG9QdXNoLmdldExpc3RUaXRsZXMoKS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChhbGxMaXN0VGl0bGUuY29udGFpbnMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmcucHVzaChgV2FybmluZywgZHVwbGljYXRlIExpc3QgXCIke2VsZW1lbnR9XCIgZm91bmQgaW4gbm90ZSBcIiR7bm90ZVRvUHVzaC5ub3RlTmFtZX1cImApO1xuICAgICAgICAgICAgICAgIHVuaWMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh1bmljKSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpTm90ZS5wdXNoKG5vdGVUb1B1c2gpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdW5pYztcbiAgICB9O1xuICAgIFxuICAgIGdldExpc3RUaXRsZXMoKSA6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGxpc3RUaXRsZXM6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBsaXN0VGl0bGVzID0gbGlzdFRpdGxlcy5jb25jYXQoZWxlbWVudC5nZXRMaXN0VGl0bGVzKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxpc3RUaXRsZXM7XG4gICAgfTtcblxuICAgIGdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGxldCBhbGxMaXN0U3VnZ2VzdGlvbiA9IG5ldyBMSVJQU3VnZ2VzdGlvbkxpc3QoKTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhbGxMaXN0U3VnZ2VzdGlvbiA9IGFsbExpc3RTdWdnZXN0aW9uLmNvbmNhdChlbGVtZW50LmdldExpc3RTdWdnZXN0aW9uKCkpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWxsTGlzdFN1Z2dlc3Rpb247XG4gICAgfTtcblxuICAgIGdldE5vdGVTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGxldCBub3RlU3VnZ2VzdGlvbiA9IG5ldyBMSVJQU3VnZ2VzdGlvbkxpc3Q7XG4gICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuZ2V0TGlzdFN1Z2dlc3Rpb24od2l0aEhpZGRlbikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5vdGVTdWdnZXN0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBub3RlTmFtZTogZWxlbWVudC5ub3RlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVsZW1lbnQubm90ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAoZWxlbWVudC5kZXNjcmlwdGlvbi5zcGxpdCgnXFxuJylbMF0pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3RlU3VnZ2VzdGlvbjtcbiAgICB9O1xuXG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgd29ya09uUmVmZXJlbmNlOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBzdXBlck5vdGUgPSBuZXcgTElSUE5vdGUodGhpcy5udWxsVmFsdWUsIHRoaXMuZXNjYXBlU3RyaW5nLCB0aGlzLnJlZmVyZW5jZU1heERlcHRoKTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBzdXBlck5vdGUubGlzdCA9IHN1cGVyTm90ZS5saXN0LmNvbmNhdChlbGVtZW50Lmxpc3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1cGVyTm90ZS5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSk7XG4gICAgfTtcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGFsbEVycm9yOnN0cmluZ1tdID0gW107XG4gICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgYWxsRXJyb3IgPSBhbGxFcnJvci5jb25jYXQoZWxlbWVudC5nZXRFcnJvcigpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxFcnJvcjtcbiAgICB9O1xuXG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBhbGxXYXJuaW5nOnN0cmluZ1tdID0gdGhpcy53YXJuaW5nO1xuICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGFsbFdhcm5pbmcgPSBhbGxXYXJuaW5nLmNvbmNhdChlbGVtZW50LmdldFdhcm5pbmcoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWxsV2FybmluZztcbiAgICB9O1xuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aU5vdGUubGVuZ3RoO1xuICAgIH07XG5cbn07XG5cbmludGVyZmFjZSBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmNsYXNzIExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgbGlzdDogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpc3QgPSBbXTtcbiAgICB9O1xuXG4gICAgcHVzaCAoZWxlbWVudDogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5saXN0LnB1c2goZWxlbWVudCk7XG4gICAgfTtcblxuICAgIGZpbHRlckJ5Tm90ZU5hbWUobm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGNvbnN0IGZpbHRlckxpc3QgPSBuZXcgTElSUFN1Z2dlc3Rpb25MaXN0KCk7XG4gICAgICAgIHRoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vdGVOYW1lID09PSBub3RlTmFtZSkge1xuICAgICAgICAgICAgICAgIGZpbHRlckxpc3QucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJMaXN0O1xuICAgIH07XG5cbiAgICBmaWx0ZXIoY2FsbGJhY2s6IChlbGVtZW50OiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSwgaW5kZXg/OiBudW1iZXIsIGFycmF5PzogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSkgPT4gYm9vbGVhbik6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkTGlzdCA9IG5ldyBMSVJQU3VnZ2VzdGlvbkxpc3QoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayh0aGlzLmxpc3RbaV0sIGksIHRoaXMubGlzdCkpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZExpc3QucHVzaCh0aGlzLmxpc3RbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZExpc3Q7XG4gICAgfTtcblxuICAgIGNvbmNhdChvdGhlckxpc3Q6IExJUlBTdWdnZXN0aW9uTGlzdCk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGNvbnN0IG5ld0xpc3QgPSBuZXcgTElSUFN1Z2dlc3Rpb25MaXN0KCk7XG4gICAgICAgIG5ld0xpc3QubGlzdCA9IHRoaXMubGlzdC5jb25jYXQob3RoZXJMaXN0Lmxpc3QpO1xuICAgICAgICByZXR1cm4gbmV3TGlzdDtcbiAgICB9O1xuXG4gICAgZ2V0IGxlbmd0aCAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGg7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTElSUFN1Z2dlc3RNb2RhbCBleHRlbmRzIFN1Z2dlc3RNb2RhbDxMSVJQU3VnZ2VzdGlvbkludGVyZmFjZT4ge1xuICAgIGl0ZW1zOiBMSVJQU3VnZ2VzdGlvbkxpc3Q7XG4gICAgY2FsbGJhY2s6ICh2YWx1ZTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UpID0+IHZvaWQ7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpdGVtczogTElSUFN1Z2dlc3Rpb25MaXN0LCBjYWxsYmFjazogKHZhbHVlOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSkgPT4gdm9pZCkge1xuICAgICAgc3VwZXIoYXBwKTtcbiAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBnZXRTdWdnZXN0aW9ucyhxdWVyeTogc3RyaW5nKTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2VbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigoaXRlbSkgPT5cbiAgICAgICAgICAgIGl0ZW0udGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApLmxpc3Q7IC8vIFJldG91cm5lIGxlIHRhYmxlYXUgYGxpc3RgIGRlIExJUlBTdWdnZXN0aW9uTGlzdFxuICAgIH1cblxuICAgIHJlbmRlclN1Z2dlc3Rpb24oaXRlbTogTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2UsIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBlbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBpdGVtLnRpdGxlIH0pO1xuICAgICAgICBlbC5jcmVhdGVFbCgnc21hbGwnLCB7dGV4dDogaXRlbS5kZXNjcmlwdGlvbn0pO1xuICAgICAgfVxuICBcbiAgICAgIG9uQ2hvb3NlU3VnZ2VzdGlvbihpdGVtOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrKGl0ZW0pO1xuICAgICAgfX1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdEl0ZW1SYW5kb21QaWNrZXIgZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzOiBMSVJQUGx1Z2luU2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdsaXN0LXRyZWUnLCAnUGljayByYW5kb20gbGlzdCBpdGVtJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kb1RoZUpvYigpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdpbnNlcnQtcmFuZG9tLWl0ZW0nLFxuICAgICAgICAgICAgbmFtZTogJ0luc2VydCByYW5kb20gaXRlbSBmcm9tIGxpc3QnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvVGhlSm9iKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgTElSUFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpIHtcblxuICAgIH1cblxuICAgIGFzeW5jIGRvVGhlSm9iKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBhbGxMSVJQRmlsZXMgPSB0aGlzLmdldExJUlBGaWxlcyh0aGlzLnNldHRpbmdzLm5vdGVQYXRoKTtcbiAgICAgICAgbGV0IGN1cnJlbnRMSVJQID0gbmV3IExJUlBNdWx0aU5vdGUodGhpcy5zZXR0aW5ncy5udWxsVmFsdWUsIHRoaXMuc2V0dGluZ3MuZXNjYXBlVmFsdWUsIHRoaXMuc2V0dGluZ3MubWF4TWFjcm9EZXB0aCk7XG4gICAgICAgIGxldCBsb2FkV2l0aG91dEVycm9yOmJvb2xlYW4gPSB0cnVlO1xuXG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudEZpbGUgb2YgYWxsTElSUEZpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RlNPYmplY3QgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoY3VycmVudEZpbGUpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQ6c3RyaW5nID0gJyc7XG4gICAgICAgICAgICBpZiAoY3VycmVudEZTT2JqZWN0IGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZChjdXJyZW50RlNPYmplY3QpO1xuICAgICAgICAgICAgICAgIGxvYWRXaXRob3V0RXJyb3IgPSAgY3VycmVudExJUlAubG9hZEZyb21Ob3RlKGN1cnJlbnRGU09iamVjdC5wYXRoLnNsaWNlKDAsIC0zKSwgY29udGVudCkgJiYgbG9hZFdpdGhvdXRFcnJvcjtcbiAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFsb2FkV2l0aG91dEVycm9yKSB7XG4gICAgICAgICAgICBjdXJyZW50TElSUC5nZXRFcnJvcigpLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50TElSUC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd1dhcm5pbmcpIHtcbiAgICAgICAgICAgIGN1cnJlbnRMSVJQLmdldFdhcm5pbmcoKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnRXJyb3IgOiBjaGVjayBzZXR0aW5ncyBcIlBhdGggXCIgaW4gcGx1Z2luIExpc3QgSXRlbSBSYW5kb20gUGlja2VyICEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50TElSUC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnRMSVJQLnNlbGVjdE5vdGUoJycpO1xuICAgICAgICAgICAgbmV3IExJUlBTdWdnZXN0TW9kYWwodGhpcy5hcHAsIGN1cnJlbnRMSVJQLmdldExpc3RTdWdnZXN0aW9uKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JrV2l0aFRpdGxlKGN1cnJlbnRMSVJQLCBpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dOb3RlU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0Tm90ZVN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudExJUlAuc2VsZWN0Tm90ZShpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IExJUlBTdWdnZXN0TW9kYWwodGhpcy5hcHAsIGN1cnJlbnRMSVJQLmdldExpc3RTdWdnZXN0aW9uKCkuZmlsdGVyQnlOb3RlTmFtZShpdGVtLm5vdGVOYW1lKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29ya1dpdGhUaXRsZShjdXJyZW50TElSUCwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXRMaXN0U3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0ubm90ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0TElSUEZpbGVzIChub3RlUGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsVmF1bHRGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCk7XG4gICAgICAgIGxldCBmaWxlc0luTm90ZVBhdGg6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3Qgbm90ZVBhdGhSZWdleCA9IG5ldyBSZWdFeHAoYF4ke25vdGVQYXRofSgvLispP1xcLm1kJGApO1xuICAgICAgICBhbGxWYXVsdEZpbGVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vdGVQYXRoUmVnZXgudGVzdChlbGVtZW50LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgZmlsZXNJbk5vdGVQYXRoLnB1c2goZWxlbWVudC5wYXRoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXNJbk5vdGVQYXRoO1xuICAgIH07XG5cbiAgICB3b3JrV2l0aFRpdGxlKE5vdGU6IExJUlBNdWx0aU5vdGUsIGxpc3RUaXRsZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXG4gICAgICAgIGlmIChhY3RpdmVWaWV3KSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25Gb3JOb3RpZmljYXRpb25SZWdleDpzdHJpbmcgPSBgXiR7dGhpcy5zZXR0aW5ncy5zZWxlY3Rpb25Gb3JOb3RpZmljYXRpb259JGA7XG4gICAgICAgICAgICBjb25zdCBub3RpY2VSZWdleCA9IG5ldyBSZWdFeHAoc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uUmVnZXgpO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgZWRpdG9yID0gYWN0aXZlVmlldy5lZGl0b3I7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIGlmIChub3RpY2VSZWdleC50ZXN0KHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKE5vdGUucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGUpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZWxldGVTZWxlY3Rpb25Gb3JOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0cmluZ1RvSW5zZXJ0OiBzdHJpbmcgPSAnJztcbiAgICAgICAgICAgICAgICBjb25zdCByZXBlYXRJbnNlcnRSZWdFeCA9IC9eKFxcZCspKC4qKS9nbTtcbiAgICAgICAgICAgICAgICBsZXQgcmVnRXhFeGVjdXRpb247XG4gICAgICAgICAgICAgICAgbGV0IHJlcGVhdDogbnVtYmVyO1xuICAgICAgICAgICAgICAgIGlmICgocmVnRXhFeGVjdXRpb24gPSByZXBlYXRJbnNlcnRSZWdFeC5leGVjKHNlbGVjdGlvbikpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdCA9IE51bWJlcihyZWdFeEV4ZWN1dGlvblsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbGltaXRlciA9IHNlbGVjdGlvbi5yZXBsYWNlKC9eXFxkKy8sICcnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJyYXlTdHJpbmdUb2luc2VydDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXBlYXQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlTdHJpbmdUb2luc2VydC5wdXNoKE5vdGUucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdUb0luc2VydCA9IGFycmF5U3RyaW5nVG9pbnNlcnQuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1RvSW5zZXJ0ID0gTm90ZS5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHN0cmluZ1RvSW5zZXJ0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gYWN0aXZlIE1hcmtkb3duIGVkaXRvciBmb3VuZC5cIik7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cbn1cblxuY2xhc3MgTElSUFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IExpc3RJdGVtUmFuZG9tUGlja2VyO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTGlzdEl0ZW1SYW5kb21QaWNrZXIpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ05vdGUgc2V0dGluZycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTm90ZSBQYXRoJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgcGF0aCBhbmQgZmlsZW5hbWUgb2YgdGhlIG5vdGUgdGhhdCBjb250YWlucyB0aGUgbGlzdHMgdG8gYmUgdXNlZC4gRXhlbXBsZSA6IFwiRm9sZGVyL05vdGVcIi4nKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB0aGUgcGF0aCB0byB5b3VyIG5vdGUnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlUGF0aClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVQYXRoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0ludGVyZmFjZSBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2hvdyBub3RlIHNlbGVjdG9yJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiBwYXRoIGlzIGEgZm9sZGVyJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Tm90ZVNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dOb3RlU2VsZWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgd2FybmluZycpXG4gICAgICAgICAgICAuc2V0RGVzYygnRGlzcGxheSB0aGUgd2FybmluZ3Mgb2Ygbm90ZXMgYW5kIGxpc3RzLCBpZiBhbnkuIFdhcm5pbmdzIGZvciBtYWNybyBkZXB0aCBsaW1pdCByZWFjaGVkIGFyZSBhbHdheXMgZGlzcGxheWVkLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd1dhcm5pbmcpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd1dhcm5pbmcgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0xpc3Qgc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ051bGwgdmFsdWUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHRoZSBmaXJzdCBsaW5lIG9mIGFuIGl0ZW0gaGFzIHRoaXMgdmFsdWUsIHRoZSBsaW5lIGlzIGZsdXNoLicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubnVsbFZhbHVlKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubnVsbFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0VzY2FwZSB2YWx1ZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgeW91IHdhbnQgc29tZSBoZWFkaW4gb25lIG9yIGZpcnN0IGxldmVsIGxpc3QgaXRlbSBpbiB5b3VyIGl0ZW0sIHlvdSBjb3VsZCBlc2NhcGUgdGhlbSB3aXRoIHRoZXNlIHZhbHVlJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdmFsdWUnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lc2NhcGVWYWx1ZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVzY2FwZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NlbGVjdGlvbiBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2VsZWN0aW9uIHZhbHVlIGZvciBub3RpZmljYXRpb24nKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHRoZSB0ZXh0IHNlbGVjdGVkIGhhcyB0aGlzIHZhbHVlLCB0aGUgaXRlbSBpcyBub3QgaW5zZXJ0ZWQsIGJ1dCBub3RpZmllZCAhJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdmFsdWUnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3Rpb25Gb3JOb3RpZmljYXRpb24pXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3Rpb25Gb3JOb3RpZmljYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRGVsZXRlIHNlbGVjdGlvbiB2YWx1ZSBmb3Igbm90aWZpY2F0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiBzZXQsIHRoZSBzZWxlY3RlZCB2YWx1ZSBmb3Igbm90aWZpY2F0aW9uIGlzIGRlbGV0ZWQuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWxldGVTZWxlY3Rpb25Gb3JOb3RpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnVGVjaG5pY2FsIHNldHRpbmdzJyB9KTtcblxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoJ01hY3JvIGRlcHRoIGxpbWl0JylcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnTWFjcm8gcmVjdXJzaW9uIGxpbWl0OiBob3cgbWFueSBuZXN0ZWQgbWFjcm8gY2FsbHMgYXJlIGFsbG93ZWQuIFplcm8gcHJldmVudHMgbmVzdGVkIG1hY3JvcyBmcm9tIGJlaW5nIHJlc29sdmVkLicpXG4gICAgICAgICAgICAgICAgLmFkZFNsaWRlcigoc2xpZGVyKSA9PlxuICAgICAgICAgICAgICAgICAgICBzbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldExpbWl0cygwLCAxMCwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBLHNCQUEwRztBQUUxRyxTQUFTLFlBQWUsU0FBYyxXQUE2RDtBQUMvRixRQUFNLFVBQW9CLENBQUM7QUFDM0IsVUFBUSxRQUFRLENBQUMsU0FBUyxVQUFVO0FBQ2xDLFFBQUksVUFBVSxTQUFTLEtBQUssR0FBRztBQUM3QixjQUFRLEtBQUssS0FBSztBQUFBLElBQ3BCO0FBQUEsRUFDRixDQUFDO0FBQ0QsU0FBTztBQUNYO0FBRUEsU0FBUyxZQUFZLGdCQUFnQztBQUNqRCxTQUFPLGVBQWUsUUFBUSx1QkFBdUIsTUFBTTtBQUMvRDtBQVlBLElBQU0sbUJBQXVDO0FBQUEsRUFDekMsVUFBVTtBQUFBLEVBQ1YsYUFBYTtBQUFBLEVBQ2IsZUFBZTtBQUFBLEVBQ2YsMEJBQTBCO0FBQUEsRUFDMUIsZ0NBQWdDO0FBQUEsRUFDaEMsV0FBVztBQUFBLEVBQ1gsYUFBYTtBQUFBLEVBQ2Isa0JBQWtCO0FBQ3RCO0FBR0EsSUFBTSxhQUFOLE1BQWlCO0FBQUEsRUFDYixVQUFVLFlBQTZCO0FBQ3JDLFVBQU0sWUFBWTtBQUNsQixXQUFPLFVBQVUsS0FBSyxVQUFVO0FBQUEsRUFDbEM7QUFBQSxFQUVBLFNBQVMsWUFBNEI7QUFDbkMsUUFBSSxDQUFDLEtBQUssVUFBVSxVQUFVLEdBQUc7QUFDL0IsWUFBTSxJQUFJLE1BQU0sdUNBQW9DO0FBQUEsSUFDdEQ7QUFFQSxVQUFNLENBQUMsR0FBRyxVQUFVLFVBQVUsYUFBYSxZQUFZLFNBQVMsVUFBVSxJQUN4RSxXQUFXO0FBQUEsTUFDVDtBQUFBLElBQ0Y7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
