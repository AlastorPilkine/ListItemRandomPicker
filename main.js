/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  MySuggestModal: () => MySuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  notePath: "Full path of a note"
};
var MySuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item.title);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.openTitlePicker(this.settings.notePath);
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  transformerEnSuggestions(strings) {
    return strings.map((str) => ({
      title: str
    }));
  }
  async openTitlePicker(notePath) {
    const fullNotePath = notePath + ".md";
    const file = this.app.vault.getAbstractFileByPath(fullNotePath);
    if (!file) {
      new import_obsidian.Notice("Note not found!");
      return;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      new import_obsidian.Notice("Invalid file type. Expected a TFile.");
      return;
    }
    const content = await this.app.vault.read(file);
    const titles = this.getTitlesFromNote(content);
    if (titles.length === 0) {
      new import_obsidian.Notice("No titles found in the note!");
      return;
    }
    new MySuggestModal(this.app, this.transformerEnSuggestions(titles), (title) => {
      this.insertRandomEntry(content, title);
    }).open();
  }
  getTitlesFromNote(content) {
    const titleRegex = /^#+\s+(.+)$/gm;
    const titles = [];
    let match;
    while ((match = titleRegex.exec(content)) !== null) {
      titles.push(match[1]);
    }
    return titles;
  }
  async insertRandomEntry(content, title) {
    const entries = this.getEntriesFromNote(content, title);
    if (entries.length === 0) {
      new import_obsidian.Notice("No entries found for this title!");
      return;
    }
    const randomEntry = entries[Math.floor(Math.random() * entries.length)].replace(/\n/g, "");
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const selection = editor.getSelection();
      editor.replaceSelection(randomEntry);
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
  }
  getEntriesFromNote(content, title) {
    const titleRegex = new RegExp(`^#+\\s+${title}$`, "m");
    const titleMatch = titleRegex.exec(content);
    if (!titleMatch) {
      return [];
    }
    const startIndex = titleMatch.index + titleMatch[0].length;
    let endIndex = content.indexOf("\n#", startIndex);
    if (endIndex === -1) {
      endIndex = content.length;
    }
    const listItemRegex = /^(-|\d+\.) +(.+)$/gm;
    const entries = [];
    let currentEntry;
    let currentEntrySplit;
    let repeat;
    let itemString;
    const listContent = content.substring(startIndex, endIndex);
    while ((currentEntry = listItemRegex.exec(listContent)) !== null) {
      let fullString = currentEntry[2];
      const itemWithNumberRegEx = /^\((\d+)\)\s+(.+)$/m;
      if ((currentEntrySplit = itemWithNumberRegEx.exec(fullString)) !== null) {
        repeat = Number(currentEntrySplit[1]);
        itemString = currentEntrySplit[2];
      } else {
        repeat = 1;
        itemString = fullString;
      }
      for (let i = 0; i < repeat; i++) {
        entries.push(itemString);
      }
    }
    return entries;
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc("Path to the note containing the lists.").addText((text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
      this.plugin.settings.notePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU3VnZ2VzdE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xuICAgIG5vdGVQYXRoOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgbm90ZVBhdGg6ICdGdWxsIHBhdGggb2YgYSBub3RlJ1xufTtcblxuaW50ZXJmYWNlIExJUlBJdGVtIHtcbiAgICB0aXRsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgTXlTdWdnZXN0TW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8TElSUEl0ZW0+IHtcbiAgICBpdGVtczogTElSUEl0ZW1bXTtcbiAgICBjYWxsYmFjazogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIFxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpdGVtczogTElSUEl0ZW1bXSwgY2FsbGJhY2s6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICBzdXBlcihhcHApO1xuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBMSVJQSXRlbVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PlxuICAgICAgICAgIGl0ZW0udGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIFxuICAgIHJlbmRlclN1Z2dlc3Rpb24oaXRlbTogTElSUEl0ZW0sIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBlbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBpdGVtLnRpdGxlIH0pO1xuICAgICAgfVxuICBcbiAgICAgIG9uQ2hvb3NlU3VnZ2VzdGlvbihpdGVtOiBMSVJQSXRlbSwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrKGl0ZW0udGl0bGUpO1xuICAgICAgfX0gIFxuXG5jbGFzcyBJdGVtUGlja2VyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgaXRlbXM6IHN0cmluZ1tdO1xuICAgIGNhbGxiYWNrOiAoaXRlbTogc3RyaW5nKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGl0ZW1zOiBzdHJpbmdbXSwgY2FsbGJhY2s6IChpdGVtOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblxuICAgICAgICAvLyBDb25maWd1cmF0aW9uIGR1IGNvbnRlbmV1ciBGbGV4Ym94XG4gICAgICAgIGNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICBjb250ZW50RWwuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xuICAgICAgICBjb250ZW50RWwuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOyAvLyBBc3N1cmV6LXZvdXMgcXVlIGxlIGNvbnRlbmV1ciBwcmVuZCB0b3V0ZSBsYSBoYXV0ZXVyXG5cbiAgICAgICAgLy8gQ29udGVuZXVyIHBvdXIgbGUgc1x1MDBFOWxlY3RldXIgKHByZW5kcmEgbCdlc3BhY2UgcmVzdGFudClcbiAgICAgICAgY29uc3Qgc2VsZWN0Q29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdigpO1xuICAgICAgICBzZWxlY3RDb250YWluZXIuc3R5bGUuZmxleEdyb3cgPSAnMSc7IC8vIFByZW5kIGwnZXNwYWNlIGRpc3BvbmlibGVcbiAgICAgICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIHNlbGVjdENvbnRhaW5lci5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG4gICAgICAgIHNlbGVjdENvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInOyAvLyBDZW50cmUgdmVydGljYWxlbWVudCBsZSBzZWxlY3RcbiAgICAgICAgc2VsZWN0Q29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJzsgLy8gQ2VudHJlIGhvcml6b250YWxlbWVudCBsZSBzZWxlY3RcblxuICAgICAgICBjb25zdCBpdGVtU2VsZWN0ID0gc2VsZWN0Q29udGFpbmVyLmNyZWF0ZUVsKCdzZWxlY3QnKTtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaXRlbVNlbGVjdC5jcmVhdGVFbCgnb3B0aW9uJywgeyB2YWx1ZTogaXRlbSwgdGV4dDogaXRlbSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ29udGVuZXVyIHBvdXIgbGUgYm91dG9uIChlbiBiYXMsIGNlbnRyXHUwMEU5KVxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICBidXR0b25Db250YWluZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJzsgLy8gQ2VudHJlIGhvcml6b250YWxlbWVudCBsZSBib3V0b25cbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAnMTBweCAwJzsgLy8gQWpvdXRlIHVuIHBldSBkJ2VzcGFjZSBhdXRvdXIgZHUgYm91dG9uXG5cbiAgICAgICAgY29uc3Qgb2tCdXR0b24gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ09LJyB9KTtcbiAgICAgICAgb2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW0gPSBpdGVtU2VsZWN0LnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhzZWxlY3RlZEl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0SXRlbVJhbmRvbVBpY2tlciBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdsaXN0LXRyZWUnLCAnUGljayByYW5kb20gbGlzdCBpdGVtJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vcGVuVGl0bGVQaWNrZXIodGhpcy5zZXR0aW5ncy5ub3RlUGF0aCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgTElSUFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpIHtcblxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybWVyRW5TdWdnZXN0aW9ucyhzdHJpbmdzOiBzdHJpbmdbXSk6IExJUlBJdGVtW10ge1xuICAgICAgICByZXR1cm4gc3RyaW5ncy5tYXAoc3RyID0+ICh7XG4gICAgICAgICAgdGl0bGU6IHN0clxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICBcbiAgICBhc3luYyBvcGVuVGl0bGVQaWNrZXIobm90ZVBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmdWxsTm90ZVBhdGggPSBub3RlUGF0aCArICcubWQnO1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZ1bGxOb3RlUGF0aCk7XG5cbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdOb3RlIG5vdCBmb3VuZCEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ludmFsaWQgZmlsZSB0eXBlLiBFeHBlY3RlZCBhIFRGaWxlLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIGNvbnN0IHRpdGxlcyA9IHRoaXMuZ2V0VGl0bGVzRnJvbU5vdGUoY29udGVudCk7XG5cbiAgICAgICAgaWYgKHRpdGxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIHRpdGxlcyBmb3VuZCBpbiB0aGUgbm90ZSEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBuZXcgTXlTdWdnZXN0TW9kYWwodGhpcy5hcHAsIHRoaXMudHJhbnNmb3JtZXJFblN1Z2dlc3Rpb25zKHRpdGxlcyksICh0aXRsZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRSYW5kb21FbnRyeShjb250ZW50LCB0aXRsZSk7XG4gICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgXG5cbiAgICAgICAgLy8gbmV3IEl0ZW1QaWNrZXJNb2RhbCh0aGlzLmFwcCwgdGl0bGVzLCAodGl0bGUpID0+IHtcbiAgICAgICAgLy8gICAgIHRoaXMuaW5zZXJ0UmFuZG9tRW50cnkoY29udGVudCwgdGl0bGUpO1xuICAgICAgICAvLyB9KS5vcGVuKCk7XG4gICAgfVxuXG4gICAgZ2V0VGl0bGVzRnJvbU5vdGUoY29udGVudDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCB0aXRsZVJlZ2V4ID0gL14jK1xccysoLispJC9nbTtcbiAgICAgICAgY29uc3QgdGl0bGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgbWF0Y2g7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSB0aXRsZVJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aXRsZXMucHVzaChtYXRjaFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpdGxlcztcbiAgICB9XG5cbiAgICBhc3luYyBpbnNlcnRSYW5kb21FbnRyeShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5nZXRFbnRyaWVzRnJvbU5vdGUoY29udGVudCwgdGl0bGUpO1xuXG4gICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gZW50cmllcyBmb3VuZCBmb3IgdGhpcyB0aXRsZSEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYW5kb21FbnRyeSA9IGVudHJpZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW50cmllcy5sZW5ndGgpXS5yZXBsYWNlKC9cXG4vZywgJycpO1xuICAgICAgICAvLyBjb25zdCByYW5kb21FbnRyeSA9IGVudHJpZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW50cmllcy5sZW5ndGgpXS50cmltKCk7XG5cbiAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24ocmFuZG9tRW50cnkpO1xuICAgICAgICAgICAgLy8gY29uc3QgcG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICAvLyBlZGl0b3IucmVwbGFjZVJhbmdlKHJhbmRvbUVudHJ5LCBwb3NpdGlvbik7IC8vLCBwb3NpdGlvbik7XG5cbiAgICAgICAgICAgIC8vIC8vIERcdTAwRTlwbGFjZXIgbGUgY3Vyc2V1ciBcdTAwRTAgbGEgZmluIGRlIGwnaW5zZXJ0aW9uXG4gICAgICAgICAgICAvLyBjb25zdCBuZXdQb3NpdGlvbiA9IHsgbGluZTogcG9zaXRpb24ubGluZSwgY2g6IHBvc2l0aW9uLmNoICsgcmFuZG9tRW50cnkubGVuZ3RoIH07XG4gICAgICAgICAgICAvLyBlZGl0b3Iuc2V0Q3Vyc29yKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBhY3RpdmUgTWFya2Rvd24gZWRpdG9yIGZvdW5kLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEVudHJpZXNGcm9tTm90ZShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IHRpdGxlUmVnZXggPSBuZXcgUmVnRXhwKGBeIytcXFxccyske3RpdGxlfSRgLCAnbScpO1xuICAgICAgICBjb25zdCB0aXRsZU1hdGNoID0gdGl0bGVSZWdleC5leGVjKGNvbnRlbnQpO1xuXG4gICAgICAgIGlmICghdGl0bGVNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHRpdGxlTWF0Y2guaW5kZXggKyB0aXRsZU1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgbGV0IGVuZEluZGV4ID0gY29udGVudC5pbmRleE9mKCdcXG4jJywgc3RhcnRJbmRleCk7XG4gICAgICAgIGlmIChlbmRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGVuZEluZGV4ID0gY29udGVudC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0SXRlbVJlZ2V4ID0gL14oLXxcXGQrXFwuKSArKC4rKSQvZ207XG4gICAgICAgIGNvbnN0IGVudHJpZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGxldCBjdXJyZW50RW50cnk7XG4gICAgICAgIGxldCBjdXJyZW50RW50cnlTcGxpdDtcbiAgICAgICAgbGV0IHJlcGVhdDogbnVtYmVyO1xuICAgICAgICBsZXQgaXRlbVN0cmluZzogc3RyaW5nO1xuICAgICAgICBjb25zdCBsaXN0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgd2hpbGUgKChjdXJyZW50RW50cnkgPSBsaXN0SXRlbVJlZ2V4LmV4ZWMobGlzdENvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGZ1bGxTdHJpbmcgPSBjdXJyZW50RW50cnlbMl07XG4gICAgICAgICAgICBjb25zdCBpdGVtV2l0aE51bWJlclJlZ0V4ID0gL15cXCgoXFxkKylcXClcXHMrKC4rKSQvbTtcbiAgICAgICAgICAgIGlmICgoY3VycmVudEVudHJ5U3BsaXQgPSBpdGVtV2l0aE51bWJlclJlZ0V4LmV4ZWMoZnVsbFN0cmluZykpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVwZWF0ID0gTnVtYmVyKGN1cnJlbnRFbnRyeVNwbGl0WzFdKTtcbiAgICAgICAgICAgICAgICBpdGVtU3RyaW5nID0gY3VycmVudEVudHJ5U3BsaXRbMl07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcGVhdCA9IDE7XG4gICAgICAgICAgICAgICAgaXRlbVN0cmluZyA9IGZ1bGxTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcGVhdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGl0ZW1TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgIH1cbn1cblxuY2xhc3MgTElSUFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IExpc3RJdGVtUmFuZG9tUGlja2VyO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTGlzdEl0ZW1SYW5kb21QaWNrZXIpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnU2V0dGluZ3MgZm9yIExpc3QgSXRlbSBSYW5kb20gUGlja2VyLicgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTm90ZSBQYXRoJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdQYXRoIHRvIHRoZSBub3RlIGNvbnRhaW5pbmcgdGhlIGxpc3RzLicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHRoZSBwYXRoIHRvIHlvdXIgbm90ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVQYXRoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVBhdGggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBeUc7QUFNekcsSUFBTSxtQkFBcUM7QUFBQSxFQUN2QyxVQUFVO0FBQ2Q7QUFNTyxJQUFNLGlCQUFOLGNBQTZCLDZCQUF1QjtBQUFBLEVBSXZELFlBQVksS0FBVSxPQUFtQixVQUFtQztBQUMxRSxVQUFNLEdBQUc7QUFDVCxTQUFLLFFBQVE7QUFDYixTQUFLLFdBQVc7QUFBQSxFQUNsQjtBQUFBLEVBRUEsZUFBZSxPQUEyQjtBQUN0QyxXQUFPLEtBQUssTUFBTTtBQUFBLE1BQU8sQ0FBQyxTQUN4QixLQUFLLE1BQU0sWUFBWSxFQUFFLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFBQSxJQUN2RDtBQUFBLEVBQ0Y7QUFBQSxFQUVGLGlCQUFpQixNQUFn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
