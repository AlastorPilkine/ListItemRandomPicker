/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
var DEFAULT_SETTINGS = {
  notePath: "Full path of a note"
};
var LIRPList = class {
  constructor(lines) {
    this.items = [];
    this.warning = [];
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    lines.splice(0, 1);
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push("No list items in note");
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      this.description = cleanLines.slice(0, listBeginIndexes[0] - 1).join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      this.items.push(cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]).join("\n"));
    }
    this.items.push(cleanLines.slice(listBeginIndexes[listBeginCount - 1]).join("\n"));
  }
  pickRandomItem() {
    if (this.items.length > 0) {
      return this.items[Math.floor(Math.random() * this.items.length)];
    } else {
      return "";
    }
  }
};
var LIRPNote = class {
  constructor(app) {
    this.fullPath = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.app = app;
  }
  async loadFromNote(noteFullPath) {
    this.fullPath = noteFullPath;
    const file = this.app.vault.getAbstractFileByPath(noteFullPath);
    if (!file) {
      this.error.push("Note not found!");
      return false;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      this.error.push("Invalid file type. Expected a Markdown note file.");
      return false;
    }
    const content = await this.app.vault.cachedRead(file);
    const lines = content.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push("No heading in note");
      return false;
    }
    let headingBegin = 0;
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0] - 1).join("\n");
      headingBegin = headingIndexes[0];
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = headingBegin; currentIndex < headingCount - 1; currentIndex++) {
      this.list.push(new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1])));
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1])));
    return true;
  }
  getListSuggestion() {
    let listSuggestion;
    listSuggestion = [];
    this.list.forEach((element) => {
      listSuggestion.push({
        title: element.title,
        description: element.description
      });
    });
    return listSuggestion;
  }
  pickRandomItemFromList(listTitle) {
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      return currentList.pickRandomItem();
    } else {
      return "";
    }
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item.title);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob(this.settings.notePath + ".md");
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob(this.settings.notePath + ".md");
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob(fullNotePath) {
    const currentLIRP = new LIRPNote(this.app);
    const loadSuccess = await currentLIRP.loadFromNote(fullNotePath);
    if (!loadSuccess) {
      currentLIRP.error.forEach((element) => new import_obsidian.Notice(element));
      return;
    }
    new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (title) => {
      this.insertString(currentLIRP.pickRandomItemFromList(title));
    }).open();
  }
  insertString(currentString) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const selection = editor.getSelection();
      editor.replaceSelection(currentString);
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc("Path to the note containing the lists.").addText((text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
      this.plugin.settings.notePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
