/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Path of a note or a folder",
  showWarning: true,
  maxMacroDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true
};
var DiceRoller = class {
  checkDice(diceString) {
    const diceRegex = /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i;
    return diceRegex.test(diceString);
  }
  rollDice(diceString) {
    if (!this.checkDice(diceString)) {
      throw new Error("Syntaxe de lancer de d\xE9s invalide.");
    }
    const [_, countStr, sidesStr, modifierStr, explodeStr, keepStr, keepLowStr] = diceString.match(
      /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i
    );
    const count = parseInt(countStr || "1");
    const sides = parseInt(sidesStr);
    const modifier = parseInt(modifierStr || "0");
    const explode = !!explodeStr;
    const keep = keepStr ? parseInt(keepStr.slice(1)) : void 0;
    const keepLow = keepLowStr ? parseInt(keepLowStr.slice(2)) : void 0;
    let results = [];
    for (let i = 0; i < count; i++) {
      let result = Math.floor(Math.random() * sides) + 1;
      results.push(result);
      if (explode) {
        while (result === sides) {
          result = Math.floor(Math.random() * sides) + 1;
          results.push(result);
        }
      }
    }
    if (keep) {
      results.sort((a, b) => b - a);
      results = results.slice(0, keep);
    } else if (keepLow) {
      results.sort((a, b) => a - b);
      results = results.slice(0, keepLow);
    }
    const sum = results.reduce((acc, val) => acc + val, 0);
    return sum + modifier;
  }
  /**
   * Remplace les lancers de dés encadrés par des délimiteurs dans une chaîne multi-lignes.
   *
   * @param {string} text Le texte multi-lignes contenant les lancers de dés.
   * @param {string} startDelimiter Le délimiteur de début des lancers de dés.
   * @param {string} endDelimiter Le délimiteur de fin des lancers de dés.
   * @returns {string} Le texte avec les lancers de dés remplacés par leurs résultats.
   */
  replaceDiceRolls(text, startDelimiter, endDelimiter) {
    const regex = new RegExp(
      `${this.escapeRegExp(startDelimiter)}([^${this.escapeRegExp(
        startDelimiter + endDelimiter
      )}]+)${this.escapeRegExp(endDelimiter)}`,
      "g"
    );
    return text.replace(regex, (match, diceString) => {
      try {
        const result = this.rollDice(diceString);
        return result.toString();
      } catch (error) {
        return match;
      }
    });
  }
  /**
   * Échappe les caractères spéciaux pour une utilisation dans une expression régulière.
   *
   * @param {string} string La chaîne de caractères à échapper.
   * @returns {string} La chaîne de caractères échappée.
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
var LIRPList = class {
  constructor(lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.rollDice = true;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  getListTitles() {
    let listTitles = [];
    this.list.map((element) => {
      listTitles.push(element.title);
    });
    return listTitles;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No list defined in note "${noteName}"`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      const currentList = new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString);
      if (this.getListTitles().contains(currentList.title)) {
        this.warning.push(`A list named "${currentList.title}" already exists in notes "${noteName}, ignoring"`);
      } else {
        this.list.push(currentList);
      }
      ;
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString));
    return true;
  }
  getListSuggestion(withHidden = false) {
    const noteSuggestion = new LIRPSuggestionList();
    this.list.forEach((element) => {
      if (withHidden || element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  execReferenceSubstitution(item) {
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], false);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: listTitle,
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < this.referenceMaxDepth; repeat++) {
        returnOfExecMacro = this.execReferenceSubstitution(randomItem);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && workOnReference) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    if (workOnReference && this.rollDice) {
      const diceRoller = new DiceRoller();
      return diceRoller.replaceDiceRolls(randomItem, "{", "}");
    } else {
      return randomItem;
    }
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    const status = currentNote.loadFromNote(noteName, noteContent);
    this.multiNote.push(currentNote);
    return status;
  }
  getNoteByName(noteName) {
    return this.multiNote.find((element) => element.noteName === noteName);
  }
  getListSuggestion(withHidden = false) {
    let allListSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      allListSuggestion = allListSuggestion.concat(element.getListSuggestion());
    });
    return allListSuggestion;
  }
  getNoteSuggestion(withHidden = false) {
    let noteSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      if (element.getListSuggestion(withHidden).length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    return superNote.pickRandomItemFromList(listTitle);
  }
  getError() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getError();
    } else {
      let allError = [];
      this.multiNote.map((element) => {
        allError = allError.concat(element.getError());
      });
      return allError;
    }
  }
  getWarning() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getWarning();
    } else {
      let allWarning = [];
      this.multiNote.map((element) => {
        allWarning = allWarning.concat(element.getWarning());
      });
      return allWarning;
    }
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestionList = class {
  constructor() {
    this.list = [];
  }
  push(element) {
    this.list.push(element);
  }
  filterByNoteName(noteName) {
    const filterList = new LIRPSuggestionList();
    this.list.map((element) => {
      if (element.noteName === noteName) {
        filterList.push(element);
      }
    });
    return filterList;
  }
  filter(callback) {
    const filteredList = new LIRPSuggestionList();
    for (let i = 0; i < this.list.length; i++) {
      if (callback(this.list[i], i, this.list)) {
        filteredList.push(this.list[i]);
      }
    }
    return filteredList;
  }
  concat(otherList) {
    const newList = new LIRPSuggestionList();
    newList.list = this.list.concat(otherList.list);
    return newList;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    ).list;
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob();
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob();
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue, this.settings.maxMacroDepth);
    let loadWithoutError = true;
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        loadWithoutError = currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content) && loadWithoutError;
      }
      ;
    }
    ;
    if (!loadWithoutError) {
      currentLIRP.getError().map((element) => {
        new import_obsidian.Notice(element);
      });
      if (currentLIRP.length === 0) {
        return;
      }
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    if (currentLIRP.length === 0) {
      new import_obsidian.Notice('Error : check settings "Path " in plugin List Item Random Picker !');
      return;
    } else if (currentLIRP.length === 1) {
      new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
        this.workWithTitle(currentLIRP, item.title);
      }).open();
    } else {
      if (this.settings.showNoteSelector) {
        new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (item) => {
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion().filterByNoteName(item.noteName), (item2) => {
            this.workWithTitle(currentLIRP, item2.title);
          }).open();
        }).open();
      } else {
        new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
          this.workWithTitle(currentLIRP, item.title);
        }).open();
      }
      ;
    }
    ;
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getFiles();
    let filesInNotePath = [];
    const notePathRegex = new RegExp(`^${notePath}(/.+)?.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      }
      ;
    });
    return filesInNotePath;
  }
  workWithTitle(Note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const editor = activeView.editor;
      const selection = editor.getSelection();
      if (noticeRegex.test(selection)) {
        new import_obsidian.Notice(Note.pickRandomItemFromList(listTitle));
        if (this.settings.deleteSelectionForNotification) {
          editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note.pickRandomItemFromList(listTitle));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note.pickRandomItemFromList(listTitle);
        }
        editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
    ;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Note setting" });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Interface settings" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "List settings" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of an item has this value, the line is flush.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("If you want some headin one or first level list item in your item, you could escape them with these value").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Selection settings" });
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the text selected has this value, the item is not inserted, but notified !").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delete selection value for notification").setDesc("If set, the selected value for notification is deleted.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Technical settings" });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgQXBwLCBTdWdnZXN0TW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSwgVEZvbGRlciwgTWFya2Rvd25WaWV3fSBmcm9tICdvYnNpZGlhbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleGVzPFQ+KGFuQXJyYXk6IFRbXSwgcHJlZGljYXRlOiAoZWxlbWVudDogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICBjb25zdCBpbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFuQXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCwgaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cmluZ1RvRXNjYXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdUb0VzY2FwZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuaW50ZXJmYWNlIExJUlBQbHVnaW5TZXR0aW5ncyB7XG4gICAgbm90ZVBhdGg6IHN0cmluZztcbiAgICBzaG93V2FybmluZzogYm9vbGVhbjtcbiAgICBtYXhNYWNyb0RlcHRoOiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBib29sZWFuO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVZhbHVlOiBzdHJpbmc7XG4gICAgc2hvd05vdGVTZWxlY3RvcjogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTElSUFBsdWdpblNldHRpbmdzID0ge1xuICAgIG5vdGVQYXRoOiAnUGF0aCBvZiBhIG5vdGUgb3IgYSBmb2xkZXInLFxuICAgIHNob3dXYXJuaW5nOiB0cnVlLFxuICAgIG1heE1hY3JvRGVwdGg6IDEsXG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiAnIScsXG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICBudWxsVmFsdWU6ICdudWxsJyxcbiAgICBlc2NhcGVWYWx1ZTogJy8vJyxcbiAgICBzaG93Tm90ZVNlbGVjdG9yOiB0cnVlLFxufTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY2xhc3MgRGljZVJvbGxlciB7XG4gICAgY2hlY2tEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZGljZVJlZ2V4ID0gL14oXFxkKyk/ZChcXGQrKShbXFwrXFwtXVxcZCspPyhlKT8oa1xcZCspPyhrbFxcZCspPyQvaTtcbiAgICAgIHJldHVybiBkaWNlUmVnZXgudGVzdChkaWNlU3RyaW5nKTtcbiAgICB9XG4gIFxuICAgIHJvbGxEaWNlKGRpY2VTdHJpbmc6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tEaWNlKGRpY2VTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bnRheGUgZGUgbGFuY2VyIGRlIGRcdTAwRTlzIGludmFsaWRlLlwiKTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBbXywgY291bnRTdHIsIHNpZGVzU3RyLCBtb2RpZmllclN0ciwgZXhwbG9kZVN0ciwga2VlcFN0ciwga2VlcExvd1N0cl0gPVxuICAgICAgICBkaWNlU3RyaW5nLm1hdGNoKFxuICAgICAgICAgIC9eKFxcZCspP2QoXFxkKykoW1xcK1xcLV1cXGQrKT8oZSk/KGtcXGQrKT8oa2xcXGQrKT8kL2lcbiAgICAgICAgKSBhcyBSZWdFeHBNYXRjaEFycmF5O1xuICBcbiAgICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQoY291bnRTdHIgfHwgXCIxXCIpO1xuICAgICAgY29uc3Qgc2lkZXMgPSBwYXJzZUludChzaWRlc1N0cik7XG4gICAgICBjb25zdCBtb2RpZmllciA9IHBhcnNlSW50KG1vZGlmaWVyU3RyIHx8IFwiMFwiKTtcbiAgICAgIGNvbnN0IGV4cGxvZGUgPSAhIWV4cGxvZGVTdHI7XG4gICAgICBjb25zdCBrZWVwID0ga2VlcFN0ciA/IHBhcnNlSW50KGtlZXBTdHIuc2xpY2UoMSkpIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3Qga2VlcExvdyA9IGtlZXBMb3dTdHIgPyBwYXJzZUludChrZWVwTG93U3RyLnNsaWNlKDIpKSA6IHVuZGVmaW5lZDtcbiAgXG4gICAgICBsZXQgcmVzdWx0czogbnVtYmVyW10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2lkZXMpICsgMTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gIFxuICAgICAgICBpZiAoZXhwbG9kZSkge1xuICAgICAgICAgIHdoaWxlIChyZXN1bHQgPT09IHNpZGVzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzaWRlcykgKyAxO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgaWYgKGtlZXApIHtcbiAgICAgICAgcmVzdWx0cy5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIGtlZXApO1xuICAgICAgfSBlbHNlIGlmIChrZWVwTG93KSB7XG4gICAgICAgIHJlc3VsdHMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBrZWVwTG93KTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBzdW0gPSByZXN1bHRzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCk7XG4gICAgICByZXR1cm4gc3VtICsgbW9kaWZpZXI7XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBSZW1wbGFjZSBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyBlbmNhZHJcdTAwRTlzIHBhciBkZXMgZFx1MDBFOWxpbWl0ZXVycyBkYW5zIHVuZSBjaGFcdTAwRUVuZSBtdWx0aS1saWduZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBMZSB0ZXh0ZSBtdWx0aS1saWduZXMgY29udGVuYW50IGxlcyBsYW5jZXJzIGRlIGRcdTAwRTlzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydERlbGltaXRlciBMZSBkXHUwMEU5bGltaXRldXIgZGUgZFx1MDBFOWJ1dCBkZXMgbGFuY2VycyBkZSBkXHUwMEU5cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5kRGVsaW1pdGVyIExlIGRcdTAwRTlsaW1pdGV1ciBkZSBmaW4gZGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGUgdGV4dGUgYXZlYyBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cyByZW1wbGFjXHUwMEU5cyBwYXIgbGV1cnMgclx1MDBFOXN1bHRhdHMuXG4gICAgICovXG4gICAgcmVwbGFjZURpY2VSb2xscyhcbiAgICAgIHRleHQ6IHN0cmluZyxcbiAgICAgIHN0YXJ0RGVsaW1pdGVyOiBzdHJpbmcsXG4gICAgICBlbmREZWxpbWl0ZXI6IHN0cmluZ1xuICAgICk6IHN0cmluZyB7XG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgIGAke3RoaXMuZXNjYXBlUmVnRXhwKHN0YXJ0RGVsaW1pdGVyKX0oW14ke3RoaXMuZXNjYXBlUmVnRXhwKFxuICAgICAgICAgIHN0YXJ0RGVsaW1pdGVyICsgZW5kRGVsaW1pdGVyXG4gICAgICAgICl9XSspJHt0aGlzLmVzY2FwZVJlZ0V4cChlbmREZWxpbWl0ZXIpfWAsXG4gICAgICAgIFwiZ1wiXG4gICAgICApO1xuICBcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocmVnZXgsIChtYXRjaCwgZGljZVN0cmluZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucm9sbERpY2UoZGljZVN0cmluZyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaDsgLy8gU2kgbGEgc3ludGF4ZSBlc3QgaW52YWxpZGUsIG9uIGdhcmRlIGxlIHRleHRlIGQnb3JpZ2luZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIFxuICAgIC8qKlxuICAgICAqIFx1MDBDOWNoYXBwZSBsZXMgY2FyYWN0XHUwMEU4cmVzIHNwXHUwMEU5Y2lhdXggcG91ciB1bmUgdXRpbGlzYXRpb24gZGFucyB1bmUgZXhwcmVzc2lvbiByXHUwMEU5Z3VsaVx1MDBFOHJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBMYSBjaGFcdTAwRUVuZSBkZSBjYXJhY3RcdTAwRThyZXMgXHUwMEUwIFx1MDBFOWNoYXBwZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gTGEgY2hhXHUwMEVFbmUgZGUgY2FyYWN0XHUwMEU4cmVzIFx1MDBFOWNoYXBwXHUwMEU5ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGVzY2FwZVJlZ0V4cChzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gIH1cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW50ZXJmYWNlIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaXRlbXM6IHN0cmluZ1tdO1xuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlO1xuICAgIG5vdEhpZGRlbigpOiBib29sZWFuO1xuICAgIHBpY2tSYW5kb21JdGVtKCk6IHN0cmluZztcbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdO1xufVxuXG5jbGFzcyBMSVJQTGlzdCBpbXBsZW1lbnRzIExJUlBMaXN0SW50ZXJmYWNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICB3YXJuaW5nOiBzdHJpbmdbXTtcbiAgICBudWxsVmFsdWU6IHN0cmluZztcbiAgICBlc2NhcGVTdHJpbmc6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGxpbmVzOiBzdHJpbmdbXSwgbnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmcgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuXG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdFeCA9IC9eIyArKC4rKSQvO1xuICAgICAgICB0aGlzLnRpdGxlID0gbGluZXNbMF0ucmVwbGFjZShoZWFkaW5nUmVnRXgsIFwiJDFcIik7XG4gICAgICAgIGNvbnN0IGl0YWxpY0hlYWRpbmdSZWdleCA9IC9eKF98XFwqKVxcUy87XG4gICAgICAgIGlmIChpdGFsaWNIZWFkaW5nUmVnZXgudGVzdCh0aGlzLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5zaGlmdCgpO1xuICAgICAgICBjb25zdCBsaXN0QmVnaW5JdGVtUmVnZXggPSAvXigtfFxcZCtcXC4pICsoLispJC87XG4gICAgICAgIGNvbnN0IGxpc3RCZWdpbkluZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGxpc3RCZWdpbkl0ZW1SZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmcucHVzaChgTm8gaXRlbXMgaW4gbGlzdCAke3RoaXMudGl0bGV9YCk7XG4gICAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xlYW5MaW5lcyA9IGxpbmVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShsaXN0QmVnaW5JdGVtUmVnZXgsIFwiJDJcIilcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaXN0QmVnaW5JbmRleGVzWzBdICE9PSAwKSB7XG4gICAgICAgICAgICBsZXQgbWREZXNjcmlwdGlvbiA9IGNsZWFuTGluZXMuc2xpY2UoMCwgbGlzdEJlZ2luSW5kZXhlc1swXSk7XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAgICAgLy8gICBNRDAyMi9ibGFua3MtYXJvdW5kLWhlYWRpbmdzOiBIZWFkaW5ncyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgaWYgKG1kRGVzY3JpcHRpb25bMF0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBtZERlc2NyaXB0aW9uLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAzMlxuICAgICAgICAgICAgLy8gICBNRDAzMi9ibGFua3MtYXJvdW5kLWxpc3RzOiBMaXN0cyBzaG91bGQgYmUgc3Vycm91bmRlZCBieSBibGFuayBsaW5lc1xuICAgICAgICAgICAgLy8gRHVlIHRvIHNwbGl0IG9uICdcXG4nLCB0aGUgc2xpY2UsIGFuZCBhdCBsZWFzdCBhIGpvaW4gb24gJ1xcbicgdGhlIGxhc3QgJ1xcbicgaXMgYWx3YXlzIGxvc3QgIVxuICAgICAgICAgICAgLy8gU28gdGhlIGZvbG93aW5nIGNvZGUgaXMgdXNlbGVzc1xuICAgICAgICAgICAgLy8gaWYgKG1kRGVzY3JpcHRpb24uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAvLyAgICAgbWREZXNjcmlwdGlvbi5wb3AoKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBtZERlc2NyaXB0aW9uLmpvaW4oJ1xcbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0QmVnaW5Db3VudCA9IGxpc3RCZWdpbkluZGV4ZXMubGVuZ3RoXG4gICAgICAgIGxldCBpdGVtOiBzdHJpbmdbXTtcbiAgICAgICAgZm9yIChsZXQgY3VycmVudEluZGV4ID0gMDsgY3VycmVudEluZGV4IDwgKGxpc3RCZWdpbkNvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBsaXN0QmVnaW5JbmRleGVzW2N1cnJlbnRJbmRleCArIDFdKSk7XG4gICAgICAgICAgICB0aGlzLnB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtID0gKGNsZWFuTGluZXMuc2xpY2UobGlzdEJlZ2luSW5kZXhlc1tsaXN0QmVnaW5Db3VudCAtIDFdKSk7XG4gICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgaWYgKGl0ZW0uYXQoLTEpID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpdGVtLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaEl0ZW1CYXNlZE9uV2VpZ2h0KGl0ZW0pO1xuICAgIH1cblxuICAgIHB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtOiBzdHJpbmdbXSkgOiB2b2lkIHtcbiAgICAgICAgY29uc3QgSXRlbVdpdGhXZWlnaHRSZWdFeCA9IC9eXFwoKFxcZCspXFwpXFxzKyguKykkLztcbiAgICAgICAgbGV0IHJlZ0V4RXhlY3V0aW9uO1xuICAgICAgICBsZXQgcmVwZWF0OiBudW1iZXI7XG4gICAgICAgIGlmICgocmVnRXhFeGVjdXRpb24gPSBJdGVtV2l0aFdlaWdodFJlZ0V4LmV4ZWMoaXRlbVswXSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXBlYXQgPSBOdW1iZXIocmVnRXhFeGVjdXRpb25bMV0pO1xuICAgICAgICAgICAgaXRlbVswXSA9IHJlZ0V4RXhlY3V0aW9uWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwZWF0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbVswXSA9PT0gdGhpcy5udWxsVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGl0ZW1bMF0gPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNoaWZ0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0cmluZ1JlZ2V4ID0gYF4gKiR7dGhpcy5lc2NhcGVTdHJpbmd9KC4qKWA7XG4gICAgICAgIGNvbnN0IGVzY2FwZVN0cmluZ1JlZ0V4ID0gbmV3IFJlZ0V4cChzdHJpbmdSZWdleCwgJ2dtJyk7XG4gICAgICAgIGNvbnN0IGVzY2FwZUl0ZW0gPSBpdGVtLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQucmVwbGFjZShlc2NhcGVTdHJpbmdSZWdFeCwgJyQxJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdHJpbmdJdGVtID0gZXNjYXBlSXRlbS5qb2luKCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXBlYXQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHN0cmluZ0l0ZW0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldFN1Z2dlc3Rpb24obm90ZU5hbWU6IHN0cmluZyk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbiA9IHtcbiAgICAgICAgICAgIG5vdGVOYW1lOiBub3RlTmFtZSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICh0aGlzLmRlc2NyaXB0aW9uLnNwbGl0KCdcXG4nKVswXSksXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb247XG4gICAgfTtcblxuICAgIG5vdEhpZGRlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhpZGRlbjtcbiAgICB9XG5cbiAgICBwaWNrUmFuZG9tSXRlbSgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmFuZG9tSXRlbTogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHRoaXMuaXRlbXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5pdGVtcy5sZW5ndGgpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZG9tSXRlbTtcbiAgICB9XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2FybmluZztcbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIExJUlBFeGVjTWFjcm9JbnRlcmZhY2Uge1xuICAgIGxhc3RMaXN0VGl0bGU6IHN0cmluZztcbiAgICBtb2RpZmllZEl0ZW06IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIExJUlBOb3RlSW50ZXJmYWNlIHtcbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgZ2V0TGlzdFN1Z2dlc3Rpb24oKTogTElSUFN1Z2dlc3Rpb25MaXN0O1xuICAgIHBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlOiBzdHJpbmcsIHdvcmtPblJlZmVyZW5jZTogYm9vbGVhbik6IHN0cmluZzsgXG4gICAgZ2V0RXJyb3IoKTogc3RyaW5nW107XG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgTElSUE5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGxpc3Q6IExJUlBMaXN0W107XG4gICAgZXJyb3I6IHN0cmluZ1tdO1xuICAgIHdhcm5pbmc6IHN0cmluZ1tdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIHJvbGxEaWNlOiBib29sZWFuO1xuICAgIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAobnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nLCByZWZlcmVuY2VNYXhEZXB0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5saXN0ID0gW107XG4gICAgICAgIHRoaXMuZXJyb3IgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgICAgIHRoaXMubnVsbFZhbHVlID0gbnVsbFZhbHVlO1xuICAgICAgICB0aGlzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZztcbiAgICAgICAgdGhpcy5yb2xsRGljZSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlTWF4RGVwdGggPSByZWZlcmVuY2VNYXhEZXB0aDtcbiAgICB9XG5cbiAgICBnZXRMaXN0VGl0bGVzKCkgOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBsaXN0VGl0bGVzOnN0cmluZ1tdID0gW107XG4gICAgICAgIHRoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGxpc3RUaXRsZXMucHVzaChlbGVtZW50LnRpdGxlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsaXN0VGl0bGVzO1xuICAgIH07XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZywgKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBub3RlTmFtZTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBub3RlQ29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdleCA9IC9eIyAuKyQvO1xuICAgICAgICBsZXQgaGVhZGluZ0luZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGhlYWRpbmdSZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGhlYWRpbmdJbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5wdXNoKGBObyBsaXN0IGRlZmluZWQgaW4gbm90ZSBcIiR7bm90ZU5hbWV9XCJgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGluZ0luZGV4ZXNbMF0gIT09IDApIHtcbiAgICAgICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgICAgICAvLyAgIE1EMDIyL2JsYW5rcy1hcm91bmQtaGVhZGluZ3M6IEhlYWRpbmdzIHNob3VsZCBiZSBzdXJyb3VuZGVkIGJ5IGJsYW5rIGxpbmVzXG4gICAgICAgICAgICAvLyBEdWUgdG8gc3BsaXQgb24gJ1xcbicsIHRoZSBzbGljZSwgYW5kIGF0IGxlYXN0IGEgam9pbiBvbiAnXFxuJyB0aGUgbGFzdCAnXFxuJyBpcyBhbHdheXMgbG9zdCAhXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gbGluZXMuc2xpY2UoMCwgaGVhZGluZ0luZGV4ZXNbMF0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRpbmdDb3VudCA9IGhlYWRpbmdJbmRleGVzLmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAwOyBjdXJyZW50SW5kZXggPCAoaGVhZGluZ0NvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXhdLCBoZWFkaW5nSW5kZXhlc1tjdXJyZW50SW5kZXggKyAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZyk7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRMaXN0VGl0bGVzKCkuY29udGFpbnMoY3VycmVudExpc3QudGl0bGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXJuaW5nLnB1c2goYEEgbGlzdCBuYW1lZCBcIiR7Y3VycmVudExpc3QudGl0bGV9XCIgYWxyZWFkeSBleGlzdHMgaW4gbm90ZXMgXCIke25vdGVOYW1lfSwgaWdub3JpbmdcImApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChjdXJyZW50TGlzdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdC5wdXNoKG5ldyBMSVJQTGlzdChsaW5lcy5zbGljZShoZWFkaW5nSW5kZXhlc1toZWFkaW5nQ291bnQgLSAxXSksIHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZykpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW46IGJvb2xlYW4gPSBmYWxzZSk6IExJUlBTdWdnZXN0aW9uTGlzdCB7XG4gICAgICAgIGNvbnN0IG5vdGVTdWdnZXN0aW9uID0gbmV3IExJUlBTdWdnZXN0aW9uTGlzdCgpO1xuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHdpdGhIaWRkZW4gfHwgZWxlbWVudC5ub3RIaWRkZW4oKSkge1xuICAgICAgICAgICAgICAgIG5vdGVTdWdnZXN0aW9uLnB1c2goZWxlbWVudC5nZXRTdWdnZXN0aW9uKHRoaXMubm90ZU5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub3RlU3VnZ2VzdGlvbjtcbiAgICB9XG5cbiAgICBleGVjUmVmZXJlbmNlU3Vic3RpdHV0aW9uKGl0ZW06IHN0cmluZyk6IExJUlBFeGVjTWFjcm9JbnRlcmZhY2Uge1xuICAgICAgICBjb25zdCBzdHJpbmdNYWNyb1JlZlJlZ2V4OiBzdHJpbmcgPSBgXFx7KCR7dGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4gZXNjYXBlUmVnZXgoZWxlbWVudC50aXRsZSkpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgsJ21nJyk7XG4gICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgbGV0IG1vZGlmaWVkSXRlbTpzdHJpbmcgPSBpdGVtO1xuICAgICAgICBsZXQgbGlzdFRpdGxlOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSBtYWNyb1JlZlJlZ2V4LmV4ZWMobW9kaWZpZWRJdGVtKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBuZXdWYWx1ZTogc3RyaW5nID0gdGhpcy5waWNrUmFuZG9tSXRlbUZyb21MaXN0KG1hdGNoWzFdLCBmYWxzZSk7IFxuICAgICAgICAgICAgbGlzdFRpdGxlID0gbWF0Y2hbMF07XG4gICAgICAgICAgICBtb2RpZmllZEl0ZW0gPSBtb2RpZmllZEl0ZW0ucmVwbGFjZShsaXN0VGl0bGUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIG1hY3JvUmVmUmVnZXgubGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBuZXdWYWx1ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhc3RMaXN0VGl0bGU6IGxpc3RUaXRsZSxcbiAgICAgICAgICAgIG1vZGlmaWVkSXRlbTogbW9kaWZpZWRJdGVtLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlOiBzdHJpbmcsIHdvcmtPblJlZmVyZW5jZTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmFuZG9tSXRlbTogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgbGV0IHJldHVybk9mRXhlY01hY3JvOiBMSVJQRXhlY01hY3JvSW50ZXJmYWNlID0ge1xuICAgICAgICAgICAgbGFzdExpc3RUaXRsZTogbGlzdFRpdGxlLFxuICAgICAgICAgICAgbW9kaWZpZWRJdGVtOiBcIlwiLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IHRoaXMubGlzdC5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50LnRpdGxlID09PSBsaXN0VGl0bGUpO1xuICAgICAgICBpZiAoY3VycmVudExpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmFuZG9tSXRlbSA9IGN1cnJlbnRMaXN0LnBpY2tSYW5kb21JdGVtKCk7XG4gICAgICAgICAgICBmb3IgKGxldCByZXBlYXQgPSAwOyByZXBlYXQgPCB0aGlzLnJlZmVyZW5jZU1heERlcHRoOyByZXBlYXQrKykge1xuICAgICAgICAgICAgICAgIHJldHVybk9mRXhlY01hY3JvID0gdGhpcy5leGVjUmVmZXJlbmNlU3Vic3RpdHV0aW9uKHJhbmRvbUl0ZW0pO1xuICAgICAgICAgICAgICAgIHJhbmRvbUl0ZW0gPSByZXR1cm5PZkV4ZWNNYWNyby5tb2RpZmllZEl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyaW5nTWFjcm9SZWZSZWdleDogc3RyaW5nID0gYFxceygke3RoaXMubGlzdC5tYXAoKGVsZW1lbnQpID0+IGVzY2FwZVJlZ2V4KGVsZW1lbnQudGl0bGUpKS5qb2luKCd8Jyl9KVxcfWA7XG4gICAgICAgIGNvbnN0IG1hY3JvUmVmUmVnZXggPSBuZXcgUmVnRXhwIChzdHJpbmdNYWNyb1JlZlJlZ2V4KTtcbiAgICAgICAgaWYgKG1hY3JvUmVmUmVnZXgudGVzdChyYW5kb21JdGVtKSAmJiB3b3JrT25SZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYE1hY3JvIGRlcHRoIGxpbWl0IHJlYWNoZWQgaW4gbm90ZSBcIiR7dGhpcy5ub3RlTmFtZX1cIiBhZnRlciBjYWxsaW5nIFwiJHtyZXR1cm5PZkV4ZWNNYWNyby5sYXN0TGlzdFRpdGxlfVwiYCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh3b3JrT25SZWZlcmVuY2UgJiYgdGhpcy5yb2xsRGljZSkge1xuICAgICAgICAgICAgY29uc3QgZGljZVJvbGxlciA9IG5ldyBEaWNlUm9sbGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gZGljZVJvbGxlci5yZXBsYWNlRGljZVJvbGxzKHJhbmRvbUl0ZW0sJ3snLCd9Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tSXRlbTtcbiAgICAgICAgfVxuICAgIH0gXG5cbiAgICBnZXRFcnJvcigpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yO1xuICAgIH07XG5cbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGFsbFdhcm5pbmc6IHN0cmluZ1tdO1xuICAgICAgICBhbGxXYXJuaW5nID0gW107XG4gICAgICAgIGFsbFdhcm5pbmcgPSBhbGxXYXJuaW5nLmNvbmNhdCh0aGlzLndhcm5pbmcpO1xuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KGVsZW1lbnQuZ2V0V2FybmluZygpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBOb3RlV2FybmluZzogc3RyaW5nW107XG4gICAgICAgIE5vdGVXYXJuaW5nID0gW107XG4gICAgICAgIGFsbFdhcm5pbmcuZm9yRWFjaCgoZWxlbWVudCkgPT4gXG4gICAgICAgICAgICBOb3RlV2FybmluZy5wdXNoKGBXYXJuaW5nIGluIG5vdGUgXCIke3RoaXMubm90ZU5hbWV9XCIgOiAke2VsZW1lbnR9YClcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIE5vdGVXYXJuaW5nO1xuICAgIH07XG5cbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3QubGVuZ3RoO1xuICAgIH07XG59XG5cbmNsYXNzIExJUlBNdWx0aU5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbXVsdGlOb3RlOiBMSVJQTm90ZVtdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIG5vdGVTZWxlY3RlZDogTElSUE5vdGV8dW5kZWZpbmVkO1xuICAgIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXI7XG5cblxuICAgIGNvbnN0cnVjdG9yIChudWxsVmFsdWU6IHN0cmluZywgZXNjYXBlU3RyaW5nOiBzdHJpbmcsIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuICAgICAgICAvLyB0aGlzLm5vdGVTZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VNYXhEZXB0aCA9IHJlZmVyZW5jZU1heERlcHRoO1xuICAgIH07XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjdXJyZW50Tm90ZSA9IG5ldyBMSVJQTm90ZSh0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcsIHRoaXMucmVmZXJlbmNlTWF4RGVwdGgpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBjdXJyZW50Tm90ZS5sb2FkRnJvbU5vdGUobm90ZU5hbWUsIG5vdGVDb250ZW50KTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUucHVzaChjdXJyZW50Tm90ZSk7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfTtcblxuICAgIGdldE5vdGVCeU5hbWUgKG5vdGVOYW1lOiBzdHJpbmcpOiBMSVJQTm90ZXx1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aU5vdGUuZmluZCgoZWxlbWVudCkgPT4gZWxlbWVudC5ub3RlTmFtZSA9PT0gbm90ZU5hbWUpO1xuICAgIH07XG5cbiAgICBnZXRMaXN0U3VnZ2VzdGlvbih3aXRoSGlkZGVuOiBib29sZWFuID0gZmFsc2UpOiBMSVJQU3VnZ2VzdGlvbkxpc3Qge1xuICAgICAgICBsZXQgYWxsTGlzdFN1Z2dlc3Rpb24gPSBuZXcgTElSUFN1Z2dlc3Rpb25MaXN0KCk7XG4gICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgYWxsTGlzdFN1Z2dlc3Rpb24gPSBhbGxMaXN0U3VnZ2VzdGlvbi5jb25jYXQoZWxlbWVudC5nZXRMaXN0U3VnZ2VzdGlvbigpKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFsbExpc3RTdWdnZXN0aW9uO1xuICAgIH07XG5cbiAgICBnZXROb3RlU3VnZ2VzdGlvbih3aXRoSGlkZGVuOiBib29sZWFuID0gZmFsc2UpOiBMSVJQU3VnZ2VzdGlvbkxpc3Qge1xuICAgICAgICBsZXQgbm90ZVN1Z2dlc3Rpb24gPSBuZXcgTElSUFN1Z2dlc3Rpb25MaXN0O1xuICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmdldExpc3RTdWdnZXN0aW9uKHdpdGhIaWRkZW4pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBub3RlU3VnZ2VzdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZU5hbWU6IGVsZW1lbnQubm90ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbGVtZW50Lm5vdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKGVsZW1lbnQuZGVzY3JpcHRpb24uc3BsaXQoJ1xcbicpWzBdKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm90ZVN1Z2dlc3Rpb247XG4gICAgfTtcblxuICAgIHBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlOiBzdHJpbmcsIHdvcmtPblJlZmVyZW5jZTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc3VwZXJOb3RlID0gbmV3IExJUlBOb3RlKHRoaXMubnVsbFZhbHVlLCB0aGlzLmVzY2FwZVN0cmluZywgdGhpcy5yZWZlcmVuY2VNYXhEZXB0aCk7XG4gICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgc3VwZXJOb3RlLmxpc3QgPSBzdXBlck5vdGUubGlzdC5jb25jYXQoZWxlbWVudC5saXN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdXBlck5vdGUucGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGUpO1xuICAgIH07XG5cbiAgICBnZXRFcnJvcigpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RlU2VsZWN0ZWQuZ2V0RXJyb3IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhbGxFcnJvcjpzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWxsRXJyb3IgPSBhbGxFcnJvci5jb25jYXQoZWxlbWVudC5nZXRFcnJvcigpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFsbEVycm9yO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW10ge1xuICAgICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLmdldFdhcm5pbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhbGxXYXJuaW5nOnN0cmluZ1tdID0gW107XG4gICAgICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBhbGxXYXJuaW5nID0gYWxsV2FybmluZy5jb25jYXQoZWxlbWVudC5nZXRXYXJuaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsV2FybmluZztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpTm90ZS5sZW5ndGg7XG4gICAgfTtcblxufTtcblxuaW50ZXJmYWNlIExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlIHtcbiAgICBub3RlTmFtZTogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuY2xhc3MgTElSUFN1Z2dlc3Rpb25MaXN0IHtcbiAgICBsaXN0OiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xuICAgIH07XG5cbiAgICBwdXNoIChlbGVtZW50OiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmxpc3QucHVzaChlbGVtZW50KTtcbiAgICB9O1xuXG4gICAgZmlsdGVyQnlOb3RlTmFtZShub3RlTmFtZTogc3RyaW5nKTogTElSUFN1Z2dlc3Rpb25MaXN0IHtcbiAgICAgICAgY29uc3QgZmlsdGVyTGlzdCA9IG5ldyBMSVJQU3VnZ2VzdGlvbkxpc3QoKTtcbiAgICAgICAgdGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQubm90ZU5hbWUgPT09IG5vdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyTGlzdC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbHRlckxpc3Q7XG4gICAgfTtcblxuICAgIGZpbHRlcihjYWxsYmFjazogKGVsZW1lbnQ6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlLCBpbmRleD86IG51bWJlciwgYXJyYXk/OiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdKSA9PiBib29sZWFuKTogTElSUFN1Z2dlc3Rpb25MaXN0IHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gbmV3IExJUlBTdWdnZXN0aW9uTGlzdCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKHRoaXMubGlzdFtpXSwgaSwgdGhpcy5saXN0KSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkTGlzdC5wdXNoKHRoaXMubGlzdFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkTGlzdDtcbiAgICB9O1xuXG4gICAgY29uY2F0KG90aGVyTGlzdDogTElSUFN1Z2dlc3Rpb25MaXN0KTogTElSUFN1Z2dlc3Rpb25MaXN0IHtcbiAgICAgICAgY29uc3QgbmV3TGlzdCA9IG5ldyBMSVJQU3VnZ2VzdGlvbkxpc3QoKTtcbiAgICAgICAgbmV3TGlzdC5saXN0ID0gdGhpcy5saXN0LmNvbmNhdChvdGhlckxpc3QubGlzdCk7XG4gICAgICAgIHJldHVybiBuZXdMaXN0O1xuICAgIH07XG5cbiAgICBnZXQgbGVuZ3RoICgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0Lmxlbmd0aDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMSVJQU3VnZ2VzdE1vZGFsIGV4dGVuZHMgU3VnZ2VzdE1vZGFsPExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlPiB7XG4gICAgaXRlbXM6IExJUlBTdWdnZXN0aW9uTGlzdDtcbiAgICBjYWxsYmFjazogKHZhbHVlOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSkgPT4gdm9pZDtcbiAgXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGl0ZW1zOiBMSVJQU3VnZ2VzdGlvbkxpc3QsIGNhbGxiYWNrOiAodmFsdWU6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlKSA9PiB2b2lkKSB7XG4gICAgICBzdXBlcihhcHApO1xuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICkubGlzdDsgLy8gUmV0b3VybmUgbGUgdGFibGVhdSBgbGlzdGAgZGUgTElSUFN1Z2dlc3Rpb25MaXN0XG4gICAgfVxuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSwgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGl0ZW0udGl0bGUgfSk7XG4gICAgICAgIGVsLmNyZWF0ZUVsKCdzbWFsbCcsIHt0ZXh0OiBpdGVtLmRlc2NyaXB0aW9ufSk7XG4gICAgICB9XG4gIFxuICAgICAgb25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soaXRlbSk7XG4gICAgICB9fVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0SXRlbVJhbmRvbVBpY2tlciBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IExJUlBQbHVnaW5TZXR0aW5ncztcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2xpc3QtdHJlZScsICdQaWNrIHJhbmRvbSBsaXN0IGl0ZW0nLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvVGhlSm9iKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2luc2VydC1yYW5kb20taXRlbScsXG4gICAgICAgICAgICBuYW1lOiAnSW5zZXJ0IHJhbmRvbSBpdGVtIGZyb20gbGlzdCcsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9UaGVKb2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBMSVJQU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgZG9UaGVKb2IoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFsbExJUlBGaWxlcyA9IHRoaXMuZ2V0TElSUEZpbGVzKHRoaXMuc2V0dGluZ3Mubm90ZVBhdGgpO1xuICAgICAgICBsZXQgY3VycmVudExJUlAgPSBuZXcgTElSUE11bHRpTm90ZSh0aGlzLnNldHRpbmdzLm51bGxWYWx1ZSwgdGhpcy5zZXR0aW5ncy5lc2NhcGVWYWx1ZSwgdGhpcy5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoKTtcbiAgICAgICAgbGV0IGxvYWRXaXRob3V0RXJyb3I6Ym9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjdXJyZW50RmlsZSBvZiBhbGxMSVJQRmlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGU09iamVjdCA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdXJyZW50RmlsZSk7XG4gICAgICAgICAgICBsZXQgY29udGVudDpzdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGlmIChjdXJyZW50RlNPYmplY3QgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGN1cnJlbnRGU09iamVjdCk7XG4gICAgICAgICAgICAgICAgbG9hZFdpdGhvdXRFcnJvciA9ICBjdXJyZW50TElSUC5sb2FkRnJvbU5vdGUoY3VycmVudEZTT2JqZWN0LnBhdGguc2xpY2UoMCwgLTMpLCBjb250ZW50KSAmJiBsb2FkV2l0aG91dEVycm9yO1xuICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWxvYWRXaXRob3V0RXJyb3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRMSVJQLmdldEVycm9yKCkubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93V2FybmluZykge1xuICAgICAgICAgICAgY3VycmVudExJUlAuZ2V0V2FybmluZygpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoY3VycmVudExJUlAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdFcnJvciA6IGNoZWNrIHNldHRpbmdzIFwiUGF0aCBcIiBpbiBwbHVnaW4gTGlzdCBJdGVtIFJhbmRvbSBQaWNrZXIgIScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gY3VycmVudExJUlAuc2VsZWN0Tm90ZSgnJyk7XG4gICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXROb3RlU3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKS5maWx0ZXJCeU5vdGVOYW1lKGl0ZW0ubm90ZU5hbWUpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JrV2l0aFRpdGxlKGN1cnJlbnRMSVJQLCBpdGVtLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IExJUlBTdWdnZXN0TW9kYWwodGhpcy5hcHAsIGN1cnJlbnRMSVJQLmdldExpc3RTdWdnZXN0aW9uKCksIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRMSVJQLnNlbGVjdE5vdGUoaXRlbS5ub3RlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud29ya1dpdGhUaXRsZShjdXJyZW50TElSUCwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRMSVJQRmlsZXMgKG5vdGVQYXRoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBhbGxWYXVsdEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcbiAgICAgICAgbGV0IGZpbGVzSW5Ob3RlUGF0aDpzdHJpbmdbXSA9IFtdO1xuICAgICAgICBjb25zdCBub3RlUGF0aFJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7bm90ZVBhdGh9KC8uKyk/XFwubWQkYCk7XG4gICAgICAgIGFsbFZhdWx0RmlsZXMubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAobm90ZVBhdGhSZWdleC50ZXN0KGVsZW1lbnQucGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmaWxlc0luTm90ZVBhdGgucHVzaChlbGVtZW50LnBhdGgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmaWxlc0luTm90ZVBhdGg7XG4gICAgfTtcblxuICAgIHdvcmtXaXRoVGl0bGUoTm90ZTogTElSUE11bHRpTm90ZSwgbGlzdFRpdGxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbkZvck5vdGlmaWNhdGlvblJlZ2V4OnN0cmluZyA9IGBeJHt0aGlzLnNldHRpbmdzLnNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbn0kYDtcbiAgICAgICAgICAgIGNvbnN0IG5vdGljZVJlZ2V4ID0gbmV3IFJlZ0V4cChzZWxlY3Rpb25Gb3JOb3RpZmljYXRpb25SZWdleCk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcblxuICAgICAgICAgICAgaWYgKG5vdGljZVJlZ2V4LnRlc3Qoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoTm90ZS5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbignJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RyaW5nVG9JbnNlcnQ6IHN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdEluc2VydFJlZ0V4ID0gL14oXFxkKykoLiopL2dtO1xuICAgICAgICAgICAgICAgIGxldCByZWdFeEV4ZWN1dGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgcmVwZWF0OiBudW1iZXI7XG4gICAgICAgICAgICAgICAgaWYgKChyZWdFeEV4ZWN1dGlvbiA9IHJlcGVhdEluc2VydFJlZ0V4LmV4ZWMoc2VsZWN0aW9uKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0ID0gTnVtYmVyKHJlZ0V4RXhlY3V0aW9uWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaW1pdGVyID0gc2VsZWN0aW9uLnJlcGxhY2UoL15cXGQrLywgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnJheVN0cmluZ1RvaW5zZXJ0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcGVhdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVN0cmluZ1RvaW5zZXJ0LnB1c2goTm90ZS5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1RvSW5zZXJ0ID0gYXJyYXlTdHJpbmdUb2luc2VydC5qb2luKGRlbGltaXRlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nVG9JbnNlcnQgPSBOb3RlLnBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oc3RyaW5nVG9JbnNlcnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJObyBhY3RpdmUgTWFya2Rvd24gZWRpdG9yIGZvdW5kLlwiKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuXG5jbGFzcyBMSVJQU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogTGlzdEl0ZW1SYW5kb21QaWNrZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBMaXN0SXRlbVJhbmRvbVBpY2tlcikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTm90ZSBzZXR0aW5nJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOb3RlIFBhdGgnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1RoZSBwYXRoIGFuZCBmaWxlbmFtZSBvZiB0aGUgbm90ZSB0aGF0IGNvbnRhaW5zIHRoZSBsaXN0cyB0byBiZSB1c2VkLiBFeGVtcGxlIDogXCJGb2xkZXIvTm90ZVwiLicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHRoZSBwYXRoIHRvIHlvdXIgbm90ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVQYXRoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVBhdGggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnSW50ZXJmYWNlIHNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IG5vdGUgc2VsZWN0b3InKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHBhdGggaXMgYSBmb2xkZXInKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dOb3RlU2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd05vdGVTZWxlY3RvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2hvdyB3YXJuaW5nJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdEaXNwbGF5IHRoZSB3YXJuaW5ncyBvZiBub3RlcyBhbmQgbGlzdHMsIGlmIGFueS4gV2FybmluZ3MgZm9yIG1hY3JvIGRlcHRoIGxpbWl0IHJlYWNoZWQgYXJlIGFsd2F5cyBkaXNwbGF5ZWQuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93V2FybmluZyk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93V2FybmluZyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTGlzdCBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTnVsbCB2YWx1ZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgdGhlIGZpcnN0IGxpbmUgb2YgYW4gaXRlbSBoYXMgdGhpcyB2YWx1ZSwgdGhlIGxpbmUgaXMgZmx1c2guJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdmFsdWUnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5udWxsVmFsdWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5udWxsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRXNjYXBlIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB5b3Ugd2FudCBzb21lIGhlYWRpbiBvbmUgb3IgZmlyc3QgbGV2ZWwgbGlzdCBpdGVtIGluIHlvdXIgaXRlbSwgeW91IGNvdWxkIGVzY2FwZSB0aGVtIHdpdGggdGhlc2UgdmFsdWUnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB2YWx1ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVzY2FwZVZhbHVlKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXNjYXBlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnU2VsZWN0aW9uIHNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTZWxlY3Rpb24gdmFsdWUgZm9yIG5vdGlmaWNhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgdGhlIHRleHQgc2VsZWN0ZWQgaGFzIHRoaXMgdmFsdWUsIHRoZSBpdGVtIGlzIG5vdCBpbnNlcnRlZCwgYnV0IG5vdGlmaWVkICEnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB2YWx1ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdEZWxldGUgc2VsZWN0aW9uIHZhbHVlIGZvciBub3RpZmljYXRpb24nKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHNldCwgdGhlIHNlbGVjdGVkIHZhbHVlIGZvciBub3RpZmljYXRpb24gaXMgZGVsZXRlZC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWxldGVTZWxlY3Rpb25Gb3JOb3RpZmljYXRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdUZWNobmljYWwgc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnTWFjcm8gZGVwdGggbGltaXQnKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKCdNYWNybyByZWN1cnNpb24gbGltaXQ6IGhvdyBtYW55IG5lc3RlZCBtYWNybyBjYWxscyBhcmUgYWxsb3dlZC4gWmVybyBwcmV2ZW50cyBuZXN0ZWQgbWFjcm9zIGZyb20gYmVpbmcgcmVzb2x2ZWQuJylcbiAgICAgICAgICAgICAgICAuYWRkU2xpZGVyKChzbGlkZXIpID0+XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1heE1hY3JvRGVwdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDAsIDEwLCAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1heE1hY3JvRGVwdGggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0Esc0JBQTBHO0FBRTFHLFNBQVMsWUFBZSxTQUFjLFdBQTZEO0FBQy9GLFFBQU0sVUFBb0IsQ0FBQztBQUMzQixVQUFRLFFBQVEsQ0FBQyxTQUFTLFVBQVU7QUFDbEMsUUFBSSxVQUFVLFNBQVMsS0FBSyxHQUFHO0FBQzdCLGNBQVEsS0FBSyxLQUFLO0FBQUEsSUFDcEI7QUFBQSxFQUNGLENBQUM7QUFDRCxTQUFPO0FBQ1g7QUFFQSxTQUFTLFlBQVksZ0JBQWdDO0FBQ2pELFNBQU8sZUFBZSxRQUFRLHVCQUF1QixNQUFNO0FBQy9EO0FBWUEsSUFBTSxtQkFBdUM7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
