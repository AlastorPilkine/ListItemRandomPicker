/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Note or folder path",
  showWarning: true,
  maxReferenceDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true
};
var DiceRoller = class {
  checkDice(diceString) {
    const diceRegex = /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i;
    return diceRegex.test(diceString);
  }
  rollDice(diceString) {
    if (!this.checkDice(diceString)) {
      throw new Error("Syntaxe de lancer de d\xE9s invalide.");
    }
    const [_, countStr, sidesStr, modifierStr, explodeStr, keepStr, keepLowStr] = diceString.match(
      /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i
    );
    const count = parseInt(countStr || "1");
    const sides = parseInt(sidesStr);
    const modifier = parseInt(modifierStr || "0");
    const explode = !!explodeStr;
    const keep = keepStr ? parseInt(keepStr.slice(1)) : void 0;
    const keepLow = keepLowStr ? parseInt(keepLowStr.slice(2)) : void 0;
    let results = [];
    for (let i = 0; i < count; i++) {
      let result = Math.floor(Math.random() * sides) + 1;
      results.push(result);
      if (explode) {
        while (result === sides) {
          result = Math.floor(Math.random() * sides) + 1;
          results.push(result);
        }
      }
    }
    if (keep) {
      results.sort((a, b) => b - a);
      results = results.slice(0, keep);
    } else if (keepLow) {
      results.sort((a, b) => a - b);
      results = results.slice(0, keepLow);
    }
    const sum = results.reduce((acc, val) => acc + val, 0);
    return sum + modifier;
  }
  /**
   * Remplace les lancers de dés encadrés par des délimiteurs dans une chaîne multi-lignes.
   *
   * @param {string} text Le texte multi-lignes contenant les lancers de dés.
   * @param {string} startDelimiter Le délimiteur de début des lancers de dés.
   * @param {string} endDelimiter Le délimiteur de fin des lancers de dés.
   * @returns {string} Le texte avec les lancers de dés remplacés par leurs résultats.
   */
  replaceDiceRolls(text, startDelimiter, endDelimiter) {
    const regex = new RegExp(
      `${this.escapeRegExp(startDelimiter)}([^${this.escapeRegExp(
        startDelimiter + endDelimiter
      )}]+)${this.escapeRegExp(endDelimiter)}`,
      "g"
    );
    return text.replace(regex, (match, diceString) => {
      try {
        const result = this.rollDice(diceString);
        return result.toString();
      } catch (error) {
        return match;
      }
    });
  }
  /**
   * Échappe les caractères spéciaux pour une utilisation dans une expression régulière.
   *
   * @param {string} string La chaîne de caractères à échapper.
   * @returns {string} La chaîne de caractères échappée.
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
var LIRPLogStatusValues = [
  "dupInNote",
  "dupInFolder",
  "emptyList",
  "emptyNote",
  "refLimit",
  "subRefLimit",
  "pathSetting",
  "folderAndFile",
  "showItem",
  "noActiveView"
];
var LIRPLogElement = class {
  static getErrorStatus() {
    return ["dupInFolder", "pathSetting"];
  }
  static getWarningStatus() {
    let warningStatus = [];
    LIRPLogStatusValues.map((element) => {
      if (!LIRPLogElement.getErrorStatus().contains(element) && !LIRPLogElement.getWarningStatus().contains(element)) {
        warningStatus.push(element);
      }
      ;
    });
    return warningStatus;
  }
  static getInfoStatus() {
    return ["showItem", "refLimit", "subRefLimit"];
  }
  getType() {
    const errors = ["pathSetting", "dupInFolder"];
    if (errors.contains(this.status)) {
      return "error";
    } else {
      return "warning";
    }
    ;
  }
  constructor(father, child, status, complement = "") {
    this.father = father;
    this.child = child;
    this.status = status;
    this.complement = complement;
  }
  toString() {
    return `${this.getType()} / ${this.father} / ${this.child} / ${this.status} / ${this.complement}`;
  }
};
var LIRPLog = class {
  constructor() {
    this.logs = [];
  }
  push(father, child, status, complement = "") {
    this.logs.push(new LIRPLogElement(father, child, status, complement));
  }
  add(logs) {
    this.logs = this.logs.concat(logs.logs);
  }
  get(type) {
    const logsForType = this.logs.filter(
      (element) => element.getType() === type
    );
    let getArray = [];
    logsForType.map((element) => {
      getArray.push(element.toString());
    });
    return getArray;
  }
  flush() {
    this.logs = [];
  }
};
var LIRPList = class {
  static getSettingString(value = "") {
    if (value === "") {
      return "- [ ] Hide this list\n";
    } else {
      switch (value) {
        case "hide":
          return "^- \\[[x ]\\] Hide this list$";
        case "hide_ticked":
          return "^- \\[x\\] Hide this list$";
      }
      ;
    }
    ;
  }
  constructor(noteName, lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.logs = new LIRPLog();
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) (?!\[) *(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.logs.push(noteName, this.title, "emptyList");
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      let isHidden = false;
      const hideRegexTicked = new RegExp(LIRPList.getSettingString("hide_ticked"));
      const hideRegex = new RegExp(LIRPList.getSettingString("hide"));
      mdDescription.map((element) => {
        if (hideRegexTicked.test(element)) {
          isHidden = true;
          this.hidden = isHidden;
        }
        ;
      });
      mdDescription = mdDescription.filter((element) => !hideRegex.test(element));
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  flushLogs() {
    this.logs.flush();
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getLogs() {
    return this.logs;
  }
  getWarning() {
    return this.logs.get("warning");
  }
  get length() {
    return this.items.length;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.logs = new LIRPLog();
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.rollDice = true;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  getListTitles() {
    let listTitles = [];
    this.list.map((element) => {
      listTitles.push(element.title);
    });
    return listTitles;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.logs.push(noteName, "", "emptyNote");
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    let pushSuccess = true;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      pushSuccess = this.pushListIfNotExists(new LIRPList(this.noteName, lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString)) && pushSuccess;
    }
    ;
    pushSuccess = this.pushListIfNotExists(new LIRPList(this.noteName, lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString)) && pushSuccess;
    return pushSuccess;
  }
  pushListIfNotExists(listToPush) {
    if (this.getListTitles().contains(listToPush.title)) {
      this.logs.push(this.noteName, listToPush.title, "dupInNote");
      return false;
    } else {
      this.list.push(listToPush);
      return true;
    }
    ;
  }
  getListSuggestion(withHidden = false) {
    const noteSuggestion = new LIRPSuggestionList();
    this.list.forEach((element) => {
      if (withHidden || element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  doReferenceSubstitution(text) {
    let match;
    let modifiedText = text;
    let listTitle = "";
    const stringRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    for (let repeat = 0; repeat < this.referenceMaxDepth; repeat++) {
      const refRegex = new RegExp(stringRefRegex, "mg");
      while ((match = refRegex.exec(modifiedText)) !== null) {
        let newValue = this.pickRandomItemFromList(match[1], false);
        listTitle = match[0];
        modifiedText = modifiedText.replace(listTitle, newValue);
        refRegex.lastIndex = match.index + newValue.length;
      }
    }
    if (this.rollDice) {
      const diceRoller = new DiceRoller();
      modifiedText = diceRoller.replaceDiceRolls(modifiedText, "{", "}");
    }
    return {
      lastListTitle: listTitle,
      modifiedText
    };
  }
  flushLogs() {
    this.logs.flush();
    this.list.map((element) => {
      element.flushLogs();
    });
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let randomItem = "";
    let returnOfDoExecSub = {
      lastListTitle: listTitle,
      modifiedText: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      if (workOnReference) {
        returnOfDoExecSub = this.doReferenceSubstitution(randomItem);
        randomItem = returnOfDoExecSub.modifiedText;
        const stringRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
        const RefRegex = new RegExp(stringRefRegex);
        if (RefRegex.test(randomItem) && workOnReference) {
          if (returnOfDoExecSub.lastListTitle === "") {
            returnOfDoExecSub.lastListTitle = listTitle;
          }
          this.logs.push(this.noteName, returnOfDoExecSub.lastListTitle, "refLimit");
        }
        ;
      }
      ;
      return randomItem;
    } else {
      return "";
    }
    ;
  }
  getError() {
    return this.logs.get("error");
  }
  getLogs() {
    let allLogs = new LIRPLog();
    allLogs.add(this.logs);
    this.list.map((element) => {
      allLogs.add(element.getLogs());
    });
    return allLogs;
  }
  getWarning() {
    let allWarning = this.logs.get("warning");
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    return allWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.referenceMaxDepth = referenceMaxDepth;
    this.logs = new LIRPLog();
  }
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    let status = currentNote.loadFromNote(noteName, noteContent);
    status = this.pushNoteIfListNotExists(currentNote) && status;
    return status;
  }
  pushNoteIfListNotExists(noteToPush) {
    const allListTitle = this.getListTitles();
    let unic = true;
    noteToPush.getListTitles().map((element) => {
      if (allListTitle.contains(element)) {
        this.logs.push(noteToPush.noteName, element, "dupInFolder", this.getNoteNameFromListTitle(element));
        unic = false;
      }
    });
    if (unic) {
      this.multiNote.push(noteToPush);
    } else {
      this.logs.add(noteToPush.logs);
    }
    ;
    return unic;
  }
  getNoteNameFromListTitle(listTitle) {
    let note = this.multiNote.find(
      (element) => element.getListTitles().contains(listTitle)
    );
    if (note !== void 0) {
      return note.noteName;
    } else {
      return "";
    }
    ;
  }
  getListTitles() {
    let listTitles = [];
    this.multiNote.map((element) => {
      listTitles = listTitles.concat(element.getListTitles());
    });
    return listTitles;
  }
  getListSuggestion(withHidden = false) {
    let allListSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      allListSuggestion = allListSuggestion.concat(element.getListSuggestion(withHidden));
    });
    return allListSuggestion;
  }
  getNoteSuggestion(withHidden = false) {
    let noteSuggestion = new LIRPSuggestionList();
    this.multiNote.map((element) => {
      if (element.getListSuggestion(withHidden).length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  doReferenceSubstitution(text) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    let returnOfDoExecSub = {
      lastListTitle: "Reference substitution in selection",
      modifiedText: ""
    };
    returnOfDoExecSub = superNote.doReferenceSubstitution(text);
    let listTitle = "";
    const stringRefRegex = `{(${superNote.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const refRegex = new RegExp(stringRefRegex);
    if (refRegex.test(returnOfDoExecSub.modifiedText)) {
      this.logs.push("", "", "subRefLimit");
    }
    ;
    return returnOfDoExecSub.modifiedText;
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    superNote.noteName = this.getNoteNameFromListTitle(listTitle);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    const randomItem = superNote.pickRandomItemFromList(listTitle);
    this.logs.add(superNote.getLogs());
    return randomItem;
  }
  flushLogs() {
    this.logs.flush();
    this.multiNote.map((element) => {
      element.flushLogs();
    });
  }
  getError() {
    let allError = [];
    this.multiNote.map((element) => {
      allError = allError.concat(element.getError());
    });
    return allError;
  }
  getLogs() {
    let allLogs = new LIRPLog();
    allLogs.add(this.logs);
    this.multiNote.map((element) => {
      allLogs.add(element.getLogs());
    });
    return allLogs;
  }
  hasErrors() {
    const allLogs = this.getLogs();
    return allLogs.get("error").length !== 0;
  }
  getWarning() {
    let allWarning = this.logs.get("warning");
    this.multiNote.map((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    return allWarning;
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestionList = class {
  constructor() {
    this.list = [];
  }
  push(element) {
    this.list.push(element);
  }
  filterByNoteName(noteName) {
    const filterList = new LIRPSuggestionList();
    this.list.map((element) => {
      if (element.noteName === noteName) {
        filterList.push(element);
      }
    });
    return filterList;
  }
  filter(callback) {
    const filteredList = new LIRPSuggestionList();
    for (let i = 0; i < this.list.length; i++) {
      if (callback(this.list[i], i, this.list)) {
        filteredList.push(this.list[i]);
      }
    }
    return filteredList;
  }
  concat(otherList) {
    const newList = new LIRPSuggestionList();
    newList.list = this.list.concat(otherList.list);
    return newList;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    ).list;
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    let message = item.description;
    el.createEl("small", { text: message });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.logs = new LIRPLog();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.prepareAction("note");
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.prepareAction("note");
      }
    });
    this.addCommand({
      id: "insert-setting-item",
      name: "Insert list settings values",
      callback: () => {
        this.insertString(LIRPList.getSettingString());
      }
    });
    this.addCommand({
      id: "insert-reference-item",
      name: "Insert list reference",
      callback: () => {
        this.prepareAction("reference");
      }
    });
    this.addCommand({
      id: "replace-reference-item",
      name: "Replace references in selection",
      callback: () => {
        this.prepareAction("doRefSubstitution");
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getMarkdownFiles();
    let filesInNotePath = [];
    let foundAFile = false;
    const noteFileName = `${notePath}.md`;
    const notePathRegex = new RegExp(`^${notePath}/.+.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      } else if (element.path === noteFileName) {
        foundAFile = true;
      }
      ;
    });
    if (filesInNotePath.length === 0 && foundAFile) {
      filesInNotePath.push(noteFileName);
    } else if (foundAFile && filesInNotePath.length !== 0) {
      this.logs.push("ListItemRandmPicker", "getLIRPFiles", "folderAndFile");
    }
    return filesInNotePath;
  }
  async loadLIRPFiles() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue, this.settings.maxReferenceDepth);
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content);
      }
      ;
    }
    ;
    return currentLIRP;
  }
  async prepareAction(action) {
    const currentLIRP = await this.loadLIRPFiles();
    if (currentLIRP.length === 0) {
      this.logs.push("ListItemRandomPicker", "loadLIRPFiles", "pathSetting");
    }
    ;
    if (!currentLIRP.hasErrors() && currentLIRP.length !== 0) {
      if (action === "doRefSubstitution") {
        this.doReferenceSubstitution(currentLIRP);
      } else {
        if (currentLIRP.length === 1 || !this.settings.showNoteSelector) {
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(action === "reference"), (item) => {
            if (action === "note") {
              this.workWithTitle(currentLIRP, item.title);
            } else {
              this.insertString(`{${item.title}}`);
            }
            ;
          }).open();
        } else {
          new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(action === "reference"), (item) => {
            new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(action === "reference").filterByNoteName(item.noteName), (item2) => {
              if (action === "note") {
                this.workWithTitle(currentLIRP, item2.title);
              } else {
                this.insertString(`{${item2.title}}`);
              }
              ;
            }).open();
          }).open();
        }
        ;
      }
      ;
    }
    this.doLogManagement(currentLIRP.getLogs());
    this.logs.flush();
    currentLIRP.flushLogs();
  }
  doLogManagement(multiNoteLogs) {
    const allLogs = this.logs;
    if (multiNoteLogs !== void 0) {
      allLogs.add(multiNoteLogs);
      multiNoteLogs.flush();
    }
    ;
    const errorMsg = [];
    const warningMsg = [];
    const infoMsg = [];
    allLogs.logs.map((element) => {
      switch (element.status) {
        case "dupInNote":
          warningMsg.push(`List "${element.child}" is duplicate in note "${element.father}". List is ignored`);
          break;
        case "dupInFolder":
          errorMsg.push(`ERROR : List "${element.child}" exists in two notes, "${element.father}" and "${element.complement}", make correction !`);
          break;
        case "emptyList":
          warningMsg.push(`List "${element.child}" is empty in "${element.father}"`);
          break;
        case "emptyNote":
          warningMsg.push(`"${element.child}" is empty`);
          break;
        case "refLimit":
          warningMsg.push(`Reference depth limit reach with list "${element.child}" in note "${element.father}"`);
          break;
        case "pathSetting":
          errorMsg.push(`ERROR : verify path in plugin settings`);
          break;
        case "folderAndFile":
          warningMsg.push(`A note with the same name as the folder in settings gets ignored.`);
          break;
        case "showItem":
          infoMsg.push(`${element.complement}`);
          break;
        case "noActiveView":
          warningMsg.push(`No note in edition mode to do this action`);
          break;
      }
      ;
      errorMsg.map((element2) => new import_obsidian.Notice(element2));
      if (this.settings.showWarning) {
        warningMsg.map((element2) => new import_obsidian.Notice(element2));
      }
      ;
      infoMsg.map((element2) => new import_obsidian.Notice(element2));
    });
    this.logs.flush();
  }
  workWithTitle(note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const selection = activeView.editor.getSelection();
      if (noticeRegex.test(selection)) {
        this.logs.push("", listTitle, "showItem");
        if (this.settings.deleteSelectionForNotification) {
          activeView.editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(note.pickRandomItemFromList(listTitle));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = note.pickRandomItemFromList(listTitle);
        }
        activeView.editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      this.logs.push("ListItemRandomPicker", "workWithTitle", "noActiveView");
    }
    ;
    this.doLogManagement(note.getLogs());
  }
  doReferenceSubstitution(multiNote) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const selection = activeView.editor.getSelection();
      activeView.editor.replaceSelection(multiNote.doReferenceSubstitution(selection));
    } else {
      this.logs.push("ListItemRandomPicker", "workWithTitle", "noActiveView");
    }
    ;
  }
  insertString(stringToInsert) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      activeView.editor.replaceSelection(stringToInsert);
    } else {
      this.logs.push("ListItemRandomPicker", "workWithTitle", "noActiveView");
    }
    ;
    this.doLogManagement();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Path").setDesc('The path of a note or folder. Example: "Folder/Note" or "Folder".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Specific values" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of a list item has this value, that line is ignored. This allows you to have probabilities of getting no result. Usage example: having, or not having, a particle in a noun.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("To include heading one elements or first-level list items in your random list, escape them with these values. Exemple : // # Heading").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the selected text has this value, the item is not inserted; instead, a notification is shown.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Behavior" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder containing at least two notes, a selector will allow you to choose the note; otherwise, all lists will be offered to you.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Are warnings displayed as notifications ?").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Delete selection value on notification").setDesc("If this setting is on, the selected notification value is removed after it's used.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Reference depth limit").setDesc("Reference recursion limit: the maximum number of nested reference calls allowed. Zero disables reference resolution.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxReferenceDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxReferenceDepth = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
