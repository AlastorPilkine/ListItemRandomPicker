/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  LIRPSuggestModal: () => LIRPSuggestModal,
  default: () => ListItemRandomPicker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function findIndexes(anArray, predicate) {
  const indexes = [];
  anArray.forEach((element, index) => {
    if (predicate(element, index)) {
      indexes.push(index);
    }
  });
  return indexes;
}
function escapeRegex(stringToEscape) {
  return stringToEscape.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var DEFAULT_SETTINGS = {
  notePath: "Path of a note or a folder",
  showWarning: true,
  maxMacroDepth: 1,
  selectionForNotification: "!",
  deleteSelectionForNotification: false,
  nullValue: "null",
  escapeValue: "//",
  showNoteSelector: true,
  allowCrossNoteReference: false
};
var DiceRoller = class {
  checkDice(diceString) {
    const diceRegex = /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i;
    return diceRegex.test(diceString);
  }
  rollDice(diceString) {
    if (!this.checkDice(diceString)) {
      throw new Error("Syntaxe de lancer de d\xE9s invalide.");
    }
    const [_, countStr, sidesStr, modifierStr, explodeStr, keepStr, keepLowStr] = diceString.match(
      /^(\d+)?d(\d+)([\+\-]\d+)?(e)?(k\d+)?(kl\d+)?$/i
    );
    const count = parseInt(countStr || "1");
    const sides = parseInt(sidesStr);
    const modifier = parseInt(modifierStr || "0");
    const explode = !!explodeStr;
    const keep = keepStr ? parseInt(keepStr.slice(1)) : void 0;
    const keepLow = keepLowStr ? parseInt(keepLowStr.slice(2)) : void 0;
    let results = [];
    for (let i = 0; i < count; i++) {
      let result = Math.floor(Math.random() * sides) + 1;
      results.push(result);
      if (explode) {
        while (result === sides) {
          result = Math.floor(Math.random() * sides) + 1;
          results.push(result);
        }
      }
    }
    if (keep) {
      results.sort((a, b) => b - a);
      results = results.slice(0, keep);
    } else if (keepLow) {
      results.sort((a, b) => a - b);
      results = results.slice(0, keepLow);
    }
    const sum = results.reduce((acc, val) => acc + val, 0);
    return sum + modifier;
  }
  /**
   * Remplace les lancers de dés encadrés par des délimiteurs dans une chaîne multi-lignes.
   *
   * @param {string} text Le texte multi-lignes contenant les lancers de dés.
   * @param {string} startDelimiter Le délimiteur de début des lancers de dés.
   * @param {string} endDelimiter Le délimiteur de fin des lancers de dés.
   * @returns {string} Le texte avec les lancers de dés remplacés par leurs résultats.
   */
  replaceDiceRolls(text, startDelimiter, endDelimiter) {
    const regex = new RegExp(
      `${this.escapeRegExp(startDelimiter)}([^${this.escapeRegExp(
        startDelimiter + endDelimiter
      )}]+)${this.escapeRegExp(endDelimiter)}`,
      "g"
    );
    return text.replace(regex, (match, diceString) => {
      try {
        const result = this.rollDice(diceString);
        return result.toString();
      } catch (error) {
        return match;
      }
    });
  }
  /**
   * Échappe les caractères spéciaux pour une utilisation dans une expression régulière.
   *
   * @param {string} string La chaîne de caractères à échapper.
   * @returns {string} La chaîne de caractères échappée.
   */
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
var LIRPList = class {
  constructor(lines, nullValue, escapeString) {
    this.title = "";
    this.description = "";
    this.hidden = false;
    this.items = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    const headingRegEx = /^# +(.+)$/;
    this.title = lines[0].replace(headingRegEx, "$1");
    const italicHeadingRegex = /^(_|\*)\S/;
    if (italicHeadingRegex.test(this.title)) {
      this.hidden = true;
    } else {
      this.hidden = false;
    }
    lines.shift();
    const listBeginItemRegex = /^(-|\d+\.) +(.+)$/;
    const listBeginIndexes = findIndexes(lines, (element) => listBeginItemRegex.test(element));
    if (listBeginIndexes.length === 0) {
      this.warning.push(`No items in list ${this.title}`);
      this.hidden = true;
      return;
    }
    const cleanLines = lines.map((element) => {
      return element.replace(listBeginItemRegex, "$2");
    });
    if (listBeginIndexes[0] !== 0) {
      let mdDescription = cleanLines.slice(0, listBeginIndexes[0]);
      if (mdDescription[0] === "") {
        mdDescription.shift();
      }
      this.description = mdDescription.join("\n");
    } else {
      this.description = "";
    }
    const listBeginCount = listBeginIndexes.length;
    let item;
    for (let currentIndex = 0; currentIndex < listBeginCount - 1; currentIndex++) {
      item = cleanLines.slice(listBeginIndexes[currentIndex], listBeginIndexes[currentIndex + 1]);
      this.pushItemBasedOnWeight(item);
    }
    item = cleanLines.slice(listBeginIndexes[listBeginCount - 1]);
    if (item.at(-1) === "") {
      item.pop();
    }
    this.pushItemBasedOnWeight(item);
  }
  pushItemBasedOnWeight(item) {
    const ItemWithWeightRegEx = /^\((\d+)\)\s+(.+)$/;
    let regExExecution;
    let repeat;
    if ((regExExecution = ItemWithWeightRegEx.exec(item[0])) !== null) {
      repeat = Number(regExExecution[1]);
      item[0] = regExExecution[2];
    } else {
      repeat = 1;
    }
    if (item[0] === this.nullValue) {
      if (item.length === 1) {
        item[0] = "";
      } else {
        item.shift();
      }
      ;
    }
    ;
    const stringRegex = `^ *${this.escapeString}(.*)`;
    const escapeStringRegEx = new RegExp(stringRegex, "gm");
    const escapeItem = item.map((element) => {
      return element.replace(escapeStringRegEx, "$1");
    });
    const stringItem = escapeItem.join("\n");
    for (let i = 0; i < repeat; i++) {
      this.items.push(stringItem);
    }
  }
  getSuggestion(noteName) {
    const suggestion = {
      noteName,
      title: this.title,
      description: this.description.split("\n")[0]
    };
    return suggestion;
  }
  notHidden() {
    return !this.hidden;
  }
  pickRandomItem() {
    let randomItem = "";
    if (this.items.length > 0) {
      randomItem = this.items[Math.floor(Math.random() * this.items.length)];
    }
    return randomItem;
  }
  getWarning() {
    return this.warning;
  }
};
var LIRPNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.noteName = "";
    this.description = "";
    this.list = [];
    this.error = [];
    this.warning = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.rollDice = true;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  loadFromNote(noteName, noteContent) {
    this.noteName = noteName;
    const lines = noteContent.split("\n");
    const headingRegex = /^# .+$/;
    let headingIndexes = findIndexes(lines, (element) => headingRegex.test(element));
    if (headingIndexes.length === 0) {
      this.error.push(`No list defined in note "${noteName}"`);
      return false;
    }
    if (headingIndexes[0] !== 0) {
      this.description = lines.slice(0, headingIndexes[0]).join("\n");
    }
    const headingCount = headingIndexes.length;
    for (let currentIndex = 0; currentIndex < headingCount - 1; currentIndex++) {
      this.list.push(new LIRPList(lines.slice(headingIndexes[currentIndex], headingIndexes[currentIndex + 1]), this.nullValue, this.escapeString));
    }
    this.list.push(new LIRPList(lines.slice(headingIndexes[headingCount - 1]), this.nullValue, this.escapeString));
    return true;
  }
  getListSuggestion() {
    let noteSuggestion;
    noteSuggestion = [];
    this.list.forEach((element) => {
      if (element.notHidden()) {
        noteSuggestion.push(element.getSuggestion(this.noteName));
      }
    });
    return noteSuggestion;
  }
  execMacroSubstitution(item) {
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex, "mg");
    let match;
    let modifiedItem = item;
    let listTitle = "";
    while ((match = macroRefRegex.exec(modifiedItem)) !== null) {
      let newValue = this.pickRandomItemFromList(match[1], false);
      listTitle = match[0];
      modifiedItem = modifiedItem.replace(listTitle, newValue);
      macroRefRegex.lastIndex = match.index + newValue.length;
    }
    return {
      lastListTitle: listTitle,
      modifiedItem
    };
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    let randomItem = "";
    let returnOfExecMacro = {
      lastListTitle: listTitle,
      modifiedItem: ""
    };
    const currentList = this.list.find((element) => element.title === listTitle);
    if (currentList !== void 0) {
      randomItem = currentList.pickRandomItem();
      for (let repeat = 0; repeat < this.referenceMaxDepth; repeat++) {
        returnOfExecMacro = this.execMacroSubstitution(randomItem);
        randomItem = returnOfExecMacro.modifiedItem;
      }
    }
    const stringMacroRefRegex = `{(${this.list.map((element) => escapeRegex(element.title)).join("|")})}`;
    const macroRefRegex = new RegExp(stringMacroRefRegex);
    if (macroRefRegex.test(randomItem) && workOnReference) {
      new import_obsidian.Notice(`Macro depth limit reached in note "${this.noteName}" after calling "${returnOfExecMacro.lastListTitle}"`);
    }
    ;
    if (workOnReference && this.rollDice) {
      const diceRoller = new DiceRoller();
      return diceRoller.replaceDiceRolls(randomItem, "{", "}");
    } else {
      return randomItem;
    }
  }
  getError() {
    return this.error;
  }
  getWarning() {
    let allWarning;
    allWarning = [];
    allWarning = allWarning.concat(this.warning);
    this.list.forEach((element) => {
      allWarning = allWarning.concat(element.getWarning());
    });
    let NoteWarning;
    NoteWarning = [];
    allWarning.forEach(
      (element) => NoteWarning.push(`Warning in note "${this.noteName}" : ${element}`)
    );
    return NoteWarning;
  }
  get length() {
    return this.list.length;
  }
};
var LIRPMultiNote = class {
  constructor(nullValue, escapeString, referenceMaxDepth) {
    this.multiNote = [];
    this.nullValue = nullValue;
    this.escapeString = escapeString;
    this.noteSelected = void 0;
    this.referenceMaxDepth = referenceMaxDepth;
  }
  selectNote(noteName) {
    if (noteName === "" && this.multiNote.length > 1) {
      this.noteSelected = this.multiNote[0];
      return true;
    } else {
      this.noteSelected = this.multiNote.find((element) => element.noteName === noteName);
      return this.noteSelected !== void 0;
    }
  }
  loadFromNote(noteName, noteContent) {
    const currentNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    const status = currentNote.loadFromNote(noteName, noteContent);
    this.multiNote.push(currentNote);
    return status;
  }
  getListSuggestion() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getListSuggestion();
    } else {
      let allListSuggestion = [];
      this.multiNote.map((element) => {
        allListSuggestion = allListSuggestion.concat(element.getListSuggestion());
      });
      return allListSuggestion;
    }
  }
  getNoteSuggestion() {
    let noteSuggestion = [];
    this.multiNote.map((element) => {
      if (element.getListSuggestion().length > 0) {
        noteSuggestion.push({
          noteName: element.noteName,
          title: element.noteName,
          description: element.description.split("\n")[0]
        });
      }
      ;
    });
    return noteSuggestion;
  }
  pickRandomItemFromList(listTitle, workOnReference = true) {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.pickRandomItemFromList(listTitle);
    } else {
      return "";
    }
  }
  pickRandomWithCrossNoteMacro(listTitle, workOnReference = true) {
    let superNote = new LIRPNote(this.nullValue, this.escapeString, this.referenceMaxDepth);
    this.multiNote.map((element) => {
      superNote.list = superNote.list.concat(element.list);
    });
    return superNote.pickRandomItemFromList(listTitle);
  }
  getError() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getError();
    } else {
      let allError = [];
      this.multiNote.map((element) => {
        allError = allError.concat(element.getError());
      });
      return allError;
    }
  }
  getWarning() {
    if (this.noteSelected !== void 0) {
      return this.noteSelected.getWarning();
    } else {
      let allWarning = [];
      this.multiNote.map((element) => {
        allWarning = allWarning.concat(element.getWarning());
      });
      return allWarning;
    }
  }
  get length() {
    return this.multiNote.length;
  }
};
var LIRPSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, callback) {
    super(app);
    this.items = items;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.items.filter(
      (item) => item.title.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item.title });
    el.createEl("small", { text: item.description });
  }
  onChooseSuggestion(item, evt) {
    this.callback(item);
  }
};
var ListItemRandomPicker = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("list-tree", "Pick random list item", (evt) => {
      this.doTheJob();
    });
    this.addCommand({
      id: "insert-random-item",
      name: "Insert random item from list",
      callback: () => {
        this.doTheJob();
      }
    });
    this.addSettingTab(new LIRPSettingTab(this.app, this));
  }
  onunload() {
  }
  async doTheJob() {
    const allLIRPFiles = this.getLIRPFiles(this.settings.notePath);
    let currentLIRP = new LIRPMultiNote(this.settings.nullValue, this.settings.escapeValue, this.settings.maxMacroDepth);
    let loadWithoutError = true;
    for (const currentFile of allLIRPFiles) {
      const currentFSObject = this.app.vault.getAbstractFileByPath(currentFile);
      let content = "";
      if (currentFSObject instanceof import_obsidian.TFile) {
        content = await this.app.vault.cachedRead(currentFSObject);
        loadWithoutError = currentLIRP.loadFromNote(currentFSObject.path.slice(0, -3), content) && loadWithoutError;
      }
      ;
    }
    ;
    if (!loadWithoutError) {
      currentLIRP.getError().map((element) => {
        new import_obsidian.Notice(element);
      });
      if (currentLIRP.length === 0) {
        return;
      }
    }
    if (this.settings.showWarning) {
      currentLIRP.getWarning().forEach((element) => {
        new import_obsidian.Notice(element);
      });
    }
    ;
    if (currentLIRP.length === 0) {
      new import_obsidian.Notice('Error : check settings "Path " in plugin List Item Random Picker !');
      return;
    } else if (currentLIRP.length === 1) {
      currentLIRP.selectNote("");
      new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
        this.workWithTitle(currentLIRP, item.title);
      }).open();
    } else {
      if (this.settings.showNoteSelector) {
        new LIRPSuggestModal(this.app, currentLIRP.getNoteSuggestion(), (item) => {
          currentLIRP.selectNote(item.title);
          new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item2) => {
            this.workWithTitle(currentLIRP, item2.title);
          }).open();
        }).open();
      } else {
        new LIRPSuggestModal(this.app, currentLIRP.getListSuggestion(), (item) => {
          currentLIRP.selectNote(item.noteName);
          this.workWithTitle(currentLIRP, item.title);
        }).open();
      }
      ;
    }
    ;
  }
  getLIRPFiles(notePath) {
    let allVaultFiles = this.app.vault.getFiles();
    let filesInNotePath = [];
    const notePathRegex = new RegExp(`^${notePath}(/.+)?.md$`);
    allVaultFiles.map((element) => {
      if (notePathRegex.test(element.path)) {
        filesInNotePath.push(element.path);
      }
      ;
    });
    return filesInNotePath;
  }
  workWithTitle(Note, listTitle) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      let PickMethod = "";
      if (this.settings.allowCrossNoteReference) {
        PickMethod = "pickRandomWithCrossNoteMacro";
      } else {
        PickMethod = "pickRandomItemFromList";
      }
      ;
      const selectionForNotificationRegex = `^${this.settings.selectionForNotification}$`;
      const noticeRegex = new RegExp(selectionForNotificationRegex);
      const editor = activeView.editor;
      const selection = editor.getSelection();
      if (noticeRegex.test(selection)) {
        new import_obsidian.Notice(Note[PickMethod](listTitle));
        if (this.settings.deleteSelectionForNotification) {
          editor.replaceSelection("");
        }
      } else {
        let stringToInsert = "";
        const repeatInsertRegEx = /^(\d+)(.*)/gm;
        let regExExecution;
        let repeat;
        if ((regExExecution = repeatInsertRegEx.exec(selection)) !== null) {
          const repeat2 = Number(regExExecution[1]);
          const delimiter = selection.replace(/^\d+/, "");
          const arrayStringToinsert = [];
          for (let i = 0; i < repeat2; i++) {
            arrayStringToinsert.push(Note[PickMethod](listTitle));
          }
          stringToInsert = arrayStringToinsert.join(delimiter);
        } else {
          stringToInsert = Note[PickMethod](listTitle);
        }
        editor.replaceSelection(stringToInsert);
      }
      ;
    } else {
      new import_obsidian.Notice("No active Markdown editor found.");
    }
    ;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LIRPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Note setting" });
    new import_obsidian.Setting(containerEl).setName("Note Path").setDesc('The path and filename of the note that contains the lists to be used. Exemple : "Folder/Note".').addText(
      (text) => text.setPlaceholder("Enter the path to your note").setValue(this.plugin.settings.notePath).onChange(async (value) => {
        this.plugin.settings.notePath = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Interface settings" });
    new import_obsidian.Setting(containerEl).setName("Show note selector").setDesc("If path is a folder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showNoteSelector);
      toggle.onChange(async (value) => {
        this.plugin.settings.showNoteSelector = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show warning").setDesc("Display the warnings of notes and lists, if any. Warnings for macro depth limit reached are always displayed.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showWarning);
      toggle.onChange(async (value) => {
        this.plugin.settings.showWarning = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "List settings" });
    new import_obsidian.Setting(containerEl).setName("Null value").setDesc("If the first line of an item has this value, the line is flush.").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.nullValue).onChange(async (value) => {
        this.plugin.settings.nullValue = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Escape value").setDesc("If you want some headin one or first level list item in your item, you could escape them with these value").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.escapeValue).onChange(async (value) => {
        this.plugin.settings.escapeValue = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Selection settings" });
    new import_obsidian.Setting(containerEl).setName("Selection value for notification").setDesc("If the text selected has this value, the item is not inserted, but notified !").addText(
      (text) => text.setPlaceholder("Enter value").setValue(this.plugin.settings.selectionForNotification).onChange(async (value) => {
        this.plugin.settings.selectionForNotification = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Delete selection value for notification").setDesc("If set, the selected value for notification is deleted.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.deleteSelectionForNotification);
      toggle.onChange(async (value) => {
        this.plugin.settings.deleteSelectionForNotification = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Technical settings" });
    new import_obsidian.Setting(containerEl).setName("Macro depth limit").setDesc("Macro recursion limit: how many nested macro calls are allowed. Zero prevents nested macros from being resolved.").addSlider(
      (slider) => slider.setValue(this.plugin.settings.maxMacroDepth).setLimits(0, 10, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.maxMacroDepth = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Allow cross note reference").setDesc("bla bla bla.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.allowCrossNoteReference);
      toggle.onChange(async (value) => {
        this.plugin.settings.allowCrossNoteReference = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgQXBwLCBTdWdnZXN0TW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSwgVEZvbGRlciwgTWFya2Rvd25WaWV3fSBmcm9tICdvYnNpZGlhbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleGVzPFQ+KGFuQXJyYXk6IFRbXSwgcHJlZGljYXRlOiAoZWxlbWVudDogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IG51bWJlcltdIHtcbiAgICBjb25zdCBpbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGFuQXJyYXkuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCwgaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZXM7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHN0cmluZ1RvRXNjYXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJpbmdUb0VzY2FwZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuaW50ZXJmYWNlIExJUlBQbHVnaW5TZXR0aW5ncyB7XG4gICAgbm90ZVBhdGg6IHN0cmluZztcbiAgICBzaG93V2FybmluZzogYm9vbGVhbjtcbiAgICBtYXhNYWNyb0RlcHRoOiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBib29sZWFuO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVZhbHVlOiBzdHJpbmc7XG4gICAgc2hvd05vdGVTZWxlY3RvcjogYm9vbGVhbjtcbiAgICBhbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZTogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTElSUFBsdWdpblNldHRpbmdzID0ge1xuICAgIG5vdGVQYXRoOiAnUGF0aCBvZiBhIG5vdGUgb3IgYSBmb2xkZXInLFxuICAgIHNob3dXYXJuaW5nOiB0cnVlLFxuICAgIG1heE1hY3JvRGVwdGg6IDEsXG4gICAgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiAnIScsXG4gICAgZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uOiBmYWxzZSxcbiAgICBudWxsVmFsdWU6ICdudWxsJyxcbiAgICBlc2NhcGVWYWx1ZTogJy8vJyxcbiAgICBzaG93Tm90ZVNlbGVjdG9yOiB0cnVlLFxuICAgIGFsbG93Q3Jvc3NOb3RlUmVmZXJlbmNlOiBmYWxzZSxcbn07XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNsYXNzIERpY2VSb2xsZXIge1xuICAgIGNoZWNrRGljZShkaWNlU3RyaW5nOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIGNvbnN0IGRpY2VSZWdleCA9IC9eKFxcZCspP2QoXFxkKykoW1xcK1xcLV1cXGQrKT8oZSk/KGtcXGQrKT8oa2xcXGQrKT8kL2k7XG4gICAgICByZXR1cm4gZGljZVJlZ2V4LnRlc3QoZGljZVN0cmluZyk7XG4gICAgfVxuICBcbiAgICByb2xsRGljZShkaWNlU3RyaW5nOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgaWYgKCF0aGlzLmNoZWNrRGljZShkaWNlU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXhlIGRlIGxhbmNlciBkZSBkXHUwMEU5cyBpbnZhbGlkZS5cIik7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3QgW18sIGNvdW50U3RyLCBzaWRlc1N0ciwgbW9kaWZpZXJTdHIsIGV4cGxvZGVTdHIsIGtlZXBTdHIsIGtlZXBMb3dTdHJdID1cbiAgICAgICAgZGljZVN0cmluZy5tYXRjaChcbiAgICAgICAgICAvXihcXGQrKT9kKFxcZCspKFtcXCtcXC1dXFxkKyk/KGUpPyhrXFxkKyk/KGtsXFxkKyk/JC9pXG4gICAgICAgICkgYXMgUmVnRXhwTWF0Y2hBcnJheTtcbiAgXG4gICAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KGNvdW50U3RyIHx8IFwiMVwiKTtcbiAgICAgIGNvbnN0IHNpZGVzID0gcGFyc2VJbnQoc2lkZXNTdHIpO1xuICAgICAgY29uc3QgbW9kaWZpZXIgPSBwYXJzZUludChtb2RpZmllclN0ciB8fCBcIjBcIik7XG4gICAgICBjb25zdCBleHBsb2RlID0gISFleHBsb2RlU3RyO1xuICAgICAgY29uc3Qga2VlcCA9IGtlZXBTdHIgPyBwYXJzZUludChrZWVwU3RyLnNsaWNlKDEpKSA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGtlZXBMb3cgPSBrZWVwTG93U3RyID8gcGFyc2VJbnQoa2VlcExvd1N0ci5zbGljZSgyKSkgOiB1bmRlZmluZWQ7XG4gIFxuICAgICAgbGV0IHJlc3VsdHM6IG51bWJlcltdID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNpZGVzKSArIDE7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICBcbiAgICAgICAgaWYgKGV4cGxvZGUpIHtcbiAgICAgICAgICB3aGlsZSAocmVzdWx0ID09PSBzaWRlcykge1xuICAgICAgICAgICAgcmVzdWx0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2lkZXMpICsgMTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIGlmIChrZWVwKSB7XG4gICAgICAgIHJlc3VsdHMuc29ydCgoYSwgYikgPT4gYiAtIGEpO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBrZWVwKTtcbiAgICAgIH0gZWxzZSBpZiAoa2VlcExvdykge1xuICAgICAgICByZXN1bHRzLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwga2VlcExvdyk7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3Qgc3VtID0gcmVzdWx0cy5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MgKyB2YWwsIDApO1xuICAgICAgcmV0dXJuIHN1bSArIG1vZGlmaWVyO1xuICAgIH1cbiAgXG4gICAgLyoqXG4gICAgICogUmVtcGxhY2UgbGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMgZW5jYWRyXHUwMEU5cyBwYXIgZGVzIGRcdTAwRTlsaW1pdGV1cnMgZGFucyB1bmUgY2hhXHUwMEVFbmUgbXVsdGktbGlnbmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgTGUgdGV4dGUgbXVsdGktbGlnbmVzIGNvbnRlbmFudCBsZXMgbGFuY2VycyBkZSBkXHUwMEU5cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhcnREZWxpbWl0ZXIgTGUgZFx1MDBFOWxpbWl0ZXVyIGRlIGRcdTAwRTlidXQgZGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZERlbGltaXRlciBMZSBkXHUwMEU5bGltaXRldXIgZGUgZmluIGRlcyBsYW5jZXJzIGRlIGRcdTAwRTlzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IExlIHRleHRlIGF2ZWMgbGVzIGxhbmNlcnMgZGUgZFx1MDBFOXMgcmVtcGxhY1x1MDBFOXMgcGFyIGxldXJzIHJcdTAwRTlzdWx0YXRzLlxuICAgICAqL1xuICAgIHJlcGxhY2VEaWNlUm9sbHMoXG4gICAgICB0ZXh0OiBzdHJpbmcsXG4gICAgICBzdGFydERlbGltaXRlcjogc3RyaW5nLFxuICAgICAgZW5kRGVsaW1pdGVyOiBzdHJpbmdcbiAgICApOiBzdHJpbmcge1xuICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICBgJHt0aGlzLmVzY2FwZVJlZ0V4cChzdGFydERlbGltaXRlcil9KFteJHt0aGlzLmVzY2FwZVJlZ0V4cChcbiAgICAgICAgICBzdGFydERlbGltaXRlciArIGVuZERlbGltaXRlclxuICAgICAgICApfV0rKSR7dGhpcy5lc2NhcGVSZWdFeHAoZW5kRGVsaW1pdGVyKX1gLFxuICAgICAgICBcImdcIlxuICAgICAgKTtcbiAgXG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZ2V4LCAobWF0Y2gsIGRpY2VTdHJpbmcpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJvbGxEaWNlKGRpY2VTdHJpbmcpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7IC8vIFNpIGxhIHN5bnRheGUgZXN0IGludmFsaWRlLCBvbiBnYXJkZSBsZSB0ZXh0ZSBkJ29yaWdpbmVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAgKiBcdTAwQzljaGFwcGUgbGVzIGNhcmFjdFx1MDBFOHJlcyBzcFx1MDBFOWNpYXV4IHBvdXIgdW5lIHV0aWxpc2F0aW9uIGRhbnMgdW5lIGV4cHJlc3Npb24gclx1MDBFOWd1bGlcdTAwRThyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgTGEgY2hhXHUwMEVFbmUgZGUgY2FyYWN0XHUwMEU4cmVzIFx1MDBFMCBcdTAwRTljaGFwcGVyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IExhIGNoYVx1MDBFRW5lIGRlIGNhcmFjdFx1MDBFOHJlcyBcdTAwRTljaGFwcFx1MDBFOWUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBlc2NhcGVSZWdFeHAoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgfVxuICB9XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmludGVyZmFjZSBMSVJQTGlzdEludGVyZmFjZSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICBnZXRTdWdnZXN0aW9uKG5vdGVOYW1lOiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZTtcbiAgICBub3RIaWRkZW4oKTogYm9vbGVhbjtcbiAgICBwaWNrUmFuZG9tSXRlbSgpOiBzdHJpbmc7XG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgTElSUExpc3QgaW1wbGVtZW50cyBMSVJQTGlzdEludGVyZmFjZSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbiAgICBpdGVtczogc3RyaW5nW107XG4gICAgd2FybmluZzogc3RyaW5nW107XG4gICAgbnVsbFZhbHVlOiBzdHJpbmc7XG4gICAgZXNjYXBlU3RyaW5nOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihsaW5lczogc3RyaW5nW10sIG51bGxWYWx1ZTogc3RyaW5nLCBlc2NhcGVTdHJpbmc6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRpdGxlID0gXCJcIjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgICAgIHRoaXMubnVsbFZhbHVlID0gbnVsbFZhbHVlO1xuICAgICAgICB0aGlzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZztcblxuICAgICAgICBjb25zdCBoZWFkaW5nUmVnRXggPSAvXiMgKyguKykkLztcbiAgICAgICAgdGhpcy50aXRsZSA9IGxpbmVzWzBdLnJlcGxhY2UoaGVhZGluZ1JlZ0V4LCBcIiQxXCIpO1xuICAgICAgICBjb25zdCBpdGFsaWNIZWFkaW5nUmVnZXggPSAvXihffFxcKilcXFMvO1xuICAgICAgICBpZiAoaXRhbGljSGVhZGluZ1JlZ2V4LnRlc3QodGhpcy50aXRsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMuc2hpZnQoKTtcbiAgICAgICAgY29uc3QgbGlzdEJlZ2luSXRlbVJlZ2V4ID0gL14oLXxcXGQrXFwuKSArKC4rKSQvO1xuICAgICAgICBjb25zdCBsaXN0QmVnaW5JbmRleGVzID0gZmluZEluZGV4ZXMobGluZXMsIChlbGVtZW50KSA9PiBsaXN0QmVnaW5JdGVtUmVnZXgudGVzdChlbGVtZW50KSk7XG4gICAgICAgIGlmIChsaXN0QmVnaW5JbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy53YXJuaW5nLnB1c2goYE5vIGl0ZW1zIGluIGxpc3QgJHt0aGlzLnRpdGxlfWApO1xuICAgICAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsZWFuTGluZXMgPSBsaW5lcy5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnJlcGxhY2UobGlzdEJlZ2luSXRlbVJlZ2V4LCBcIiQyXCIpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGlzdEJlZ2luSW5kZXhlc1swXSAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IG1kRGVzY3JpcHRpb24gPSBjbGVhbkxpbmVzLnNsaWNlKDAsIGxpc3RCZWdpbkluZGV4ZXNbMF0pO1xuICAgICAgICAgICAgLy8gdGFraW5nIGNhcmUgb2YgTUQwMjJcbiAgICAgICAgICAgIC8vICAgTUQwMjIvYmxhbmtzLWFyb3VuZC1oZWFkaW5nczogSGVhZGluZ3Mgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgICAgIGlmIChtZERlc2NyaXB0aW9uWzBdID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgbWREZXNjcmlwdGlvbi5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGFraW5nIGNhcmUgb2YgTUQwMzJcbiAgICAgICAgICAgIC8vICAgTUQwMzIvYmxhbmtzLWFyb3VuZC1saXN0czogTGlzdHMgc2hvdWxkIGJlIHN1cnJvdW5kZWQgYnkgYmxhbmsgbGluZXNcbiAgICAgICAgICAgIC8vIER1ZSB0byBzcGxpdCBvbiAnXFxuJywgdGhlIHNsaWNlLCBhbmQgYXQgbGVhc3QgYSBqb2luIG9uICdcXG4nIHRoZSBsYXN0ICdcXG4nIGlzIGFsd2F5cyBsb3N0ICFcbiAgICAgICAgICAgIC8vIFNvIHRoZSBmb2xvd2luZyBjb2RlIGlzIHVzZWxlc3NcbiAgICAgICAgICAgIC8vIGlmIChtZERlc2NyaXB0aW9uLmF0KC0xKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgLy8gICAgIG1kRGVzY3JpcHRpb24ucG9wKCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gbWREZXNjcmlwdGlvbi5qb2luKCdcXG4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGlzdEJlZ2luQ291bnQgPSBsaXN0QmVnaW5JbmRleGVzLmxlbmd0aFxuICAgICAgICBsZXQgaXRlbTogc3RyaW5nW107XG4gICAgICAgIGZvciAobGV0IGN1cnJlbnRJbmRleCA9IDA7IGN1cnJlbnRJbmRleCA8IChsaXN0QmVnaW5Db3VudCAtIDEpOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgICAgICAgaXRlbSA9IChjbGVhbkxpbmVzLnNsaWNlKGxpc3RCZWdpbkluZGV4ZXNbY3VycmVudEluZGV4XSwgbGlzdEJlZ2luSW5kZXhlc1tjdXJyZW50SW5kZXggKyAxXSkpO1xuICAgICAgICAgICAgdGhpcy5wdXNoSXRlbUJhc2VkT25XZWlnaHQoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbSA9IChjbGVhbkxpbmVzLnNsaWNlKGxpc3RCZWdpbkluZGV4ZXNbbGlzdEJlZ2luQ291bnQgLSAxXSkpO1xuICAgICAgICAvLyB0YWtpbmcgY2FyZSBvZiBNRDAyMlxuICAgICAgICAvLyAgIE1EMDIyL2JsYW5rcy1hcm91bmQtaGVhZGluZ3M6IEhlYWRpbmdzIHNob3VsZCBiZSBzdXJyb3VuZGVkIGJ5IGJsYW5rIGxpbmVzXG4gICAgICAgIGlmIChpdGVtLmF0KC0xKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgaXRlbS5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnB1c2hJdGVtQmFzZWRPbldlaWdodChpdGVtKTtcbiAgICB9XG5cbiAgICBwdXNoSXRlbUJhc2VkT25XZWlnaHQoaXRlbTogc3RyaW5nW10pIDogdm9pZCB7XG4gICAgICAgIGNvbnN0IEl0ZW1XaXRoV2VpZ2h0UmVnRXggPSAvXlxcKChcXGQrKVxcKVxccysoLispJC87XG4gICAgICAgIGxldCByZWdFeEV4ZWN1dGlvbjtcbiAgICAgICAgbGV0IHJlcGVhdDogbnVtYmVyO1xuICAgICAgICBpZiAoKHJlZ0V4RXhlY3V0aW9uID0gSXRlbVdpdGhXZWlnaHRSZWdFeC5leGVjKGl0ZW1bMF0pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVwZWF0ID0gTnVtYmVyKHJlZ0V4RXhlY3V0aW9uWzFdKTtcbiAgICAgICAgICAgIGl0ZW1bMF0gPSByZWdFeEV4ZWN1dGlvblsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGVhdCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1bMF0gPT09IHRoaXMubnVsbFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpdGVtWzBdID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zaGlmdCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdHJpbmdSZWdleCA9IGBeICoke3RoaXMuZXNjYXBlU3RyaW5nfSguKilgO1xuICAgICAgICBjb25zdCBlc2NhcGVTdHJpbmdSZWdFeCA9IG5ldyBSZWdFeHAoc3RyaW5nUmVnZXgsICdnbScpO1xuICAgICAgICBjb25zdCBlc2NhcGVJdGVtID0gaXRlbS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnJlcGxhY2UoZXNjYXBlU3RyaW5nUmVnRXgsICckMScpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3RyaW5nSXRlbSA9IGVzY2FwZUl0ZW0uam9pbignXFxuJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChzdHJpbmdJdGVtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBnZXRTdWdnZXN0aW9uKG5vdGVOYW1lOiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSB7XG4gICAgICAgICAgICBub3RlTmFtZTogbm90ZU5hbWUsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAodGhpcy5kZXNjcmlwdGlvbi5zcGxpdCgnXFxuJylbMF0pLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWdnZXN0aW9uO1xuICAgIH07XG5cbiAgICBub3RIaWRkZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oaWRkZW47XG4gICAgfVxuXG4gICAgcGlja1JhbmRvbUl0ZW0oKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJhbmRvbUl0ZW06IHN0cmluZyA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJhbmRvbUl0ZW0gPSB0aGlzLml0ZW1zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuaXRlbXMubGVuZ3RoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmRvbUl0ZW07XG4gICAgfVxuXG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLndhcm5pbmc7XG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBMSVJQRXhlY01hY3JvSW50ZXJmYWNlIHtcbiAgICBsYXN0TGlzdFRpdGxlOiBzdHJpbmc7XG4gICAgbW9kaWZpZWRJdGVtOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbG9hZEZyb21Ob3RlKG5vdGVOYW1lOiBzdHJpbmcsIG5vdGVDb250ZW50OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW107XG4gICAgcGlja1JhbmRvbUl0ZW1Gcm9tTGlzdChsaXN0VGl0bGU6IHN0cmluZywgd29ya09uUmVmZXJlbmNlOiBib29sZWFuKTogc3RyaW5nOyBcbiAgICBnZXRFcnJvcigpOiBzdHJpbmdbXTtcbiAgICBnZXRXYXJuaW5nKCk6IHN0cmluZ1tdO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuY2xhc3MgTElSUE5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbm90ZU5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGxpc3Q6IExJUlBMaXN0W107XG4gICAgZXJyb3I6IHN0cmluZ1tdO1xuICAgIHdhcm5pbmc6IHN0cmluZ1tdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIHJvbGxEaWNlOiBib29sZWFuO1xuICAgIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAobnVsbFZhbHVlOiBzdHJpbmcsIGVzY2FwZVN0cmluZzogc3RyaW5nLCByZWZlcmVuY2VNYXhEZXB0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgdGhpcy5saXN0ID0gW107XG4gICAgICAgIHRoaXMuZXJyb3IgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5nID0gW107XG4gICAgICAgIHRoaXMubnVsbFZhbHVlID0gbnVsbFZhbHVlO1xuICAgICAgICB0aGlzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZztcbiAgICAgICAgdGhpcy5yb2xsRGljZSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlTWF4RGVwdGggPSByZWZlcmVuY2VNYXhEZXB0aDtcbiAgICB9XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZywgKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMubm90ZU5hbWUgPSBub3RlTmFtZTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBub3RlQ29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGNvbnN0IGhlYWRpbmdSZWdleCA9IC9eIyAuKyQvO1xuICAgICAgICBsZXQgaGVhZGluZ0luZGV4ZXMgPSBmaW5kSW5kZXhlcyhsaW5lcywgKGVsZW1lbnQpID0+IGhlYWRpbmdSZWdleC50ZXN0KGVsZW1lbnQpKTtcbiAgICAgICAgaWYgKGhlYWRpbmdJbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5wdXNoKGBObyBsaXN0IGRlZmluZWQgaW4gbm90ZSBcIiR7bm90ZU5hbWV9XCJgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGluZ0luZGV4ZXNbMF0gIT09IDApIHtcbiAgICAgICAgICAgIC8vIHRha2luZyBjYXJlIG9mIE1EMDIyXG4gICAgICAgICAgICAvLyAgIE1EMDIyL2JsYW5rcy1hcm91bmQtaGVhZGluZ3M6IEhlYWRpbmdzIHNob3VsZCBiZSBzdXJyb3VuZGVkIGJ5IGJsYW5rIGxpbmVzXG4gICAgICAgICAgICAvLyBEdWUgdG8gc3BsaXQgb24gJ1xcbicsIHRoZSBzbGljZSwgYW5kIGF0IGxlYXN0IGEgam9pbiBvbiAnXFxuJyB0aGUgbGFzdCAnXFxuJyBpcyBhbHdheXMgbG9zdCAhXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gbGluZXMuc2xpY2UoMCwgaGVhZGluZ0luZGV4ZXNbMF0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRpbmdDb3VudCA9IGhlYWRpbmdJbmRleGVzLmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAwOyBjdXJyZW50SW5kZXggPCAoaGVhZGluZ0NvdW50IC0gMSk7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3QucHVzaChuZXcgTElSUExpc3QobGluZXMuc2xpY2UoaGVhZGluZ0luZGV4ZXNbY3VycmVudEluZGV4XSwgaGVhZGluZ0luZGV4ZXNbY3VycmVudEluZGV4ICsgMV0pLCB0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3QucHVzaChuZXcgTElSUExpc3QobGluZXMuc2xpY2UoaGVhZGluZ0luZGV4ZXNbaGVhZGluZ0NvdW50IC0gMV0pLCB0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcpKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBnZXRMaXN0U3VnZ2VzdGlvbigpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdIHtcbiAgICAgICAgbGV0IG5vdGVTdWdnZXN0aW9uOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdO1xuICAgICAgICBub3RlU3VnZ2VzdGlvbiA9IFtdO1xuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQubm90SGlkZGVuKCkpIHtcbiAgICAgICAgICAgICAgICBub3RlU3VnZ2VzdGlvbi5wdXNoKGVsZW1lbnQuZ2V0U3VnZ2VzdGlvbih0aGlzLm5vdGVOYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm90ZVN1Z2dlc3Rpb247XG4gICAgfVxuXG4gICAgZXhlY01hY3JvU3Vic3RpdHV0aW9uKGl0ZW06IHN0cmluZyk6IExJUlBFeGVjTWFjcm9JbnRlcmZhY2Uge1xuICAgICAgICBjb25zdCBzdHJpbmdNYWNyb1JlZlJlZ2V4OiBzdHJpbmcgPSBgXFx7KCR7dGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4gZXNjYXBlUmVnZXgoZWxlbWVudC50aXRsZSkpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgsJ21nJyk7XG4gICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgbGV0IG1vZGlmaWVkSXRlbTpzdHJpbmcgPSBpdGVtO1xuICAgICAgICBsZXQgbGlzdFRpdGxlOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSBtYWNyb1JlZlJlZ2V4LmV4ZWMobW9kaWZpZWRJdGVtKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBuZXdWYWx1ZTogc3RyaW5nID0gdGhpcy5waWNrUmFuZG9tSXRlbUZyb21MaXN0KG1hdGNoWzFdLCBmYWxzZSk7IFxuICAgICAgICAgICAgbGlzdFRpdGxlID0gbWF0Y2hbMF07XG4gICAgICAgICAgICBtb2RpZmllZEl0ZW0gPSBtb2RpZmllZEl0ZW0ucmVwbGFjZShsaXN0VGl0bGUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIG1hY3JvUmVmUmVnZXgubGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBuZXdWYWx1ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhc3RMaXN0VGl0bGU6IGxpc3RUaXRsZSxcbiAgICAgICAgICAgIG1vZGlmaWVkSXRlbTogbW9kaWZpZWRJdGVtLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHBpY2tSYW5kb21JdGVtRnJvbUxpc3QobGlzdFRpdGxlOiBzdHJpbmcsIHdvcmtPblJlZmVyZW5jZTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmFuZG9tSXRlbTogc3RyaW5nID0gXCJcIjtcbiAgICAgICAgbGV0IHJldHVybk9mRXhlY01hY3JvOiBMSVJQRXhlY01hY3JvSW50ZXJmYWNlID0ge1xuICAgICAgICAgICAgbGFzdExpc3RUaXRsZTogbGlzdFRpdGxlLFxuICAgICAgICAgICAgbW9kaWZpZWRJdGVtOiBcIlwiLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IHRoaXMubGlzdC5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50LnRpdGxlID09PSBsaXN0VGl0bGUpO1xuICAgICAgICBpZiAoY3VycmVudExpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmFuZG9tSXRlbSA9IGN1cnJlbnRMaXN0LnBpY2tSYW5kb21JdGVtKCk7XG4gICAgICAgICAgICBmb3IgKGxldCByZXBlYXQgPSAwOyByZXBlYXQgPCB0aGlzLnJlZmVyZW5jZU1heERlcHRoOyByZXBlYXQrKykge1xuICAgICAgICAgICAgICAgIHJldHVybk9mRXhlY01hY3JvID0gdGhpcy5leGVjTWFjcm9TdWJzdGl0dXRpb24ocmFuZG9tSXRlbSk7XG4gICAgICAgICAgICAgICAgcmFuZG9tSXRlbSA9IHJldHVybk9mRXhlY01hY3JvLm1vZGlmaWVkSXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdNYWNyb1JlZlJlZ2V4OiBzdHJpbmcgPSBgXFx7KCR7dGhpcy5saXN0Lm1hcCgoZWxlbWVudCkgPT4gZXNjYXBlUmVnZXgoZWxlbWVudC50aXRsZSkpLmpvaW4oJ3wnKX0pXFx9YDtcbiAgICAgICAgY29uc3QgbWFjcm9SZWZSZWdleCA9IG5ldyBSZWdFeHAgKHN0cmluZ01hY3JvUmVmUmVnZXgpO1xuICAgICAgICBpZiAobWFjcm9SZWZSZWdleC50ZXN0KHJhbmRvbUl0ZW0pICYmIHdvcmtPblJlZmVyZW5jZSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgTWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBpbiBub3RlIFwiJHt0aGlzLm5vdGVOYW1lfVwiIGFmdGVyIGNhbGxpbmcgXCIke3JldHVybk9mRXhlY01hY3JvLmxhc3RMaXN0VGl0bGV9XCJgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdvcmtPblJlZmVyZW5jZSAmJiB0aGlzLnJvbGxEaWNlKSB7XG4gICAgICAgICAgICBjb25zdCBkaWNlUm9sbGVyID0gbmV3IERpY2VSb2xsZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBkaWNlUm9sbGVyLnJlcGxhY2VEaWNlUm9sbHMocmFuZG9tSXRlbSwneycsJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21JdGVtO1xuICAgICAgICB9XG4gICAgfSBcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfTtcblxuICAgIGdldFdhcm5pbmcoKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsV2FybmluZzogc3RyaW5nW107XG4gICAgICAgIGFsbFdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZyA9IGFsbFdhcm5pbmcuY29uY2F0KHRoaXMud2FybmluZyk7XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBhbGxXYXJuaW5nID0gYWxsV2FybmluZy5jb25jYXQoZWxlbWVudC5nZXRXYXJuaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IE5vdGVXYXJuaW5nOiBzdHJpbmdbXTtcbiAgICAgICAgTm90ZVdhcm5pbmcgPSBbXTtcbiAgICAgICAgYWxsV2FybmluZy5mb3JFYWNoKChlbGVtZW50KSA9PiBcbiAgICAgICAgICAgIE5vdGVXYXJuaW5nLnB1c2goYFdhcm5pbmcgaW4gbm90ZSBcIiR7dGhpcy5ub3RlTmFtZX1cIiA6ICR7ZWxlbWVudH1gKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gTm90ZVdhcm5pbmc7XG4gICAgfTtcblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5sZW5ndGg7XG4gICAgfTtcblxuXG59XG5cbmNsYXNzIExJUlBNdWx0aU5vdGUgaW1wbGVtZW50cyBMSVJQTm90ZUludGVyZmFjZSB7XG4gICAgbXVsdGlOb3RlOiBMSVJQTm90ZVtdO1xuICAgIG51bGxWYWx1ZTogc3RyaW5nO1xuICAgIGVzY2FwZVN0cmluZzogc3RyaW5nO1xuICAgIG5vdGVTZWxlY3RlZDogTElSUE5vdGV8dW5kZWZpbmVkO1xuICAgIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXI7XG5cblxuICAgIGNvbnN0cnVjdG9yIChudWxsVmFsdWU6IHN0cmluZywgZXNjYXBlU3RyaW5nOiBzdHJpbmcsIHJlZmVyZW5jZU1heERlcHRoOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUgPSBbXTtcbiAgICAgICAgdGhpcy5udWxsVmFsdWUgPSBudWxsVmFsdWU7XG4gICAgICAgIHRoaXMuZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nO1xuICAgICAgICB0aGlzLm5vdGVTZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VNYXhEZXB0aCA9IHJlZmVyZW5jZU1heERlcHRoO1xuICAgIH07XG5cbiAgICBzZWxlY3ROb3RlKG5vdGVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKG5vdGVOYW1lID09PSAnJyAmJiB0aGlzLm11bHRpTm90ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGVTZWxlY3RlZCA9dGhpcy5tdWx0aU5vdGVbMF07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm90ZVNlbGVjdGVkID0gdGhpcy5tdWx0aU5vdGUuZmluZCgoZWxlbWVudCkgPT4gZWxlbWVudC5ub3RlTmFtZSA9PT0gbm90ZU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5vdGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBsb2FkRnJvbU5vdGUobm90ZU5hbWU6IHN0cmluZywgbm90ZUNvbnRlbnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBjdXJyZW50Tm90ZSA9IG5ldyBMSVJQTm90ZSh0aGlzLm51bGxWYWx1ZSwgdGhpcy5lc2NhcGVTdHJpbmcsIHRoaXMucmVmZXJlbmNlTWF4RGVwdGgpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBjdXJyZW50Tm90ZS5sb2FkRnJvbU5vdGUobm90ZU5hbWUsIG5vdGVDb250ZW50KTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUucHVzaChjdXJyZW50Tm90ZSk7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfTtcblxuICAgIGdldExpc3RTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBpZiAodGhpcy5ub3RlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90ZVNlbGVjdGVkLmdldExpc3RTdWdnZXN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxsTGlzdFN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbExpc3RTdWdnZXN0aW9uID0gYWxsTGlzdFN1Z2dlc3Rpb24uY29uY2F0KGVsZW1lbnQuZ2V0TGlzdFN1Z2dlc3Rpb24oKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFsbExpc3RTdWdnZXN0aW9uO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldE5vdGVTdWdnZXN0aW9uKCk6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10ge1xuICAgICAgICBsZXQgbm90ZVN1Z2dlc3Rpb246IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10gPSBbXTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5nZXRMaXN0U3VnZ2VzdGlvbigpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBub3RlU3VnZ2VzdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZU5hbWU6IGVsZW1lbnQubm90ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbGVtZW50Lm5vdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKGVsZW1lbnQuZGVzY3JpcHRpb24uc3BsaXQoJ1xcbicpWzBdKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm90ZVN1Z2dlc3Rpb247XG4gICAgfTtcbiAgICBcbiAgICBwaWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZTogc3RyaW5nLCB3b3JrT25SZWZlcmVuY2U6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGVTZWxlY3RlZC5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIH07IFxuXG4gICAgcGlja1JhbmRvbVdpdGhDcm9zc05vdGVNYWNybyhsaXN0VGl0bGU6IHN0cmluZywgd29ya09uUmVmZXJlbmNlOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBzdXBlck5vdGUgPSBuZXcgTElSUE5vdGUodGhpcy5udWxsVmFsdWUsIHRoaXMuZXNjYXBlU3RyaW5nLCB0aGlzLnJlZmVyZW5jZU1heERlcHRoKTtcbiAgICAgICAgdGhpcy5tdWx0aU5vdGUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBzdXBlck5vdGUubGlzdCA9IHN1cGVyTm90ZS5saXN0LmNvbmNhdChlbGVtZW50Lmxpc3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1cGVyTm90ZS5waWNrUmFuZG9tSXRlbUZyb21MaXN0KGxpc3RUaXRsZSk7XG4gICAgfTtcblxuICAgIGdldEVycm9yKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKHRoaXMubm90ZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGVTZWxlY3RlZC5nZXRFcnJvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGFsbEVycm9yOnN0cmluZ1tdID0gW107XG4gICAgICAgICAgICB0aGlzLm11bHRpTm90ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBhbGxFcnJvciA9IGFsbEVycm9yLmNvbmNhdChlbGVtZW50LmdldEVycm9yKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsRXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0V2FybmluZygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub3RlU2VsZWN0ZWQuZ2V0V2FybmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGFsbFdhcm5pbmc6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlOb3RlLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsbFdhcm5pbmcgPSBhbGxXYXJuaW5nLmNvbmNhdChlbGVtZW50LmdldFdhcm5pbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhbGxXYXJuaW5nO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlOb3RlLmxlbmd0aDtcbiAgICB9O1xuXG59O1xuXG5pbnRlcmZhY2UgTElSUFN1Z2dlc3Rpb25JbnRlcmZhY2Uge1xuICAgIG5vdGVOYW1lOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgTElSUFN1Z2dlc3RNb2RhbCBleHRlbmRzIFN1Z2dlc3RNb2RhbDxMSVJQU3VnZ2VzdGlvbkludGVyZmFjZT4ge1xuICAgIGl0ZW1zOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdO1xuICAgIGNhbGxiYWNrOiAodmFsdWU6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlKSA9PiB2b2lkO1xuICBcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaXRlbXM6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlW10sIGNhbGxiYWNrOiAodmFsdWU6IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlKSA9PiB2b2lkKSB7XG4gICAgICBzdXBlcihhcHApO1xuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihpdGVtOiBMSVJQU3VnZ2VzdGlvbkludGVyZmFjZSwgZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGl0ZW0udGl0bGUgfSk7XG4gICAgICAgIGVsLmNyZWF0ZUVsKCdzbWFsbCcsIHt0ZXh0OiBpdGVtLmRlc2NyaXB0aW9ufSk7XG4gICAgICB9XG4gIFxuICAgICAgb25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IExJUlBTdWdnZXN0aW9uSW50ZXJmYWNlLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soaXRlbSk7XG4gICAgICB9fVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0SXRlbVJhbmRvbVBpY2tlciBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IExJUlBQbHVnaW5TZXR0aW5ncztcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2xpc3QtdHJlZScsICdQaWNrIHJhbmRvbSBsaXN0IGl0ZW0nLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvVGhlSm9iKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2luc2VydC1yYW5kb20taXRlbScsXG4gICAgICAgICAgICBuYW1lOiAnSW5zZXJ0IHJhbmRvbSBpdGVtIGZyb20gbGlzdCcsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9UaGVKb2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBMSVJQU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgZG9UaGVKb2IoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFsbExJUlBGaWxlcyA9IHRoaXMuZ2V0TElSUEZpbGVzKHRoaXMuc2V0dGluZ3Mubm90ZVBhdGgpO1xuICAgICAgICBsZXQgY3VycmVudExJUlAgPSBuZXcgTElSUE11bHRpTm90ZSh0aGlzLnNldHRpbmdzLm51bGxWYWx1ZSwgdGhpcy5zZXR0aW5ncy5lc2NhcGVWYWx1ZSwgdGhpcy5zZXR0aW5ncy5tYXhNYWNyb0RlcHRoKTtcbiAgICAgICAgbGV0IGxvYWRXaXRob3V0RXJyb3I6Ym9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjdXJyZW50RmlsZSBvZiBhbGxMSVJQRmlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGU09iamVjdCA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdXJyZW50RmlsZSk7XG4gICAgICAgICAgICBsZXQgY29udGVudDpzdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGlmIChjdXJyZW50RlNPYmplY3QgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGN1cnJlbnRGU09iamVjdCk7XG4gICAgICAgICAgICAgICAgbG9hZFdpdGhvdXRFcnJvciA9ICBjdXJyZW50TElSUC5sb2FkRnJvbU5vdGUoY3VycmVudEZTT2JqZWN0LnBhdGguc2xpY2UoMCwgLTMpLCBjb250ZW50KSAmJiBsb2FkV2l0aG91dEVycm9yO1xuICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWxvYWRXaXRob3V0RXJyb3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRMSVJQLmdldEVycm9yKCkubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93V2FybmluZykge1xuICAgICAgICAgICAgY3VycmVudExJUlAuZ2V0V2FybmluZygpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoY3VycmVudExJUlAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdFcnJvciA6IGNoZWNrIHNldHRpbmdzIFwiUGF0aCBcIiBpbiBwbHVnaW4gTGlzdCBJdGVtIFJhbmRvbSBQaWNrZXIgIScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRMSVJQLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY3VycmVudExJUlAuc2VsZWN0Tm90ZSgnJyk7XG4gICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgfSkub3BlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXROb3RlU3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgTElSUFN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgY3VycmVudExJUlAuZ2V0TGlzdFN1Z2dlc3Rpb24oKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29ya1dpdGhUaXRsZShjdXJyZW50TElSUCwgaXRlbS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBMSVJQU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBjdXJyZW50TElSUC5nZXRMaXN0U3VnZ2VzdGlvbigpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TElSUC5zZWxlY3ROb3RlKGl0ZW0ubm90ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtXaXRoVGl0bGUoY3VycmVudExJUlAsIGl0ZW0udGl0bGUpO1xuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0TElSUEZpbGVzIChub3RlUGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYWxsVmF1bHRGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCk7XG4gICAgICAgIGxldCBmaWxlc0luTm90ZVBhdGg6c3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3Qgbm90ZVBhdGhSZWdleCA9IG5ldyBSZWdFeHAoYF4ke25vdGVQYXRofSgvLispP1xcLm1kJGApO1xuICAgICAgICBhbGxWYXVsdEZpbGVzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vdGVQYXRoUmVnZXgudGVzdChlbGVtZW50LnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgZmlsZXNJbk5vdGVQYXRoLnB1c2goZWxlbWVudC5wYXRoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXNJbk5vdGVQYXRoO1xuICAgIH07XG5cbiAgICB3b3JrV2l0aFRpdGxlKE5vdGU6IExJUlBOb3RlSW50ZXJmYWNlLCBsaXN0VGl0bGU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblxuICAgICAgICBpZiAoYWN0aXZlVmlldykge1xuICAgICAgICAgICAgbGV0IFBpY2tNZXRob2Q6c3RyaW5nID0gJyc7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgIFBpY2tNZXRob2QgPSBcInBpY2tSYW5kb21XaXRoQ3Jvc3NOb3RlTWFjcm9cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgUGlja01ldGhvZCA9IFwicGlja1JhbmRvbUl0ZW1Gcm9tTGlzdFwiO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uUmVnZXg6c3RyaW5nID0gYF4ke3RoaXMuc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9ufSRgO1xuICAgICAgICAgICAgY29uc3Qgbm90aWNlUmVnZXggPSBuZXcgUmVnRXhwKHNlbGVjdGlvbkZvck5vdGlmaWNhdGlvblJlZ2V4KTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAobm90aWNlUmVnZXgudGVzdChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShOb3RlW1BpY2tNZXRob2RdKGxpc3RUaXRsZSkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbignJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RyaW5nVG9JbnNlcnQ6IHN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdEluc2VydFJlZ0V4ID0gL14oXFxkKykoLiopL2dtO1xuICAgICAgICAgICAgICAgIGxldCByZWdFeEV4ZWN1dGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgcmVwZWF0OiBudW1iZXI7XG4gICAgICAgICAgICAgICAgaWYgKChyZWdFeEV4ZWN1dGlvbiA9IHJlcGVhdEluc2VydFJlZ0V4LmV4ZWMoc2VsZWN0aW9uKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0ID0gTnVtYmVyKHJlZ0V4RXhlY3V0aW9uWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsaW1pdGVyID0gc2VsZWN0aW9uLnJlcGxhY2UoL15cXGQrLywgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnJheVN0cmluZ1RvaW5zZXJ0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcGVhdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVN0cmluZ1RvaW5zZXJ0LnB1c2goTm90ZVtQaWNrTWV0aG9kXShsaXN0VGl0bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdUb0luc2VydCA9IGFycmF5U3RyaW5nVG9pbnNlcnQuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1RvSW5zZXJ0ID0gTm90ZVtQaWNrTWV0aG9kXShsaXN0VGl0bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihzdHJpbmdUb0luc2VydCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIGFjdGl2ZSBNYXJrZG93biBlZGl0b3IgZm91bmQuXCIpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG5cbmNsYXNzIExJUlBTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBMaXN0SXRlbVJhbmRvbVBpY2tlcjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IExpc3RJdGVtUmFuZG9tUGlja2VyKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdOb3RlIHNldHRpbmcnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05vdGUgUGF0aCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnVGhlIHBhdGggYW5kIGZpbGVuYW1lIG9mIHRoZSBub3RlIHRoYXQgY29udGFpbnMgdGhlIGxpc3RzIHRvIGJlIHVzZWQuIEV4ZW1wbGUgOiBcIkZvbGRlci9Ob3RlXCIuJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdGhlIHBhdGggdG8geW91ciBub3RlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZVBhdGgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlUGF0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdJbnRlcmZhY2Ugc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgbm90ZSBzZWxlY3RvcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgcGF0aCBpcyBhIGZvbGRlcicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd05vdGVTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Tm90ZVNlbGVjdG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IHdhcm5pbmcnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Rpc3BsYXkgdGhlIHdhcm5pbmdzIG9mIG5vdGVzIGFuZCBsaXN0cywgaWYgYW55LiBXYXJuaW5ncyBmb3IgbWFjcm8gZGVwdGggbGltaXQgcmVhY2hlZCBhcmUgYWx3YXlzIGRpc3BsYXllZC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dXYXJuaW5nID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdMaXN0IHNldHRpbmdzJyB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdOdWxsIHZhbHVlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgZmlyc3QgbGluZSBvZiBhbiBpdGVtIGhhcyB0aGlzIHZhbHVlLCB0aGUgbGluZSBpcyBmbHVzaC4nKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB2YWx1ZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm51bGxWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdFc2NhcGUgdmFsdWUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIHlvdSB3YW50IHNvbWUgaGVhZGluIG9uZSBvciBmaXJzdCBsZXZlbCBsaXN0IGl0ZW0gaW4geW91ciBpdGVtLCB5b3UgY291bGQgZXNjYXBlIHRoZW0gd2l0aCB0aGVzZSB2YWx1ZScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXNjYXBlVmFsdWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lc2NhcGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdTZWxlY3Rpb24gc2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1NlbGVjdGlvbiB2YWx1ZSBmb3Igbm90aWZpY2F0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiB0aGUgdGV4dCBzZWxlY3RlZCBoYXMgdGhpcyB2YWx1ZSwgdGhlIGl0ZW0gaXMgbm90IGluc2VydGVkLCBidXQgbm90aWZpZWQgIScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHZhbHVlJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlbGV0ZSBzZWxlY3Rpb24gdmFsdWUgZm9yIG5vdGlmaWNhdGlvbicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgc2V0LCB0aGUgc2VsZWN0ZWQgdmFsdWUgZm9yIG5vdGlmaWNhdGlvbiBpcyBkZWxldGVkLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsZXRlU2VsZWN0aW9uRm9yTm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlbGV0ZVNlbGVjdGlvbkZvck5vdGlmaWNhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1RlY2huaWNhbCBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdNYWNybyBkZXB0aCBsaW1pdCcpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ01hY3JvIHJlY3Vyc2lvbiBsaW1pdDogaG93IG1hbnkgbmVzdGVkIG1hY3JvIGNhbGxzIGFyZSBhbGxvd2VkLiBaZXJvIHByZXZlbnRzIG5lc3RlZCBtYWNyb3MgZnJvbSBiZWluZyByZXNvbHZlZC4nKVxuICAgICAgICAgICAgICAgIC5hZGRTbGlkZXIoKHNsaWRlcikgPT5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMCwgMTAsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TWFjcm9EZXB0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQWxsb3cgY3Jvc3Mgbm90ZSByZWZlcmVuY2UnKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKCdibGEgYmxhIGJsYS4nKVxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsb3dDcm9zc05vdGVSZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGUub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxvd0Nyb3NzTm90ZVJlZmVyZW5jZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxzQkFBMEc7QUFFMUcsU0FBUyxZQUFlLFNBQWMsV0FBNkQ7QUFDL0YsUUFBTSxVQUFvQixDQUFDO0FBQzNCLFVBQVEsUUFBUSxDQUFDLFNBQVMsVUFBVTtBQUNsQyxRQUFJLFVBQVUsU0FBUyxLQUFLLEdBQUc7QUFDN0IsY0FBUSxLQUFLLEtBQUs7QUFBQSxJQUNwQjtBQUFBLEVBQ0YsQ0FBQztBQUNELFNBQU87QUFDWDtBQUVBLFNBQVMsWUFBWSxnQkFBZ0M7QUFDakQsU0FBTyxlQUFlLFFBQVEsdUJBQXVCLE1BQU07QUFDL0Q7QUFhQSxJQUFNLG1CQUF1QztBQUFBLEVBQ3pDLFVBQVU7QUFBQSxFQUNWLGFBQWE7QUFBQSxFQUNiLGVBQWU7QUFBQSxFQUNmLDBCQUEwQjtBQUFBLEVBQzFCLGdDQUFnQztBQUFBLEVBQ2hDLFdBQVc7QUFBQSxFQUNYLGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUFBLEVBQ2xCLHlCQUF5QjtBQUM3QjtBQUdBLElBQU0sYUFBTixNQUFpQjtBQUFBLEVBQ2IsVUFBVSxZQUE2QjtBQUNyQyxVQUFNLFlBQVk7QUFDbEIsV0FBTyxVQUFVLEtBQUssVUFBVTtBQUFBLEVBQ2xDO0FBQUEsRUFFQSxTQUFTLFlBQTRCO0FBQ25DLFFBQUksQ0FBQyxLQUFLLFVBQVUsVUFBVSxHQUFHO0FBQy9CLFlBQU0sSUFBSSxNQUFNLHVDQUFvQztBQUFBLElBQ3REO0FBRUEs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USwyR0FBMkcsRUFDbkg7QUFBQSxNQUFRLFVBQVEsS0FDWixlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyxXQUFXLEVBQ3pDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLGFBQUssT0FBTyxTQUFTLGNBQWM7QUFDbkMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNMO0FBRUosZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RCxRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFBUSxrQ0FBa0MsRUFDMUMsUUFBUSwrRUFBK0UsRUFDdkY7QUFBQSxNQUFRLFVBQVEsS0FDWixlQUFlLGFBQWEsRUFDNUIsU0FBUyxLQUFLLE9BQU8sU0FBUyx3QkFBd0IsRUFDdEQsU0FBUyxPQUFPLFVBQVU7QUFDdkIsYUFBSyxPQUFPLFNBQVMsMkJBQTJCO0FBQ2hELGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTDtBQUVKLFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLHlDQUF5QyxFQUNqRCxRQUFRLHlEQUF5RCxFQUNqRSxVQUFVLENBQUMsV0FBVztBQUNuQixhQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsOEJBQThCO0FBQ25FLGFBQU8sU0FBUyxPQUFPLFVBQVU7QUFDN0IsYUFBSyxPQUFPLFNBQVMsaUNBQWlDO0FBQ3RELGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTCxDQUFDO0FBRUQsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RCxRQUFJLHdCQUFRLFdBQVcsRUFDbEIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSxrSEFBa0gsRUFDMUg7QUFBQSxNQUFVLENBQUMsV0FDUixPQUNLLFNBQVMsS0FBSyxPQUFPLFNBQVMsYUFBYSxFQUMzQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQ2xCLGtCQUFrQixFQUNsQixTQUFTLE9BQU8sVUFBVTtBQUMzQixhQUFLLE9BQU8sU0FBUyxnQkFBZ0I7QUFDckMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQy9CLENBQUM7QUFBQSxJQUNUO0FBRUosUUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsNEJBQTRCLEVBQ3BDLFFBQVEsY0FBYyxFQUN0QixVQUFVLENBQUMsV0FBVztBQUNuQixhQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsdUJBQXVCO0FBQzVELGFBQU8sU0FBUyxPQUFPLFVBQVU7QUFDN0IsYUFBSyxPQUFPLFNBQVMsMEJBQTBCO0FBQy9DLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNuQyxDQUFDO0FBQUEsSUFDTCxDQUFDO0FBQUEsRUFDVDtBQUNSOyIsCiAgIm5hbWVzIjogWyJpdGVtIiwgInJlcGVhdCJdCn0K
